# .bashrc

# Source global definitions
[[ -f /etc/bashrc ]] && source /etc/bashrc

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi

export EDITOR='vim'
export MANPAGER='vim +MANPAGER "+set laststatus=0" "+noremap q <Cmd>qall!<CR>" --not-a-term -'

# Don't put duplicate lines or lines starting with space in the history.
# See `man bash` for more options.
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it.
shopt -s histappend

# For setting history length see HISTSIZE and HISTFILESIZE in `man bash`.
HISTSIZE=20000
HISTFILESIZE=20000

# User specific aliases and functions
alias ls="ls --color=always --group-directories-first --indicator-style=slash --time-style=long-iso -v"
alias ll="ls -l --classify --size"
alias la="ls -l --classify --size --all"

alias rm="rm --interactive"
alias cp="cp --interactive"
alias mv="mv --interactive"

alias bc="bc --mathlib"

alias diff="diff --color=always"

alias dir="dir --color=always"
alias vdir="vdir --color=always"

alias grep="grep --color=always"
alias egrep="egrep --color=always"
alias fgrep="fgrep --color=always"

alias less="LESSHISTFILE=- less -FXR --mouse --wheel-lines=3"
alias rsync="rsync --progress"

# Customize bash prompt
_parse_git_branch() {
    # show git branch and its status if in a git tree
    local result=''
    local git_result=$(git status --branch --porcelain=2 2> /dev/null)

    if [[ $? -eq 0 ]]; then
        local git_branch=$(printf "%s\n" "${git_result[@]}" | grep '^# branch.head' | cut -d' ' -f3)
        local git_status=$(printf "%s\n" "${git_result[@]}" | grep -v '^# ')

        if [[ -n "${git_branch}" ]]; then
            if [[ -n "${git_status}" ]]; then
                # modified -> RED
                result+="\001$(tput sgr0; tput setaf 1)\002"
            else
                # clean -> GREEN
                result+="\001$(tput sgr0; tput setaf 2)\002"
            fi

            result+="* ${git_branch}"
        fi
    fi

    echo -ne "${result}"
}

_show_last_command_status() {
    local result=''

    # change the prompt to indicate the status of last executed command
    if [[ ${last_command_status} -eq 0 ]]; then
        # success -> GREEN
        result+="\001$(tput sgr0; tput setaf 2)\002"
    else
        # error -> RED
        result+="\001$(tput sgr0; tput setaf 1)\002"
    fi

    echo -ne "${result}"
}

_customize_shell_prompt() {
    # The entire table of ANSI color codes
    # https://gist.github.com/iamnewton/8754917
    # \### format must be used in functions
    # \001 == \[
    # \002 == \]
    # \033 == \e

    local prompt='\n'

    # begin box drawing
    prompt+="\001$(tput sgr0)\002"
    prompt+='┌ '

    # current time
    prompt+="\001$(tput sgr0; tput setaf 5)\002"
    prompt+='\A'
    prompt+=' '

    # user@host:pwd
    prompt+="\001$(tput sgr0; tput setaf 4)\002"
    prompt+='\u'
    prompt+="\001$(tput sgr0; tput setaf 0)\002"
    prompt+='@'
    prompt+='\h'
    prompt+=':'
    prompt+="\001$(tput sgr0; tput setaf 4)\002"
    prompt+='\w'
    prompt+=' '

    # show git branch and its status if in a git tree
    prompt+='$(_parse_git_branch)'

    # change line
    prompt+='\n'

    # end box drawing
    prompt+="\001$(tput sgr0)\002"
    prompt+='└ '

    # change the prompt to indicate the status of last executed command
    prompt+='$(_show_last_command_status)'
    prompt+='\$ '

    # reset colors
    prompt+="\001$(tput sgr0)\002"

    PROMPT_COMMAND='last_command_status=$?'
    PS1="${prompt}"
}

_customize_shell_prompt
