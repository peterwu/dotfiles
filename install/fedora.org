#+startup: overview
#+title: Fedora Installation Guide

* preparation
1. download the Everything iso from https://alt.fedoraproject.org/
2. burn the iso to usb key
   #+begin_src bash
     # dd bs=4M if=/path/to/Fedora-Everything-netinst-x86_64-XYZ.iso of=/dev/sdx status=progress && sync
   #+end_src
3. turn off Secure Boot in BIOS
* installation
1. sudo -s
2. setenforce 0
3. sgdisk /dev/vda <<< “
       label: gpt
       size=512M,type=U,bootable
       size=+,type=L
   ”
4. disk partition
   | size | mount point       | type  |
   |------+-------------------+-------|
   | 512M | /boot/efi         | vfat  |
   | REST | /{@, @home, @var} | btrfs |
5. mkfs.fat -F 32 /dev/vda1
6. mkfs.btrfs /dev/vda2
7. mount /dev/vda2 /mnt
8. cd /mnt
9. btrfs subvolume create @
10. btrfs subvolume create @home
11. btrfs subvolume create @var
12. cd
13. umount /mnt
14. mount -o compress=zstd:1,subvol=@ /dev/vda2 /mnt
15. mkdir -p /mnt/{home,var}
16. mount -o compress=zstd:1,subvol=@home /dev/vda2 /mnt/home
17. mount -o compress=zstd:1,subvol=@var /dev/vda2 /mnt/var
18. mkdir -p /mnt/boot/efi
19. mount /dev/vda1 /mnt/boot/efi
20. mkdir -p /mnt/{proc,sys,dev/pts}
21. mount -t proc proc /mnt/proc
22. mount -t sysfs sys /mnt/sys
23. mount -B /dev /mnt/dev
24. mount -t devpts pts /mnt/dev/pts
25. source /etc/os-release
26. export VERSION_ID=$VERSION_ID
27. dnf --installroot=/mnt --releasever=$VERSION_ID groupinstall core
28. dnf --installroot=/mnt install glibc-langpack-en
29. mv /mnt/etc/resolv.conf{,.orig}
30. cp -L /etc/resolv.conf /mnt/etc
31. dnf install arch-install-scripts
32. genfstab -U /mnt >> /mnt/etc/fstab
33. chroot /mnt /bin/bash
34. mount -a
35. mount -t efivarfs efivarfs /sys/firmware/efi/efivars
36. fixfiles -F onboot
37. ensure “install_weak_deps=False” in /etc/dnf/dnf.conf
38. dnf install btrfs-progs efibootmgr systemd-boot iwd iwl7260-firmware
39. remove grub and install systemd-boot
40. dnf install kernel
41. systemd-firstboot
42. passwd (for root)
43. exit
44. umount -n -R /mnt
45. reboot
* configuration
** remove bloatwarez
#+begin_src bash
  # dnf remove sssd* yum nano
#+end_src
** enable personal and rpmfusion repos
#+begin_src bash
  # dnf copr enable peterwu/rendezvous
  # dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
#+end_src
** acquire iwlwifi8265 firmware
#+begin_src bash
  # dnf install iwl7260-firmware
  # cp /usr/lib/firmware/iwlwifi-8265-36.ucode.xz /usr/local/lib/firmware/
  # dnf remove iwl7260-firmware
  # cd /usr/lib/firmware
  # ln -sf /usr/local/lib/firmware/iwlwifi-8265-36.ucode.xz
#+end_src
** install plymouth system theme
#+begin_src bash
  # dnf install plymouth-system-theme
  # plymouth-set-default-theme -R bgrt
#+end_src
** replace grub with systemd-boot
1. make sure that Fedora is loaded in UEFI mode
   #+begin_src bash
     # test -d /sys/firmware/efi && echo EFI || echo Legacy
   #+end_src
2. remove grub from dnf protected packages
   #+begin_src bash
     # rm /etc/dnf/protected.d/{grub*,shim}.conf
   #+end_src
3. remove grub
   #+begin_src bash
     # dnf remove grubby grub2* shim* memtest86
     # rm -rf /boot/{grub2,loader}
   #+end_src
4. save boot options to /etc/kernel/cmdline
   #+begin_src bash
     # cat /proc/cmdline | cut -d ' ' -f 2- | tee /etc/kernel/cmdline
   #+end_src
5. install systemd-boot
   #+begin_src bash
     # bootctl install --efi-boot-option-description="Fedora"
   #+end_src
6. initialize initrd rebuild and generate new config files
   #+begin_src bash
     # kernel-install add $(uname -r) /lib/modules/$(uname -r)/vmlinuz
     # dnf reinstall kernel-core
   #+end_src
7. reboot
   #+begin_src bash
     # systemctl reboot
   #+end_src
** replace NetworkManager + dhcp-client with systemd-networkd + iwd
#+begin_src bash
  # dnf remove NetworkManager dhcp-client
  # dnf install iwd
#+end_src

#+begin_src conf
  /etc/iwd/main.conf

  [General]
  EnableNetworkConfiguration=true

  [Scan]
  DisablePeriodicScan=true
#+end_src

#+begin_src conf
  /etc/systemd/network/20-wired.network

  [Match]
  Name=enp0s31f6

  [Network]
  DHCP=yes

  [DHCPv4]
  RouteMetric=10
#+end_src
#+begin_src conf
  /etc/systemd/network/25-wireless.network

  [Match]
  Name=wlp4s0

  [Network]
  DHCP=yes

  [DHCPv4]
  RouteMetric=20
#+end_src

#+begin_src bash
  # systemctl enable --now iwd
  $ iwctl --passphrase {passphrase} station {device} connect {SSID}
#+end_src

#+begin_src bash
  # systemctl enable systemd-networkd
#+end_src
** replace wpa_supplicant with iwd
#+begin_src bash
  # dnf remove wpa_supplicant dhcp-client
  # dnf install iwd
#+end_src

#+begin_src conf
  /etc/iwd/main.conf

  [General]
  EnableNetworkConfiguration=true

  [Scan]
  DisablePeriodicScan=true
#+end_src

#+begin_src conf
  /etc/NetworkManager/NetworkManager.conf

  [device]
  wifi.scan-rand-mac-address=no
  wifi.backend=iwd
#+end_src

#+begin_src bash
  # systemctl enable --now iwd
#+end_src
** install Xorg
#+begin_src bash
  # dnf install xorg-x11-server-Xorg
  # dnf install xorg-x11-xinit
  # dnf install xorg-x11-drv-libinput
  # dnf install mesa-*-drivers
#+end_src
** install window manager and relevant utils
#+begin_src bash
  # dnf install herbstluftwm
  # dnf install feh picom dunst xset
  # dnf install xss-lock xsecurelock
  # dnf install wireplumber pipewire pipewire-utils
  # dnf install pipewire-pulseaudio pulseaudio-utils
#+end_src
** install terminal emulator
#+begin_src bash
  # dnf install kitty
#+end_src
** startx manually
- /usr/local/bin/welcome
#+begin_src bash

  #!/usr/bin/env bash

  host_name=$(hostname)
  real_name=$(getent passwd `whoami`|cut -d: -f5)

  export LESSHISTFILE=-
  export XAUTHORITY=$XDG_RUNTIME_DIR/.Xauthority

  echo "Hi ${real_name}, welcome to ${host_name}!" | /usr/bin/cowsay

  echo ""
  read -e -p "Would you like to $(tput setaf 2)startx$(tput sgr0)? (Y/n) " answer
  answer=${answer:=Y}

  if [[ ${answer^} == "Y" ]]; then
      exec /usr/local/bin/startx
  else
      exec /bin/bash
  fi
#+end_src

- /usr/local/bin/startx
#+begin_src bash
  #!/usr/bin/env bash

  # When starting the defaultserver start X on the current tty to avoid
  # the startx session being seen as inactive:
  # "https://bugzilla.redhat.com/show_bug.cgi?id=806491"
  tty=$(tty)
  if expr "$tty" : '/dev/tty[0-9][0-9]*$' > /dev/null; then
          tty_num=$(echo "$tty" | grep -oE '[0-9]+$')
          vtarg="vt$tty_num -keeptty"

          exec xinit $HOME/.config/X11/xinitrc -- /usr/bin/X $DISPLAY $vtarg -auth $XAUTHORITY &> /dev/null
  fi
#+end_src
** start graphical interface on boot
#+begin_src bash
  # systemctl set-default graphical.target
#+end_src
** disable raid-check.timer
#+begin_src bash
  # systemctl disable --now raid-check.timer
#+end_src
** install software
- browsers
  #+begin_src bash
    # dnf install firefox chromium

    # cat > /etc/yum.repos.d/google-chrome.repo << EOF
    [google-chrome]
    name=google-chrome
    baseurl=https://dl.google.com/linux/chrome/rpm/stable/x86_64
    enabled=1
    gpgcheck=1
    gpgkey=https://dl.google.com/linux/linux_signing_key.pub
    EOF
    # dnf install google-chrome-stable

    # cat > /etc/yum.repos.d/microsoft-edge.repo << EOF
    [microsoft-edge]
    name=microsoft-edge
    baseurl=https://packages.microsoft.com/yumrepos/edge/
    enabled=1
    gpgcheck=1
    gpgkey=https://packages.microsoft.com/keys/microsoft.asc
    EOF
    # rpm --import https://packages.microsoft.com/keys/microsoft.asc
    # dnf install microsoft-edge-stable
  #+end_src
- editors
  #+begin_src bash
    # dnf install vim emacs
  #+end_src
- input methods
  #+begin_src bash
    # dnf install ibus ibus-libpinyin
  #+end_src
- dbus
  #+begin_src bash
    # dnf install dbus-daemon
  #+end_src
** setup udev rules
#+begin_src bash
  # cat > /etc/udev/rules.d/90-backlight.rules << EOF
  SUBSYSTEM=="backlight", ACTION=="add",
  RUN+="/bin/chgrp video /sys/class/backlight/intel_backlight/brightness",
  RUN+="/bin/chmod g+w   /sys/class/backlight/intel_backlight/brightness"
  EOF
  # usermod -a -G video `whoami`
#+end_src
** suspend settings
- after idle
  #+begin_src bash
    # cat > /etc/systemd/logind.conf << EOF
    IdleAction=suspend
    IdleActionSec=2min
    EOF
  #+end_src
- disable usb wakeup
  #+begin_src bash
    # cat > /etc/tmpfiles.d/disable-usb-wakeup.conf << EOF
    #    Path                  Mode UID  GID  Age Argument
    w    /proc/acpi/wakeup     -    -    -    -   XHC
    EOF
  #+end_src

** pair bluetooth devices
#+begin_src conf
  $ bluetoothctl
  [bluetooth#] scan on
  [bluetooth#] pair {BT_MAC_ADDRESS}
  [bluetooth#] connect {BT_MAC_ADDRESS}
  [bluetooth#] trust {BT_MAC_ADDRESS}
  [bluetooth#] quit
#+end_src

** turn on numlock on startup
- /usr/local/bin/numlock
  #+begin_src bash
    #!/usr/bin/env bash

    for tty in /dev/tty{1..6}
    do
        /usr/bin/setleds -D +num < "$tty";
    done
  #+end_src
- /etc/systemd/system/numlock.service
  #+begin_src conf
    [Unit]
    Description=numlock

    [Service]
    ExecStart=/usr/local/bin/numlock
    StandardInput=tty
    RemainAfterExit=yes

    [Install]
    WantedBy=multi-user.target
  #+end_src
