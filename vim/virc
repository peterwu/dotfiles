" defaults
source $VIMRUNTIME/defaults.vim

" options
set number
set relativenumber
set smartindent
set expandtab
set tabstop=8
set shiftwidth=4
set softtabstop=0
set shortmess+=I
set laststatus=2
set listchars=trail:·,tab:»·

" disable arrow keys in normal mode
map <Up>    <Nop>
map <Down>  <Nop>
map <Left>  <Nop>
map <Right> <Nop>

" disable arrow keys in insert mode
imap <Up>    <Nop>
imap <Down>  <Nop>
imap <Left>  <Nop>
imap <Right> <Nop>

" swap j/k <-> gj/gk
nnoremap <expr> j (v:count ? 'j' : 'gj')
nnoremap <expr> k (v:count ? 'k' : 'gk')

" copy to clipboard
nnoremap Y yg_

if has('clipboard')
    vnoremap <Leader>y  "+y
    nnoremap <Leader>y  "+y
    nnoremap <Leader>Y  "+yg_
    nnoremap <Leader>yy "+y_
elseif executable('/usr/bin/xsel')
    vnoremap <silent> <Leader>y  <Cmd>set opfunc=CopyToClipboard<CR>g@
    nnoremap <silent> <Leader>y  <Cmd>set opfunc=CopyToClipboard<CR>g@
    nnoremap <silent> <Leader>Y  <Cmd>set opfunc=CopyToClipboard<CR>g@g_
    nnoremap <silent> <Leader>yy <Cmd>set opfunc=CopyToClipboard<CR>g@_

    function! s:CopyToClipboard(type, ...) abort
        const l:reg = '"'
        const l:sel_save = &selection
        let &selection = "inclusive"
        const l:cb_save  = &clipboard
        const l:reg_save = getreg(reg)
        const l:reg_type = getregtype(reg)

        if a:type ==# "char"
            silent! execute 'normal! v`[o`]"' .. l:reg .. 'y'
        elseif a:type ==# "line"
            silent! execute 'normal! `[V`]"' .. l:reg .. 'y'
        elseif a:type ==# "v" || a:type ==# "V" || a:type ==# "\<C-V>" || a:type ==# "block"
            let &selection = l:sel_save
            const l:ve = &virtualedit

            if !(a:0 && a:1)
                set virtualedit=none
            endif

            silent execute 'normal! gv"' .. l:reg .. 'y'
            let &virtualedit = l:ve
        elseif a:type =~ '^\d\+$'
            silent! execute 'normal! ^v' .. a:type .. '$h"' .. l:reg .. 'y'
            if mode() ==# 'v'
                normal! v
            endif
        else
            let &selection = l:sel_save
            let &clipboard = l:cb_save
        endif

        silent! call system('/usr/bin/xsel -i -b -l /dev/null', getreg(l:reg))

        call setreg(l:reg, l:reg_save, l:reg_type)
        let &selection = l:sel_save
        let &clipboard = l:cb_save
    endfunction
endif

" paste from clipboard
if has('clipboard')
    nnoremap <Leader>p "+p
    nnoremap <Leader>P "+P
    vnoremap <Leader>p "+p
    vnoremap <Leader>P "+P
elseif executable('/usr/bin/xsel')
    nnoremap <silent> <Leader>p <Cmd>let @"=system('xsel -o -b')<CR>""p
    nnoremap <silent> <Leader>P <Cmd>let @"=system('xsel -o -b')<CR>""P
    vnoremap <silent> <Leader>p <Cmd>let @"=system('xsel -o -b')<CR>""p
    vnoremap <silent> <Leader>P <Cmd>let @"=system('xsel -o -b')<CR>""P
endif

" set list when in insert mode
autocmd InsertEnter,InsertLeave * set list!
