" let the fun begin

" commons {{{

const s:vim_home = expand('<sfile>:p:h')
const s:enable_modus_operandi_theme = v:true

" }}}

" options {{{

" --------
" defaults
" --------
source $VIMRUNTIME/defaults.vim

" ---------
" work dirs
" ---------
call mkdir(s:vim_home .. '/backup', 'p', 0o700)
call mkdir(s:vim_home .. '/cache',  'p', 0o700)
call mkdir(s:vim_home .. '/swap',   'p', 0o700)
call mkdir(s:vim_home .. '/undo',   'p', 0o700)
call mkdir(s:vim_home .. '/view',   'p', 0o700)

" -------
" options
" -------
set autoindent
set autoread
let &backupdir=s:vim_home .. '/backup'
set background=light
set complete-=i
set completeopt=menu,menuone,noinsert,noselect
set cursorline
let &directory=s:vim_home .. '/swap'
set encoding=utf-8
set expandtab
set fileformats=unix,dos,mac
set foldmethod=marker
set formatoptions=tcqj
set hidden
set history=1000
set hlsearch
set ignorecase
set laststatus=2
set lazyredraw
set listchars=trail:·,tab:»·
set mouse=a
set mousemodel=popup_setpos
set nolist
set noshowmode
set notitle
set number
set path+=**
set pumheight=7
set relativenumber
set scrolloff=1
set sessionoptions-=options
set shiftround
set shiftwidth=4
set shortmess+=Ic
set showmatch
set sidescroll=1
set sidescrolloff=2
set smartcase
set smartindent
set smarttab
set softtabstop=0
set splitbelow
set splitright
set switchbuf=uselast
set tabstop=8
set termencoding=utf-8
set termguicolors
set timeoutlen=777
set ttimeoutlen=77
let &undodir=s:vim_home .. '/undo'
set undofile
let &viewdir=s:vim_home .. '/view'
set viewoptions=cursor,folds
set viminfo=%,<800,'10,/50,:100,h,f0
let &viminfofile=s:vim_home .. '/cache/viminfo'
set virtualedit=block
set wildoptions=pum,tagfile

" }}}

" color scheme {{{

" modus operandi color palette
const s:palette = {
            "\ Basic values
            \  'bg_main':            "#ffffff",
            \  'bg_dim':             "#f0f0f0",
            \  'fg_main':            "#000000",
            \  'fg_dim':             "#595959",
            \  'fg_alt':             "#193668",
            \  'bg_active':          "#c4c4c4",
            \  'bg_inactive':        "#e0e0e0",
            \  'bg_hl_line':         "#dae5ec",
            \
            "\ Common accent foregrounds
            \  'red':                "#a60000",
            \  'red_warmer':         "#972500",
            \  'red_cooler':         "#a0132f",
            \  'red_faint':          "#7f0000",
            \  'red_intense':        "#d00000",
            \  'green':              "#006800",
            \  'green_warmer':       "#316500",
            \  'green_cooler':       "#00663f",
            \  'green_faint':        "#2a5045",
            \  'green_intense':      "#008900",
            \  'yellow':             "#6f5500",
            \  'yellow_warmer':      "#884900",
            \  'yellow_cooler':      "#7a4f2f",
            \  'yellow_faint':       "#624416",
            \  'yellow_intense':     "#808000",
            \  'blue':               "#0031a9",
            \  'blue_warmer':        "#3548cf",
            \  'blue_cooler':        "#0000b0",
            \  'blue_faint':         "#003497",
            \  'blue_intense':       "#0000ff",
            \  'magenta':            "#721045",
            \  'magenta_warmer':     "#8f0075",
            \  'magenta_cooler':     "#531ab6",
            \  'magenta_faint':      "#7c318f",
            \  'magenta_intense':    "#dd22dd",
            \  'cyan':               "#005e8b",
            \  'cyan_warmer':        "#3f578f",
            \  'cyan_cooler':        "#005f5f",
            \  'cyan_faint':         "#005077",
            \  'cyan_intense':       "#008899",
            \
            "\ Uncommon accent foregrounds
            \  'rust':               "#8a290f",
            \  'gold':               "#80601f",
            \  'olive':              "#56692d",
            \  'slate':              "#2f3f83",
            \  'indigo':             "#4a3a8a",
            \  'maroon':             "#731c52",
            \  'pink':               "#7b435c",
            \
            "\ Common accent backgrounds
            \  'bg_red_intense':     "#ff8f88",
            \  'bg_green_intense':   "#8adf80",
            \  'bg_yellow_intense':  "#f3d000",
            \  'bg_blue_intense':    "#bfc9ff",
            \  'bg_magenta_intense': "#dfa0f0",
            \  'bg_cyan_intense':    "#a4d5f9",
            \
            \  'bg_red_subtle':      "#ffcfbf",
            \  'bg_green_subtle':    "#b3fabf",
            \  'bg_yellow_subtle':   "#fff576",
            \  'bg_blue_subtle':     "#ccdfff",
            \  'bg_magenta_subtle':  "#ffddff",
            \  'bg_cyan_subtle':     "#bfefff",
            \
            \  'bg_red_nuanced':     "#fff1f0",
            \  'bg_green_nuanced':   "#ecf7ed",
            \  'bg_yellow_nuanced':  "#fff3da",
            \  'bg_blue_nuanced':    "#f3f3ff",
            \  'bg_magenta_nuanced': "#fdf0ff",
            \  'bg_cyan_nuanced':    "#ebf6fa",
            \
            "\ Uncommon accent backgrounds
            \  'bg_ochre':           "#f0e0cc",
            \  'bg_lavender':        "#dfdbfa",
            \  'bg_sage':            "#c0e7d4",
            \
            "\ Diffs
            \  'bg_added':           "#c1f2d1",
            \  'bg_added_faint':     "#d8f8e1",
            \  'bg_added_refine':    "#aee5be",
            \  'bg_added_fringe':    "#6cc06c",
            \  'fg_added':           "#005000",
            \  'fg_added_intense':   "#006700",
            \
            \  'bg_changed':         "#ffdfa9",
            \  'bg_changed_faint':   "#ffefbf",
            \  'bg_changed_refine':  "#fac090",
            \  'bg_changed_fringe':  "#d7c20a",
            \  'fg_changed':         "#553d00",
            \  'fg_changed_intense': "#655000",
            \
            \  'bg_removed':         "#ffd8d5",
            \  'bg_removed_faint':   "#ffe9e9",
            \  'bg_removed_refine':  "#f3b5af",
            \  'bg_removed_fringe':  "#d84a4f",
            \  'fg_removed':         "#8f1313",
            \  'fg_removed_intense': "#aa2222",
            \
            \  'bg_diff_context':    "#f3f3f3",
            \
            "\ Paren Match
            \  'bg_paren_match':     "#5fcfff",
            \  'bg_paren_expression':"#efd3f5"
            \ }

function! s:highlight(group, fg='NONE', bg='NONE', style='NONE') abort
    let l:cmd = 'highlight '   .. a:group
                \ .. ' guifg=' .. a:fg
                \ .. ' guibg=' .. a:bg
                \ .. ' gui='   .. a:style
                \ .. ' cterm=' .. a:style
    execute l:cmd
endfunction

if s:enable_modus_operandi_theme

    highlight clear

    highlight! link helpVim                   Title
    highlight! link helpHeader                Title
    highlight! link helpHyperTextJump         Underlined
    highlight! link fugitiveSymbolicRef       PreProc
    highlight! link fugitiveHeading           Statement
    highlight! link fugitiveStagedHeading     Statement
    highlight! link fugitiveUnstagedHeading   Statement
    highlight! link fugitiveUntrackedHeading  Statement
    highlight! link fugitiveStagedModifier    PreProc
    highlight! link fugitiveUnstagedModifier  PreProc
    highlight! link fugitiveHash              Constant
    highlight! link diffFile                  PreProc
    highlight! link markdownHeadingDelimiter  Special
    highlight! link rstSectionDelimiter       Statement
    highlight! link rstDirective              PreProc
    highlight! link rstHyperlinkReference     Special
    highlight! link rstFieldName              Constant
    highlight! link rstDelimiter              Special
    highlight! link rstInterpretedText        Special
    highlight! link rstCodeBlock              Normal
    highlight! link rstLiteralBlock           rstCodeBlock
    highlight! link markdownUrl               String
    highlight! link colortemplateKey          Statement
    highlight! link xmlTagName                Statement
    highlight! link javaScriptFunction        Statement
    highlight! link javaScriptIdentifier      Statement
    highlight! link sqlKeyword                Statement
    highlight! link yamlBlockMappingKey       Statement
    highlight! link rubyMacro                 Statement
    highlight! link rubyDefine                Statement
    highlight! link vimGroup                  Normal
    highlight! link vimVar                    Normal
    highlight! link vimOper                   Normal
    highlight! link vimSep                    Normal
    highlight! link vimParenSep               Normal
    highlight! link vimOption                 Normal
    highlight! link vimCommentString          Comment
    highlight! link pythonInclude             Statement
    highlight! link elixirOperator            Statement
    highlight! link elixirKeyword             Statement
    highlight! link elixirBlockDefinition     Statement
    highlight! link elixirDefine              Statement
    highlight! link elixirPrivateDefine       Statement
    highlight! link elixirGuard               Statement
    highlight! link elixirPrivateGuard        Statement
    highlight! link elixirModuleDefine        Statement
    highlight! link elixirProtocolDefine      Statement
    highlight! link elixirImplDefine          Statement
    highlight! link elixirRecordDefine        Statement
    highlight! link elixirPrivateRecordDefine Statement
    highlight! link elixirMacroDefine         Statement
    highlight! link elixirPrivateMacroDefine  Statement
    highlight! link elixirDelegateDefine      Statement
    highlight! link elixirOverridableDefine   Statement
    highlight! link elixirExceptionDefine     Statement
    highlight! link elixirCallbackDefine      Statement
    highlight! link elixirStructDefine        Statement
    highlight! link elixirExUnitMacro         Statement
    highlight! link elixirInclude             Statement
    highlight! link elixirVariable            Special
    highlight! link elixirAtom                Constant
    highlight! link elixirDocTest             String
    highlight! link shQuote                   Constant
    highlight! link shNoQuote                 Normal
    highlight! link shTestOpr                 Normal
    highlight! link shOperator                Normal
    highlight! link shSetOption               Normal
    highlight! link shOption                  Normal
    highlight! link shCommandSub              Normal
    highlight! link shDerefPattern            shQuote
    highlight! link shDerefOp                 Special
    highlight! link phpStorageClass           Statement
    highlight! link phpStructure              Statement
    highlight! link phpInclude                Statement
    highlight! link phpDefine                 Statement
    highlight! link phpSpecialFunction        Normal
    highlight! link phpParent                 Normal
    highlight! link phpComparison             Normal
    highlight! link phpOperator               Normal
    highlight! link phpVarSelector            Special
    highlight! link phpMemberSelector         Special
    highlight! link phpDocCustomTags          phpDocTags
    highlight! link javaExternal              Statement
    highlight! link javaType                  Statement
    highlight! link javaScopeDecl             Statement
    highlight! link javaClassDecl             Statement
    highlight! link javaStorageClass          Statement
    highlight! link javaDocParam              PreProc
    highlight! link csStorage                 Statement
    highlight! link csAccessModifier          Statement
    highlight! link csClass                   Statement
    highlight! link csModifier                Statement
    highlight! link csAsyncModifier           Statement
    highlight! link csLogicSymbols            Normal
    highlight! link csClassType               Normal
    highlight! link csType                    Statement
    highlight! link Terminal                  Normal
    highlight! link StatuslineTerm            Statusline
    highlight! link StatuslineTermNC          StatuslineNC
    highlight! link LineNrAbove               LineNr
    highlight! link LineNrBelow               LineNr
    highlight! link MessageWindow             PMenu
    highlight! link PopupNotification         Todo

    if (has('termguicolors') && &termguicolors) || has('gui_running')
        let g:terminal_ansi_colors = [
                    \   s:palette.fg_main,
                    \   s:palette.red,
                    \   s:palette.green,
                    \   s:palette.yellow,
                    \   s:palette.blue,
                    \   s:palette.magenta,
                    \   s:palette.cyan,
                    \   s:palette.bg_dim,
                    \
                    \   s:palette.fg_dim,
                    \   s:palette.red_warmer,
                    \   s:palette.green_warmer,
                    \   s:palette.yellow_warmer,
                    \   s:palette.blue_warmer,
                    \   s:palette.magenta_warmer,
                    \   s:palette.cyan_warmer,
                    \   s:palette.bg_main
                    \ ]
    endif

    " highlights
    call s:highlight('Normal',           s:palette.fg_main,      s:palette.bg_main)
    call s:highlight('Folded',           s:palette.fg_dim,       s:palette.bg_dim)
    call s:highlight('LineNr',           s:palette.fg_alt,       s:palette.bg_dim)
    call s:highlight('CursorLineNr',     s:palette.fg_main,      s:palette.bg_hl_line,   'bold')
    call s:highlight('SignColumn',       s:palette.bg_main,      s:palette.bg_inactive)
    call s:highlight('CursorLine',       'NONE',                 s:palette.bg_hl_line)
    call s:highlight('NonText',          s:palette.fg_alt)
    call s:highlight('NormalNC',         s:palette.fg_dim,       s:palette.bg_main)
    call s:highlight('ErrorMsg',         s:palette.fg_main,      s:palette.bg_red_intense)
    call s:highlight('Conceal',          s:palette.fg_main,      s:palette.bg_dim)
    call s:highlight('Cursor',           s:palette.fg_main,      s:palette.bg_main,     'inverse')
    call s:highlight('lCursor',          s:palette.fg_main,      s:palette.bg_main,     'inverse')
    call s:highlight('CursorIM',         s:palette.fg_main,      s:palette.bg_main,     'inverse')
    call s:highlight('ColorColumn',      s:palette.fg_main,      s:palette.bg_active)
    call s:highlight('FoldColumn',       s:palette.fg_main,      s:palette.bg_active)
    call s:highlight('Search',           s:palette.fg_main,      s:palette.bg_green_intense)
    call s:highlight('IncSearch',        s:palette.fg_main,      s:palette.bg_green_intense)
    call s:highlight('Substitute',       s:palette.fg_main,      s:palette.bg_green_intense)
    call s:highlight('QuickFixLine',     s:palette.fg_main,      s:palette.bg_main,     'inverse')
    call s:highlight('Menu',             s:palette.fg_main,      s:palette.bg_active)
    call s:highlight('Pmenu',            s:palette.fg_main,      s:palette.bg_inactive)
    call s:highlight('PmenuSel',         s:palette.fg_alt,       s:palette.bg_active,   'bold')
    call s:highlight('PmenuSbar',        s:palette.fg_main,      s:palette.bg_inactive)
    call s:highlight('PmenuThumb',       s:palette.fg_alt,       s:palette.bg_main,     'inverse')
    call s:highlight('Scrollbar',        s:palette.bg_dim,       s:palette.bg_inactive)
    call s:highlight('Directory',        s:palette.blue)
    call s:highlight('Title',            s:palette.fg_main,      'NONE',                'bold')
    call s:highlight('Visual',           s:palette.fg_main,      s:palette.bg_cyan_intense)
    call s:highlight('Whitespace',       s:palette.fg_alt)
    call s:highlight('MatchParen',       s:palette.fg_main,      s:palette.bg_paren_match)
    call s:highlight('TabLineSel',       s:palette.blue,         s:palette.bg_main,     'bold,inverse')
    call s:highlight('TabLine',          s:palette.fg_main,      s:palette.bg_lavender, 'NONE')
    call s:highlight('TabLineFill',      s:palette.fg_main,      s:palette.bg_main,     'NONE')
    call s:highlight('StatusLine',       s:palette.fg_main,      s:palette.bg_active)
    call s:highlight('StatusLineNC',     s:palette.fg_dim,       s:palette.bg_inactive)
    call s:highlight('VertSplit',        s:palette.fg_main,      s:palette.bg_main)
    call s:highlight('WarningMsg',       s:palette.yellow)

    call s:highlight('DiffAdd',          s:palette.fg_added,     s:palette.bg_added)
    call s:highlight('DiffChange',       s:palette.fg_changed,   s:palette.bg_changed)
    call s:highlight('DiffDelete',       s:palette.fg_removed,   s:palette.bg_removed)
    call s:highlight('DiffText',         s:palette.fg_changed,   s:palette.bg_changed)

    call s:highlight('SpellBad',         s:palette.red_warmer)
    call s:highlight('SpellCap',         s:palette.red_warmer)

    call s:highlight('Comment',          s:palette.fg_alt,       'NONE',                'italic')
    call s:highlight('String',           s:palette.blue)
    call s:highlight('Boolean',          s:palette.blue,         'NONE',                'bold')
    call s:highlight('Character',        s:palette.blue)
    call s:highlight('Conditional',      s:palette.magenta_warmer)
    call s:highlight('Constant',         s:palette.blue_warmer)
    call s:highlight('Function',         s:palette.magenta)
    call s:highlight('Identifier',       s:palette.cyan)
    call s:highlight('Include',          s:palette.red_warmer)
    call s:highlight('Label',            s:palette.cyan)
    call s:highlight('Todo',             s:palette.magenta,      'NONE',                'bold')
    call s:highlight('Type',             s:palette.cyan_warmer)
    call s:highlight('Number',           s:palette.blue_faint)
    call s:highlight('Operator',         s:palette.magenta_warmer)
    call s:highlight('Float',            s:palette.blue_faint)
    call s:highlight('PreCondit',        s:palette.red)
    call s:highlight('Statement',        s:palette.magenta_warmer)
    call s:highlight('Repeat',           s:palette.magenta_warmer)
    call s:highlight('Keyword',          s:palette.magenta_warmer)
    call s:highlight('Exception',        s:palette.magenta_warmer)
    call s:highlight('PreProc',          s:palette.red)
    call s:highlight('Define',           s:palette.red)
    call s:highlight('Macro',            s:palette.red)
    call s:highlight('StorageClass',     s:palette.magenta_warmer)
    call s:highlight('Structure',        s:palette.magenta_warmer)
    call s:highlight('Typedef',          s:palette.cyan_warmer)
    call s:highlight('Tag',              s:palette.magenta)
    call s:highlight('Delimiter',        s:palette.fg_main)
    call s:highlight('Underlined',       s:palette.fg_main,      'NONE',                'underline')
    call s:highlight('Error',            s:palette.fg_main,      s:palette.bg_red_intense)

    call s:highlight('vimBracket',       s:palette.fg_main)
    call s:highlight('vimCommentString', s:palette.fg_alt,       'NONE',                'italic')
    call s:highlight('vimCommentTitle',  s:palette.red)
    call s:highlight('vimFuncSID',       s:palette.fg_main)
    call s:highlight('vimFuncVar',       s:palette.blue_warmer)
    call s:highlight('vimIsCommand',     s:palette.fg_main)
    call s:highlight('vimLet',           s:palette.magenta_warmer)
    call s:highlight('vimMapLhs',        s:palette.fg_main)
    call s:highlight('vimMapModKey',     s:palette.fg_main)
    call s:highlight('vimNotation',      s:palette.fg_main)
    call s:highlight('vimcommand',       s:palette.magenta_warmer)
    call s:highlight('vimmap',           s:palette.magenta_warmer)
    call s:highlight('vimnotfunc',       s:palette.magenta_warmer)
    call s:highlight('vimvar',           s:palette.cyan)

endif

" }}}

" keymaps {{{

" leaders
let g:mapleader      = " "
let g:maplocalleader = ","

" vimrc
nnoremap <silent> <Leader>cd <Cmd>cd     %:p:h<CR><Cmd>pwd<CR>
nnoremap <silent> <Leader>ev <Cmd>edit   $MYVIMRC<CR>
nnoremap <silent> <Leader>sv <Cmd>source $MYVIMRC<CR>

" disable arrow keys
noremap <Up>    <Nop>
noremap <Down>  <Nop>
noremap <Left>  <Nop>
noremap <Right> <Nop>

inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" swap j/k <-> gj/gk
nnoremap <expr> j (v:count ? 'j' : 'gj')
nnoremap <expr> k (v:count ? 'k' : 'gk')
xnoremap <expr> j (v:count ? 'j' : 'gj')
xnoremap <expr> k (v:count ? 'k' : 'gk')

" use tab to select from popup menu
inoremap <expr> <Tab>   (pumvisible() ? '<C-N>' : '<Tab>')
inoremap <expr> <S-Tab> (pumvisible() ? '<C-P>' : '<C-H>')

" use tab to toggle folds
nnoremap <Tab> za

" stolen from neovim defaults
nnoremap Y     yg_
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap *     y/\V<C-R>"<CR>
xnoremap #     y?\V<C-R>"<CR>
nnoremap &     <Cmd>&&<CR>

" copy to clipboard
if has('clipboard')
    nnoremap <silent> <Leader>y  "+y
    xnoremap <silent> <Leader>y  "+y
    nnoremap <silent> <Leader>Y  "+yg_
    nnoremap <silent> <Leader>yy "+y_
elseif executable('/usr/bin/kitty')
    nnoremap <silent> <Leader>y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@
    xnoremap <silent> <Leader>y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@
    nnoremap <silent> <Leader>Y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@g_
    nnoremap <silent> <Leader>yy <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@_

    function! s:copy_to_clipboard(type, ...) abort
        if a:type ==# "char"
            silent! execute 'normal! v`[o`]""y'
        elseif a:type ==# "line"
            silent! execute 'normal! `[V`]""y'
        elseif a:type ==# "v" || a:type ==# "V" || a:type ==# "\<C-V>" || a:type ==# "block"
            silent! execute 'normal! gv""y'
        elseif a:type =~ '^\d\+$'
            silent! execute 'normal! ^v' .. a:type .. '$h""y'
            if mode() ==# 'v'
                normal! v
            endif
        endif

        silent! call system('kitty +kitten clipboard', getreg('"'))
    endfunction
endif

" paste from clipboard
if has('clipboard')
    nnoremap <silent> <Leader>p "+p
    nnoremap <silent> <Leader>P "+P
    xnoremap <silent> <Leader>p "+p
    xnoremap <silent> <Leader>P "+P
elseif executable('/usr/bin/kitty')
    nnoremap <silent> <Leader>p <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""p
    nnoremap <silent> <Leader>P <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""P
    xnoremap <silent> <Leader>p <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""p
    xnoremap <silent> <Leader>P <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""P
endif

" force saving files that otherwise require sudoedit
command! Wsudo execute "silent! write !sudo tee % >/dev/null" <Bar> edit!
nnoremap <Leader>W <Cmd>Wsudo<CR>

" terminal
tnoremap <Esc> <C-\><C-N>
nnoremap <C-`> <Cmd>belowright terminal<CR>

" diff mode
if &diff
    " layout = "(LOCAL,BASE,REMOTE)/MERGED"
    nnoremap <LocalLeader>g1 <Cmd>diffget LO<CR>
    nnoremap <LocalLeader>g2 <Cmd>diffget BA<CR>
    nnoremap <LocalLeader>g3 <Cmd>diffget RE<CR>
endif

" }}}

" autos {{{

augroup save_folds | autocmd!
    autocmd BufWinLeave,BufLeave,BufWritePost ?* ++nested silent! mkview!
    autocmd BufWinEnter ?* silent! loadview
augroup END

augroup set_list | autocmd!
    autocmd InsertEnter,InsertLeave * set list!
augroup END

augroup no_number_for_old_term | autocmd!
    autocmd TerminalWinOpen * setlocal nonumber norelativenumber
augroup END

augroup no_trailing_whitespaces | autocmd!
    autocmd BufWritePre * :%s/\s\+$//e
augroup END

augroup auto_format | autocmd!
    if executable('clang-format')
        autocmd FileType c,cpp,objc setlocal equalprg=clang-format
    endif
augroup END

" }}}

" status line {{{

function! s:set_highlights() abort
    call s:highlight_git_branch_status()

    call s:highlight('StatusBlank',      s:palette.fg_main, s:palette.bg_blue_nuanced, 'NONE')
    call s:highlight('StatusFileName',   s:palette.fg_main, s:palette.bg_blue_nuanced, 'bold')
    call s:highlight('StatusFileState',  s:palette.maroon,  s:palette.bg_blue_nuanced, 'bold')
    call s:highlight('StatusFileSize',   s:palette.fg_main, s:palette.bg_blue_nuanced, 'NONE')
    call s:highlight('StatusFileFormat', s:palette.fg_main, s:palette.bg_lavender,     'NONE')
    call s:highlight('StatusFileEncode', s:palette.fg_main, s:palette.bg_lavender,     'NONE')
    call s:highlight('StatusPercent',    s:palette.fg_main, s:palette.bg_blue_nuanced, 'NONE')
    call s:highlight('StatusWinNR',      s:palette.fg_main, s:palette.bg_sage,         'NONE')
endfunction

function! s:get_vim_mode() abort
    " :help mode()
    const l:modes = {
                \ 'n'    : { 'abbrev': 'N',  'alias': 'NORMAL',    'color' : s:palette.blue    },
                \ 'no'   : { 'abbrev': 'O',  'alias': 'O·PENDING', 'color' : s:palette.yellow  },
                \ 'nov'  : { 'abbrev': 'O',  'alias': 'O·PENDING', 'color' : s:palette.yellow  },
                \ 'noV'  : { 'abbrev': 'O',  'alias': 'O·PENDING', 'color' : s:palette.yellow  },
                \ 'no' : { 'abbrev': 'O',  'alias': 'O·PENDING', 'color' : s:palette.yellow  },
                \ 'niI'  : { 'abbrev': 'N',  'alias': 'NORMAL',    'color' : s:palette.blue    },
                \ 'niR'  : { 'abbrev': 'N',  'alias': 'NORMAL',    'color' : s:palette.blue    },
                \ 'niV'  : { 'abbrev': 'N',  'alias': 'NORMAL',    'color' : s:palette.blue    },
                \ 'nt'   : { 'abbrev': 'T',  'alias': 'TERM',      'color' : s:palette.fg_main },
                \ 'v'    : { 'abbrev': 'V',  'alias': 'VISUAL',    'color' : s:palette.cyan    },
                \ 'vs'   : { 'abbrev': 'V',  'alias': 'VISUAL',    'color' : s:palette.cyan    },
                \ 'V'    : { 'abbrev': 'Vl', 'alias': 'V·LINE',    'color' : s:palette.cyan    },
                \ 'Vs'   : { 'abbrev': 'Vl', 'alias': 'V·LINE',    'color' : s:palette.cyan    },
                \ ''   : { 'abbrev': 'Vb', 'alias': 'V·BLOCK',   'color' : s:palette.cyan    },
                \ 's'  : { 'abbrev': 'Vb', 'alias': 'V·BLOCK',   'color' : s:palette.cyan    },
                \ 's'    : { 'abbrev': 'S',  'alias': 'SELECT',    'color' : s:palette.blue    },
                \ 'S'    : { 'abbrev': 'Sl', 'alias': 'S·LINE',    'color' : s:palette.blue    },
                \ ''   : { 'abbrev': 'Sb', 'alias': 'S·BLOCK',   'color' : s:palette.blue    },
                \ 'i'    : { 'abbrev': 'I',  'alias': 'INSERT',    'color' : s:palette.rust    },
                \ 'ic'   : { 'abbrev': 'I',  'alias': 'INSERT',    'color' : s:palette.rust    },
                \ 'ix'   : { 'abbrev': 'I',  'alias': 'INSERT',    'color' : s:palette.rust    },
                \ 'R'    : { 'abbrev': 'R',  'alias': 'REPLACE',   'color' : s:palette.red     },
                \ 'Rc'   : { 'abbrev': 'R',  'alias': 'REPLACE',   'color' : s:palette.red     },
                \ 'Rx'   : { 'abbrev': 'R',  'alias': 'REPLACE',   'color' : s:palette.red     },
                \ 'Rv'   : { 'abbrev': 'Vr', 'alias': 'V·REPLACE', 'color' : s:palette.red     },
                \ 'Rvc'  : { 'abbrev': 'Vr', 'alias': 'V·REPLACE', 'color' : s:palette.red     },
                \ 'Rvx'  : { 'abbrev': 'Vr', 'alias': 'V·REPLACE', 'color' : s:palette.red     },
                \ 'c'    : { 'abbrev': 'C',  'alias': 'COMMAND',   'color' : s:palette.green   },
                \ 'cv'   : { 'abbrev': 'C',  'alias': 'EX',        'color' : s:palette.green   },
                \ 'ce'   : { 'abbrev': 'C',  'alias': 'EX',        'color' : s:palette.green   },
                \ 'r'    : { 'abbrev': 'R',  'alias': 'REPLACE',   'color' : s:palette.red     },
                \ 'rm'   : { 'abbrev': 'Rm', 'alias': 'MORE',      'color' : s:palette.yellow  },
                \ 'r?'   : { 'abbrev': 'R?', 'alias': 'CONFIRM',   'color' : s:palette.yellow  },
                \ '!'    : { 'abbrev': 'Sh', 'alias': 'SHELL',     'color' : s:palette.fg_main },
                \ 't'    : { 'abbrev': 'T',  'alias': 'TERM',      'color' : s:palette.fg_main }
                \ }

    let l:mode = mode()
    call s:highlight('StatusVimMode', l:modes[l:mode].color, s:palette.bg_main, 'bold,inverse')
    return l:modes[l:mode].abbrev
endfunction

function! s:highlight_git_branch_status() abort
    let l:git_icon = ''
    let l:git_dir = expand('%:p:h:S')
    let l:git_cmd = 'git -C ' .. git_dir .. ' status --branch --porcelain=2'
    silent! let l:git_cmd_result = system(l:git_cmd)->split('\n')

    " Line                                     Notes
    " ------------------------------------------------------------
    " # branch.oid <commit> | (initial)        Current commit.
    " # branch.head <branch> | (detached)      Current branch.
    " # branch.upstream <upstream_branch>      If upstream is set.
    " # branch.ab +<ahead> -<behind>           If upstream is set and
    "                                          the commit is present.
    " ------------------------------------------------------------

    if v:shell_error
        call s:highlight('StatusGitBranchStatus', s:palette.fg_main, s:palette.bg_blue_nuanced, 'NONE')
        let b:git_branch_status = ''
    else
        let l:git_branch = l:git_cmd_result->copy()->filter('v:val =~ "^# branch.head"')[0]->split()[2]
        let l:git_status = l:git_cmd_result->copy()->filter('v:val !~ "^# "')

        if l:git_status->empty()
            " clean branch
            let l:git_color = s:palette.green_faint
        else
            " dirty branch
            let l:git_color = s:palette.red_faint
        end

        call s:highlight('StatusGitBranchStatus', l:git_color, s:palette.bg_blue_nuanced, 'NONE')
        let b:git_branch_status = l:git_icon .. ' ' .. l:git_branch
    end
endfunction

function! s:get_file_size() abort
    let l:file = expand('%:p')
    let l:bytes = 0

    if l:file->len()
        let l:bytes = l:file->getfsize()
    else
        " it's a buffer
        let l:bytes = wordcount().bytes
    endif

    if l:bytes == 0 || l:bytes == -1 || l:bytes == -2
        return ''
    end

    const l:_1K = 1024
    const l:_1M = 1024 * l:_1K
    const l:_1G = 1024 * l:_1M
    const l:_1T = 1024 * l:_1G
    const l:_1P = 1024 * l:_1T
    const l:_1E = 1024 * l:_1P

    if l:bytes < l:_1K
        return printf('%dB',   l:bytes)
    elseif l:bytes < l:_1M
        return printf('%.1fK', l:bytes/l:_1K)
    elseif l:bytes < l:_1G
        return printf('%.1fM', l:bytes/l:_1M)
    elseif l:bytes < l:_1T
        return printf('%.1fG', l:bytes/l:_1G)
    elseif l:bytes < l:_1P
        return printf('%.1fT', l:bytes/l:_1T)
    elseif l:bytes < l:_1E
        return printf('%.1fP', l:bytes/l:_1P)
    else " math.maxinteger = 2^63 -1
        return printf('%.1fE', l:bytes/l:_1E)
    end
endfunction

function! DrawStatusLine() abort
    if g:statusline_winid != win_getid()
        return join ([
                    \    '%#StatusFileName#',
                    \    ' ',
                    \    '%<%F',
                    \    '%=',
                    \    ' ',
                    \    '%#StatusPercent#',
                    \    '%P',
                    \    ' ',
                    \    '%#StatusWinNR#',
                    \    ' ',
                    \    '%{winnr()}',
                    \    ' '
                    \ ], '')
    else
        return join ([
                    \    '%#StatusVimMode#',
                    \    ' ',
                    \    s:get_vim_mode(),
                    \    ' ',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileName#',
                    \    '%<%F',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileState#',
                    \    '%m%r%h%w%q',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusGitBranchStatus#',
                    \    '%{b:->get("git_branch_status", "")}',
                    \    '%#StatusBlank#',
                    \    '%=',
                    \    ' ',
                    \    '%#StatusFileSize#',
                    \    s:get_file_size(),
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileFormat#',
                    \    ' ',
                    \    '%{&fileformat}',
                    \    ' | ',
                    \    '%#StatusFileEncode#',
                    \    '%{&fileencoding ? &fileencoding : &encoding}',
                    \    ' ',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusPercent#',
                    \    '%P',
                    \    ' ',
                    \    '%#StatusWinNR#',
                    \    ' ',
                    \    '%{winnr()}',
                    \    ' '
                    \ ], '')
    endif
endfunction

call s:set_highlights()
set statusline=%!DrawStatusLine()

augroup status_line | autocmd!
    autocmd WinEnter,BufEnter,BufWritePost * call s:set_highlights()
    autocmd VimResized *  redrawstatus
augroup END

" }}}

" tab line {{{

set tabline=%!DrawTabLine()
function! DrawTabLine() abort
    let l:tabline = ''
    let l:selected_tab_nr = tabpagenr()
    let l:last_tab_nr = tabpagenr('$')

    for i in range(1, l:last_tab_nr)
        " select the highlighting
        if i == selected_tab_nr
            let l:tabline ..= '%#TabLineSel#'
        else
            let l:tabline ..= '%#TabLine#'
        endif

        " set the tab page number (for mouse clicks)
        let l:tabline ..= '%' .. i .. 'T'

        " the label consists of tab # and bufname of active window
        let l:buflist = tabpagebuflist(i)
        let l:winnr = tabpagewinnr(i)
        let l:buf = l:buflist[l:winnr - 1]
        let l:bufname = bufname(l:buf)->fnamemodify(':~')->pathshorten()

        let l:tabline ..= ' ' .. i .. ':' .. l:bufname .. ' '

        " if buffer is modified
        let l:buf_modified = getbufvar(l:buf, '&modified')
        if l:buf_modified | let l:tabline ..= '[+] ' | endif

        if i != l:last_tab_nr
            let l:tabline ..= '%#TabLineFill#' .. ' '
        endif
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let l:tabline ..= '%#TabLineFill#%T'

    return l:tabline
endfunction

" }}}

" plugins {{{

let s:package = 'plugged'
let s:package_start_dir = s:vim_home .. '/pack/' .. s:package .. '/start'
let s:package_opt_dir   = s:vim_home .. '/pack/' .. s:package .. '/opt'

" paq:
" {
"    'paq_name': { 'dir': dir, 'url': url }
" }
let s:paqs = {}

" Paq management functions
function! s:paq_init() abort
    call mkdir(s:package_start_dir, 'p')
    call mkdir(s:package_opt_dir,   'p')
endfunction

function! s:paq_add(name, args = {}) abort
    let l:url = 'https://github.com/' .. a:name
    let l:as = a:args->get('as', a:name->split('/')[1])

    if a:args->get('opt', v:false)
        let l:dir = s:package_opt_dir   .. '/' .. l:as
    else
        let l:dir = s:package_start_dir .. '/' .. l:as
    endif

    let s:paqs[l:as] = { 'dir': l:dir, 'url': l:url }
endfunction

function! s:paq_update() abort
    for paq in s:paqs->items()
        let l:as  = paq[0]
        let l:dir = paq[1].dir
        let l:url = paq[1].url

        " check if it has been git cloned already
        if finddir('.git', l:dir)->empty()
            let l:git_clone_cmd = 'git clone --depth=1 ' .. l:url .. ' ' .. l:dir
            silent! let l:git_cmd_result = system(l:git_clone_cmd)->split('\n')
        else
            let l:git_pull_cmd = 'git -C ' .. l:dir .. ' ' .. 'pull --depth=1'
            silent! let l:git_cmd_result = system(l:git_pull_cmd)->split('\n')
        endif

        let l:doc_dir = l:dir .. '/doc'
        if l:doc_dir->isdirectory()
            execute "helptags " ..  l:doc_dir
        endif

        echo printf("%17s: %s", l:as, l:git_cmd_result[0])
    endfor
endfunction

function! s:paq_clean() abort
    let l:dirs = []
    for dir in [ s:package_start_dir, s:package_opt_dir ]
        let l:dirs += glob(dir .. '/*', v:true, v:true)
    endfor

    let l:idx = 0
    while l:idx < l:dirs->len()
        for dir in s:paqs->values()->map({ _, val -> val.dir })
            if l:dirs[l:idx] == dir
                let l:dirs[l:idx] = ''
                break
            endif
        endfor

        let l:idx += 1
    endwhile

    if l:dirs->filter('v:val != ""')->empty()
        redraw! | echo 'Package [' .. s:package .. '] is clean.'
    else
        let l:prompt = "WARNING:\nThe following folder(s) will be deleted.\n\n"
                    \ .. l:dirs->join("\n") .. "\n\n"
                    \ .. "Are you sure? (y/n) "
        if 'y' == input(l:prompt)->tolower()
            for dir in l:dirs
                call delete(dir, 'rf')
            endfor
        endif
    endif
endfunction

" -------
" plugins
" -------
" system plugins

" matchit
packadd! matchit

" netrw
let g:netrw_banner       = 0
let g:netrw_browse_split = 4
let g:netrw_dirhistmax   = 0
let g:netrw_keepdir      = 0
let g:netrw_list_hide    = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_liststyle    = 3
let g:netrw_winsize      = 29

nnoremap <silent> <F9> <Cmd>Lexplore<CR>

" remap cd to be global
augroup netrw_group | autocmd!
    autocmd filetype netrw
                \ nnoremap <buffer> <silent> <nowait> <LocalLeader>cd
                \ <Cmd>execute 'cd ' .. b:netrw_curdir<CR><Cmd>pwd<CR>
augroup END

" termdebug
let g:termdebug_wide = 1

" personal plugins
call s:paq_add('prabirshrestha/asyncomplete.vim',     {'as': 'asyncomplete'})
call s:paq_add('prabirshrestha/asyncomplete-lsp.vim', {'as': 'asyncomplete-lsp'})
call s:paq_add('jiangmiao/auto-pairs')
call s:paq_add('chrisbra/colorizer',                  {'as': 'colorizer'})
call s:paq_add('tpope/vim-commentary',                {'as': 'commentary'})
call s:paq_add('tpope/vim-eunuch',                    {'as': 'eunuch'})
call s:paq_add('tommcdo/vim-exchange',                {'as': 'exchange'})
call s:paq_add('tpope/vim-fugitive',                  {'as': 'fugitive'})
call s:paq_add('machakann/vim-highlightedyank',       {'as': 'highlighted-yank'})
call s:paq_add('tpope/vim-repeat',                    {'as': 'repeat'})
call s:paq_add('tpope/vim-surround',                  {'as': 'surround'})
call s:paq_add('tpope/vim-unimpaired',                {'as': 'unimpaired'})

" fzf
call s:paq_add('junegunn/fzf.vim', {'as': 'fzf'})
let g:fzf_layout = { 'down': '40%' }
let g:fzf_preview_window = []

nnoremap <Leader>ff <Cmd>Files<CR>
nnoremap <Leader>fo <Cmd>History<CR>
nnoremap <Leader>f: <Cmd>Hisotry:<CR>
nnoremap <Leader>f/ <Cmd>Hisotry/<CR>
nnoremap <Leader>fb <Cmd>Buffers<CR>
nnoremap <Leader>fh <Cmd>Helptags<CR>

" lion
call s:paq_add('tommcdo/vim-lion', {'as': 'lion'})
let g:lion_squeeze_spaces = 1

" lsp
call s:paq_add('prabirshrestha/vim-lsp', {'as': 'lsp'})
let g:lsp_diagnostics_echo_cursor = 1

augroup lsp_clangd | autocmd!
    autocmd User lsp_setup call lsp#register_server({
                \       'name': 'clangd',
                \       'cmd': { server_info->[ 'clangd' ] },
                \       'allowlist': [ 'c', 'cpp', 'objc', 'objcpp' ],
                \ })
augroup END

augroup lsp_install | autocmd!
    " call s:init_lsp_buffer only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:init_lsp_buffer()
augroup END

function! s:init_lsp_buffer() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc')
        setlocal tagfunc=lsp#tagfunc
    endif

    call s:set_lsp_keymaps()
endfunction

function! s:set_lsp_keymaps() abort
    nnoremap <buffer> gd <Plug>(lsp-definition)
    nnoremap <buffer> gr <Plug>(lsp-references)
    nnoremap <buffer> gi <Plug>(lsp-implementation)
    nnoremap <buffer> gt <Plug>(lsp-type-definition)
    nnoremap <buffer> gR <Plug>(lsp-rename)
    nnoremap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nnoremap <buffer> K  <Plug>(lsp-hover)
endfunction

" rainbow
call s:paq_add('luochen1990/rainbow')
let g:rainbow_active = 1
let g:rainbow_conf = {
            \	'guifgs':   [s:palette.blue_faint, s:palette.yellow_faint, s:palette.cyan_faint, s:palette.magenta_faint ],
            \	'ctermfgs': ['lightblue',          'lightyellow',          'lightcyan',          'lightmagenta'],
            \	'operators': '_,_'
            \ }

" sneak
call s:paq_add('justinmk/vim-sneak', {'as': 'sneak'})
let g:sneak#label = 1

noremap <Leader>s <Plug>Sneak_s
noremap <Leader>S <Plug>Sneak_S

noremap f <Plug>Sneak_f
noremap F <Plug>Sneak_F
noremap t <Plug>Sneak_t
noremap T <Plug>Sneak_T

" vinegar
call s:paq_add('tpope/vim-vinegar', {'as': 'vinegar'})
noremap - k^

" define user commands for updating/cleaning the plugins
command! PaqUpdate source $MYVIMRC | call <SID>paq_init() | call <SID>paq_update()
command! PaqClean  source $MYVIMRC | call <SID>paq_init() | call <SID>paq_clean()

nnoremap <silent> <Leader>qu <Cmd>PaqUpdate<CR>
nnoremap <silent> <Leader>qc <Cmd>PaqClean<CR>

" }}}
