" defaults
source $VIMRUNTIME/defaults.vim

" options
set number relativenumber lazyredraw showmatch hidden hlsearch
set smartindent expandtab tabstop=8 shiftwidth=4 softtabstop=0
set smartcase ignorecase shortmess+=I title mouse=a laststatus=2
set noshowmode listchars=trail:·,tab:»·
set cursorline termguicolors path+=**
set viewoptions=folds,cursor
set sessionoptions=folds
set viminfo+=n~/.vim/cache/viminfo

highlight CursorLine   cterm=NONE ctermbg=NONE ctermfg=NONE
highlight CursorLineNr cterm=NONE ctermbg=NONE ctermfg=NONE

" key mappings

" leaders
let g:mapleader      = " "
let g:maplocalleader = ","

" vimrc
nnoremap <silent> <Leader>cd :cd     %:p:h<CR>:pwd<CR>
nnoremap <silent> <Leader>ev :edit   $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>

" minpac
nnoremap <silent> <Leader>pu :PackUpdate<CR>
nnoremap <silent> <Leader>pc :PackClean<CR>
nnoremap <silent> <Leader>ps :PackStatus<CR>

" disable arrow keys in normal mode
map <Up>    <Nop>
map <Down>  <Nop>
map <Left>  <Nop>
map <Right> <Nop>

" disable arrow keys in insert mode
imap <Up>    <Nop>
imap <Down>  <Nop>
imap <Left>  <Nop>
imap <Right> <Nop>

" swap j/k <-> gj/gk
nnoremap <expr> j (v:count? 'j' : 'gj')
nnoremap <expr> k (v:count? 'k' : 'gk')
vnoremap <expr> j (v:count? 'j' : 'gj')
vnoremap <expr> k (v:count? 'k' : 'gk')

" copy to clipboard
nnoremap Y yg_

if has('clipboard')
    vnoremap <Leader>y  "+y
    nnoremap <Leader>y  "+y
    nnoremap <Leader>Y  "+yg_
    nnoremap <Leader>yy "+y_
elseif executable('/usr/bin/xsel')
    vnoremap <silent> <Leader>y  <Cmd>set opfunc=CopyToClipboard<CR>g@
    nnoremap <silent> <Leader>y  <Cmd>set opfunc=CopyToClipboard<CR>g@
    nnoremap <silent> <Leader>Y  <Cmd>set opfunc=CopyToClipboard<CR>g@g_
    nnoremap <silent> <Leader>yy <Cmd>set opfunc=CopyToClipboard<CR>g@_

    function! CopyToClipboard(type, ...) abort
        let reg = '"'
        let sel_save = &selection
        let &selection = "inclusive"
        let cb_save  = &clipboard
        let reg_save = getreg(reg)
        let reg_type = getregtype(reg)
        let type = a:type
        if a:type == "char"
            silent execute 'normal! v`[o`]"'.reg.'y'
            let type = 'v'
        elseif a:type == "line"
            silent execute 'normal! `[V`]"'.reg.'y'
            let type = 'V'
        elseif a:type ==# "v" || a:type ==# "V" || a:type ==# "\<C-V>" || a:type == "block"
            let &selection = sel_save
            let ve = &virtualedit
            if !(a:0 && a:1)
                set virtualedit=
            endif
            silent execute 'normal! gv"'.reg.'y'
            let &virtualedit = ve
        elseif a:type =~ '^\d\+$'
            let type = 'v'
            silent execute 'normal! ^v'.a:type.'$h"'.reg.'y'
            if mode() ==# 'v'
                normal! v
            endif
        else
            let &selection = sel_save
            let &clipboard = cb_save
        endif

        call system('/usr/bin/xsel -i -b -l /dev/null', getreg(reg))

        call setreg(reg,reg_save,reg_type)
        let &selection = sel_save
        let &clipboard = cb_save
    endfunction
endif

" paste from clipboard
if has('clipboard')
    nnoremap <Leader>p "+p
    nnoremap <Leader>P "+P
    vnoremap <Leader>p "+p
    vnoremap <Leader>P "+P
elseif executable('/usr/bin/xsel')
    nnoremap <silent> <Leader>p <Cmd>let @"=system('xsel -o -b -l /dev/null')<CR>""p
    nnoremap <silent> <Leader>P <Cmd>let @"=system('xsel -o -b -l /dev/null')<CR>""P
    vnoremap <silent> <Leader>p <Cmd>let @"=system('xsel -o -b -l /dev/null')<CR>""p
    vnoremap <silent> <Leader>P <Cmd>let @"=system('xsel -o -b -l /dev/null')<CR>""P
endif

" use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" terminal
tnoremap <Esc> <C-\><C-N>
nnoremap <silent> <Leader>tt <Cmd>belowright terminal<CR>
nnoremap <silent> <Leader>tv <Cmd>belowright vertical terminal<CR>
nnoremap <silent> <Leader>tT <Cmd>botright terminal<CR>
nnoremap <silent> <Leader>tV <Cmd>botright vertical terminal<CR>

" initialization
" set list when in insert mode
autocmd InsertEnter,InsertLeave * set list!

augroup AutoSaveFolds | autocmd!
    autocmd BufWinLeave,BufLeave,BufWritePost ?* nested silent! mkview!
    autocmd BufWinEnter ?* silent! loadview
augroup END

" plugin settings
" netrw
let g:netrw_dirhistmax   = 0
let g:netrw_liststyle    = 3
let g:netrw_banner       = 0
let g:netrw_browse_split = 4
let g:netrw_winsize      = 25
let g:netrw_list_hide    = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_keepdir      = 1

nmap <silent> <F9> :Lexplore<CR>

" remap cd to be global
augroup NetrwGroup | autocmd!
    autocmd filetype netrw call s:NetrwMapping()
augroup END

function! s:NetrwMapping()
    nmap <buffer> <silent> <nowait> <LocalLeader>cd  :execute "cd ".b:netrw_curdir<CR>:pwd<CR>
endfunction

" sneak
let g:sneak#label = 1

map <Leader>s <Plug>Sneak_s
map <Leader>S <Plug>Sneak_S

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

" lightline
let g:lightline = {
            \   'colorscheme': 'solarized',
            \   'active': {
            \     'left': [ [ 'mode', 'paste' ],
            \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
            \   },
            \   'component_function': {
            \     'gitbranch': 'FugitiveHead'
            \   },
            \ }

" ctrlp
nnoremap <Leader>. :CtrlP .<CR>
nnoremap <Leader>` :CtrlP /<CR>
nnoremap <Leader>~ :CtrlP $HOME<CR>
nnoremap <Leader>% :CtrlP %:p:h<CR>

nnoremap <Leader>? :CtrlPMRU<CR>
" nnoremap <Leader>: :History:<CR>
" nnoremap <Leader>/ :History/<CR>

nnoremap <Leader>b :CtrlPBuffer<CR>
" nnoremap <Leader>h :Helptags<CR>
" nnoremap <Leader>m :Maps<CR>
" nnoremap <Leader>t :Tags<CR>

" lion
let g:lion_squeeze_spaces = 1

" vinegar
noremap - k^

" lsp
let g:lsp_diagnostics_echo_cursor = 1

augroup lsp_clangd | autocmd!
    autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                \ })
augroup END

function! s:on_lsp_buffer_enabled() abort
    let b:vcm_tab_complete = "omni"
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

    call s:lsp_mappings()
endfunction

augroup lsp_install | autocmd!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

function! s:lsp_mappings()
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)

    " refer to doc to add more commands
endfunction

" termdebug
let g:termdebug_wide = 1

" minpac plugins
if exists('g:loaded_minpac')
    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})

    call minpac#add('jiangmiao/auto-pairs',          {'name': 'vim-auto-pairs'})
    call minpac#add('tpope/vim-commentary')
    call minpac#add('machakann/vim-highlightedyank', {'name': 'vim-highlighted-yank'})
    call minpac#add('tpope/vim-repeat')
    call minpac#add('tpope/vim-surround')
    call minpac#add('tpope/vim-unimpaired')
    call minpac#add('justinmk/vim-sneak')
    call minpac#add('tommcdo/vim-exchange')
    call minpac#add('tommcdo/vim-lion')

    call minpac#add('tpope/vim-fugitive')
    call minpac#add('tpope/vim-eunuch')
    call minpac#add('tpope/vim-vinegar')
    call minpac#add('mattn/emmet-vim',  {'name': 'vim-emmet'})
    call minpac#add('ctrlpvim/ctrlp.vim', {'name': 'vim-ctrlp'})

    call minpac#add('chrisbra/colorizer',    {'name': 'vim-colorizer'})
    call minpac#add('itchyny/lightline.vim', {'name': 'vim-lightline'})

    call minpac#add('ackyshake/VimCompletesMe', {'name': 'vim-vcm'})

    call minpac#add('prabirshrestha/vim-lsp')
    call minpac#add('mattn/vim-lsp-settings')

    call minpac#add('prabirshrestha/asyncomplete.vim',     {'name': 'vim-asyncomplete'})
    call minpac#add('prabirshrestha/asyncomplete-lsp.vim', {'name': 'vim-asyncomplete-lsp'})
endif

" Define user commands for updating/cleaning the plugins.
" Each of them loads minpac, reloads .vimrc to register the
" information of plugins, then performs the task.
command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
command! PackStatus packadd minpac | source $MYVIMRC | call minpac#status()
