" let the fun begin

" commons {{{

const s:vim_home = expand('<sfile>:p:h')

function! s:highlight(group, fg='NONE', bg='NONE', style='NONE') abort
    execute 'highlight '         .. a:group
                \ .. ' ctermfg=' .. a:fg
                \ .. ' ctermbg=' .. a:bg
                \ .. ' cterm='   .. a:style
                \ .. ' guifg='   .. a:fg
                \ .. ' guibg='   .. a:bg
                \ .. ' gui='     .. a:style
endfunction

" }}}

" options {{{

" --------
" defaults
" --------
source $VIMRUNTIME/defaults.vim

" ---------
" work dirs
" ---------
call mkdir(s:vim_home .. '/backup', 'p', 0o700)
call mkdir(s:vim_home .. '/cache',  'p', 0o700)
call mkdir(s:vim_home .. '/swap',   'p', 0o700)
call mkdir(s:vim_home .. '/undo',   'p', 0o700)
call mkdir(s:vim_home .. '/view',   'p', 0o700)

" -------
" options
" -------
set autoindent
set autoread
let &backupdir=s:vim_home .. '/backup'
set background=light
set complete-=i
set completeopt=menu,menuone,noinsert,noselect
set cursorline
let &directory=s:vim_home .. '/swap'
set encoding=utf-8
set expandtab
set fileformats=unix,dos,mac
set foldmethod=marker
set formatoptions=tcqj
set hidden
set history=1000
set hlsearch
set ignorecase
set laststatus=2
set lazyredraw
set listchars=trail:·,tab:»·
set mouse=a
set mousemodel=popup_setpos
set nolist
set noshowmode
set notitle
set number
set path=.,,**
set pumheight=7
set relativenumber
set scrolloff=1
set sessionoptions-=options
set shiftround
set shiftwidth=4
set shortmess+=Ic
set showmatch
set sidescroll=1
set sidescrolloff=2
set smartcase
set smartindent
set smarttab
set softtabstop=0
set splitbelow
set splitright
set switchbuf=uselast
set tabstop=8
set termencoding=utf-8
set termguicolors
set timeoutlen=777
set ttimeoutlen=77
let &undodir=s:vim_home .. '/undo'
set undofile
let &viewdir=s:vim_home .. '/view'
set viewoptions=cursor,folds
set viminfo=%,<800,'10,/50,:100,h,f0
let &viminfofile=s:vim_home .. '/cache/viminfo'
set virtualedit=block
set wildoptions=pum,tagfile

" }}}

" color scheme {{{

colorscheme lunaperche

if (has('termguicolors') && &termguicolors) || has('gui_running')
    " consistent with terminal's color scheme
    let g:terminal_ansi_colors = [
                \   '#000000',
                \   '#a60000',
                \   '#006800',
                \   '#6f5500',
                \   '#0031a9',
                \   '#721045',
                \   '#00538b',
                \   '#e1e1e1',
                \
                \   '#585858',
                \   '#972500',
                \   '#316500',
                \   '#884900',
                \   '#354fcf',
                \   '#531ab6',
                \   '#005a5f',
                \   '#ffffff'
                \ ]
endif
" }}}

" keymaps {{{

" leaders
let g:mapleader      = " "
let g:maplocalleader = ","

" vimrc
nnoremap <silent> <Leader>cd <Cmd>cd     %:p:h<CR><Cmd>pwd<CR>
nnoremap <silent> <Leader>ev <Cmd>edit   $MYVIMRC<CR>
nnoremap <silent> <Leader>sv <Cmd>source $MYVIMRC<CR>

" disable arrow keys
noremap <Up>    <Nop>
noremap <Down>  <Nop>
noremap <Left>  <Nop>
noremap <Right> <Nop>

inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

" swap j/k <-> gj/gk
nnoremap <expr> j (v:count ? 'j' : 'gj')
nnoremap <expr> k (v:count ? 'k' : 'gk')
xnoremap <expr> j (v:count ? 'j' : 'gj')
xnoremap <expr> k (v:count ? 'k' : 'gk')

" unimpaired
nnoremap <silent> [<Space> O<Esc>j
nnoremap <silent> ]<Space> o<Esc>k

nnoremap <silent> [a <Cmd>previous<CR>
nnoremap <silent> ]a <Cmd>next<CR>
nnoremap <silent> [A <Cmd>first<CR>
nnoremap <silent> ]A <Cmd>last<CR>

nnoremap <silent> [b <Cmd>bprevious<CR>
nnoremap <silent> ]b <Cmd>bnext<CR>
nnoremap <silent> [B <Cmd>bfirst<CR>
nnoremap <silent> ]B <Cmd>blast<CR>

nnoremap <silent> [q <Cmd>cprevious<CR>
nnoremap <silent> ]q <Cmd>cnext<CR>
nnoremap <silent> [Q <Cmd>cfirst<CR>
nnoremap <silent> ]Q <Cmd>clast<CR>

" open/close quickfix window
nnoremap <silent> <Leader>qo <Cmd>copen<CR>
nnoremap <silent> <Leader>qc <Cmd>cclose<CR>

" use quickfix to show buffers
nnoremap <silent> <Leader>fb <Cmd>silent! call setqflist([], ' ',
            \ {
            \   'items': range(1, bufnr('$'))
            \            ->filter('buflisted(v:val)')
            \            ->map({ -> { 'bufnr': v:val }}),
            \   'quickfixtextfunc': '<SID>QfFormat'
            \ })<Bar>copen<CR>

" use quickfix to show oldfiles
nnoremap <silent> <Leader>fo <Cmd>silent! call setqflist([], ' ',
            \ {
            \   'lines': v:oldfiles, 'efm': '%f',
            \   'quickfixtextfunc': '<SID>QfFormat'
            \ })<Bar>copen<CR>

function! s:QfFormat(info) abort
    let l:items = getqflist({ 'id': a:info.id, 'items': 1 }).items
    let l:list = []
    for idx in range(a:info.start_idx - 1, a:info.end_idx - 1)
        let l:bufname = bufname(items[idx].bufnr)
        if l:bufname->empty()
            call add(l:list, "[No Name]")
        else
            call add(l:list, fnamemodify(l:bufname, ':~'))
        endif
    endfor
    return l:list
endfunction

" use tab to select from popup menu
inoremap <expr> <Tab>   (pumvisible() ? '<C-N>' : '<Tab>')
inoremap <expr> <S-Tab> (pumvisible() ? '<C-P>' : '<C-H>')

" use tab to toggle folds
nnoremap <Tab> za

" stolen from neovim defaults
nnoremap Y     yg_
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap *     y/\V<C-R>"<CR>
xnoremap #     y?\V<C-R>"<CR>
nnoremap &     <Cmd>&&<CR>

" copy to clipboard
if has('clipboard')
    nnoremap <silent> <Leader>y  "+y
    xnoremap <silent> <Leader>y  "+y
    nnoremap <silent> <Leader>Y  "+yg_
    nnoremap <silent> <Leader>yy "+y_
elseif executable('/usr/bin/kitty')
    nnoremap <silent> <Leader>y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@
    xnoremap <silent> <Leader>y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@
    nnoremap <silent> <Leader>Y  <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@g_
    nnoremap <silent> <Leader>yy <Cmd>set operatorfunc=<SID>copy_to_clipboard<CR>g@_

    function! s:copy_to_clipboard(type, ...) abort
        if a:type ==# "char"
            silent! execute 'normal! v`[o`]""y'
        elseif a:type ==# "line"
            silent! execute 'normal! `[V`]""y'
        elseif a:type ==# "v" || a:type ==# "V" || a:type ==# "\<C-V>" || a:type ==# "block"
            silent! execute 'normal! gv""y'
        elseif a:type =~ '^\d\+$'
            silent! execute 'normal! ^v' .. a:type .. '$h""y'
            if mode() ==# 'v'
                normal! v
            endif
        endif

        silent! call system('kitty +kitten clipboard', getreg('"'))
    endfunction
endif

" paste from clipboard
if has('clipboard')
    nnoremap <silent> <Leader>p "+p
    nnoremap <silent> <Leader>P "+P
    xnoremap <silent> <Leader>p "+p
    xnoremap <silent> <Leader>P "+P
elseif executable('/usr/bin/kitty')
    nnoremap <silent> <Leader>p <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""p
    nnoremap <silent> <Leader>P <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""P
    xnoremap <silent> <Leader>p <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""p
    xnoremap <silent> <Leader>P <Cmd>silent! let @"=system('kitty +kitten clipboard --get-clipboard')<CR>""P
endif

" force saving files that otherwise require sudoedit
nnoremap <Leader>W <Cmd>execute 'silent! write !sudo tee % >/dev/null'<Bar>edit!<Bar>echo expand('%:p') .. ' saved!'<CR>

" terminal
tnoremap <Esc> <C-\><C-N>
nnoremap <C-`> <Cmd>belowright terminal<CR>

" diff mode
if &diff
    " layout = "(LOCAL,BASE,REMOTE)/MERGED"
    nnoremap <LocalLeader>g1 <Cmd>diffget LO<CR>
    nnoremap <LocalLeader>g2 <Cmd>diffget BA<CR>
    nnoremap <LocalLeader>g3 <Cmd>diffget RE<CR>
endif

" }}}

" autos {{{

augroup save_folds | autocmd!
    autocmd BufWinLeave,BufLeave,BufWritePost ?* ++nested silent! mkview!
    autocmd BufWinEnter ?* silent! loadview
augroup END

augroup set_list | autocmd!
    autocmd InsertEnter,InsertLeave * set list!
augroup END

augroup no_number_for_old_term | autocmd!
    autocmd TerminalWinOpen * setlocal nonumber norelativenumber
augroup END

augroup no_trailing_whitespaces | autocmd!
    autocmd BufWritePre * :%s/\s\+$//e
augroup END

augroup auto_clang_format | autocmd!
    if executable('clang-format')
        autocmd FileType c,cpp,objc setlocal equalprg=clang-format
    endif
augroup END

augroup setup_quickfix | autocmd!
    autocmd WinLeave * if &buftype == "quickfix" | cclose | endif
    autocmd Filetype qf setlocal norelativenumber statusline=%!DrawQfStatusLine()
augroup END

function! DrawQfStatusLine() abort
    return join ([
                \    '%#StatusLine#',
                \    ' ',
                \    'Q',
                \    ' ',
                \    '%#StatusFileName#',
                \    ' ',
                \    '%<%F',
                \    '%=',
                \    ' ',
                \    '%#StatusPercent#',
                \    '%l/%L',
                \    ' '
                \ ], '')
endfunction

" }}}

" status line {{{

function! s:highlight_status_line() abort
    call s:highlight_git_branch_status()

    call s:highlight('StatusBlank',      'Black',    'LightGray', 'NONE')
    call s:highlight('StatusFileName',   'Black',    'LightGray', 'bold')
    call s:highlight('StatusFileState',  'Brown',    'LightGray', 'bold')
    call s:highlight('StatusFileSize',   'Black',    'LightGray', 'NONE')
    call s:highlight('StatusFileFormat', 'Black',    'Gray',      'NONE')
    call s:highlight('StatusFileEncode', 'Black',    'Gray',      'NONE')
    call s:highlight('StatusPercent',    'Black',    'LightGray', 'NONE')
    call s:highlight('StatusWinNR',      'DarkBlue', 'Gray',      'bold')
endfunction

function! s:get_vim_mode() abort
    " :help mode()
    const l:mode_color_map = {
                \ 'N' : 'DarkBlue'    ,
                \ 'O' : 'DarkYellow'  ,
                \ 'V' : 'DarkCyan'    ,
                \ 'S' : 'DarkMagenta' ,
                \ 'I' : 'DarkGreen'   ,
                \ 'R' : 'DarkRed'     ,
                \ 'C' : 'Brown'       ,
                \ 'T' : 'Black'
                \ }

    let l:mode = mode()->toupper()

    if l:mode ==# 'N' && state() =~# '[o]'
        let l:mode = 'O'
    elseif l:mode =~# "[vV\<C-V>]"
       let l:mode = 'V'
    elseif l:mode =~# "[sS\<C-S>]"
       let l:mode = 'S'
    endif

    call s:highlight('StatusVimMode', l:mode_color_map[l:mode], 'White', 'bold,inverse')
    return l:mode
endfunction

function! s:highlight_git_branch_status() abort
    let l:git_icon = ''
    let l:git_dir = expand('%:p:h:S')
    let l:git_cmd = 'git -C ' .. git_dir .. ' status --branch --porcelain=2'
    silent! let l:git_cmd_result = system(l:git_cmd)->split('\n')

    " Line                                     Notes
    " ------------------------------------------------------------
    " # branch.oid <commit> | (initial)        Current commit.
    " # branch.head <branch> | (detached)      Current branch.
    " # branch.upstream <upstream_branch>      If upstream is set.
    " # branch.ab +<ahead> -<behind>           If upstream is set and
    "                                          the commit is present.
    " ------------------------------------------------------------

    if v:shell_error
        call s:highlight('StatusGitBranchStatus', 'Black', 'LightGray', 'NONE')
        let b:git_branch_status = ''
    else
        let l:git_branch = l:git_cmd_result->copy()->filter('v:val =~ "^# branch.head"')[0]->split()[2]
        let l:git_status = l:git_cmd_result->copy()->filter('v:val !~ "^# "')

        if l:git_status->empty()
            " clean branch
            let l:git_color = 'DarkGreen'
        else
            " dirty branch
            let l:git_color = 'DarkRed'
        end

        call s:highlight('StatusGitBranchStatus', l:git_color, 'LightGray', 'NONE')
        let b:git_branch_status = l:git_icon .. ' ' .. l:git_branch
    end
endfunction

function! s:get_file_size() abort
    let l:file = expand('%:p')
    let l:bytes = 0

    if l:file->len()
        let l:bytes = l:file->getfsize()
    else
        " it's a buffer
        let l:bytes = wordcount().bytes
    endif

    if l:bytes == 0 || l:bytes == -1 || l:bytes == -2
        return ''
    end

    const l:_1K = 1024
    const l:_1M = 1024 * l:_1K
    const l:_1G = 1024 * l:_1M
    const l:_1T = 1024 * l:_1G
    const l:_1P = 1024 * l:_1T
    const l:_1E = 1024 * l:_1P

    if l:bytes < l:_1K
        return printf('%dB',   l:bytes)
    elseif l:bytes < l:_1M
        return printf('%.1fK', l:bytes/l:_1K)
    elseif l:bytes < l:_1G
        return printf('%.1fM', l:bytes/l:_1M)
    elseif l:bytes < l:_1T
        return printf('%.1fG', l:bytes/l:_1G)
    elseif l:bytes < l:_1P
        return printf('%.1fT', l:bytes/l:_1T)
    elseif l:bytes < l:_1E
        return printf('%.1fP', l:bytes/l:_1P)
    else " math.maxinteger = 2^63 -1
        return printf('%.1fE', l:bytes/l:_1E)
    end
endfunction

function! DrawStatusLine() abort
    if g:statusline_winid != win_getid()
        return join ([
                    \    '%#StatusWinNR#',
                    \    ' ',
                    \    '%{winnr()}',
                    \    ' ',
                    \    '%#StatusFileName#',
                    \    ' ',
                    \    '%<%F',
                    \    '%=',
                    \    ' ',
                    \    '%#StatusPercent#',
                    \    '%P',
                    \    ' '
                    \ ], '')
    else
        return join ([
                    \    '%#StatusVimMode#',
                    \    ' ',
                    \    s:get_vim_mode(),
                    \    ' ',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileName#',
                    \    '%<%F',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileState#',
                    \    '%m%r%h%w%q',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusGitBranchStatus#',
                    \    '%{b:->get("git_branch_status", "")}',
                    \    '%#StatusBlank#',
                    \    '%=',
                    \    ' ',
                    \    '%#StatusFileSize#',
                    \    s:get_file_size(),
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusFileFormat#',
                    \    ' ',
                    \    '%{&fileformat}',
                    \    ' | ',
                    \    '%#StatusFileEncode#',
                    \    '%{&fileencoding ?? &encoding}',
                    \    ' ',
                    \    '%#StatusBlank#',
                    \    ' ',
                    \    '%#StatusPercent#',
                    \    '%P',
                    \    ' '
                    \ ], '')
    endif
endfunction

call s:highlight_status_line()
set statusline=%!DrawStatusLine()

augroup update_status_line | autocmd!
    autocmd ModeChanged,BufEnter,BufWritePost,WinEnter * redrawstatus
augroup END

" }}}

" tab line {{{

call s:highlight('TabLine',     'Black',    'LightGray', 'NONE')
call s:highlight('TabLineFill', 'Black',    'White',     'NONE')
call s:highlight('TabLineSel',  'DarkBlue', 'White',     'bold,inverse')

set tabline=%!DrawTabLine()
function! DrawTabLine() abort
    let l:tabline = ''
    let l:selected_tab_nr = tabpagenr()
    let l:last_tab_nr = tabpagenr('$')

    for i in range(1, l:last_tab_nr)
        " select the highlighting
        if i == selected_tab_nr
            let l:tabline ..= '%#TabLineSel#'
        else
            let l:tabline ..= '%#TabLine#'
        endif

        " set the tab page number (for mouse clicks)
        let l:tabline ..= '%' .. i .. 'T'

        " the label consists of tab # and bufname of active window
        let l:buflist = tabpagebuflist(i)
        let l:winnr = tabpagewinnr(i)
        let l:buf = l:buflist[l:winnr - 1]
        let l:bufname = bufname(l:buf)->fnamemodify(':~')->pathshorten()

        let l:tabline ..= ' ' .. i .. ':' .. l:bufname .. ' '

        " if buffer is modified
        let l:buf_modified = getbufvar(l:buf, '&modified')
        if l:buf_modified | let l:tabline ..= '[+] ' | endif

        if i != l:last_tab_nr
            let l:tabline ..= '%#TabLineFill#' .. ' '
        endif
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let l:tabline ..= '%#TabLineFill#%T'

    return l:tabline
endfunction

" }}}

" plugins {{{

let s:package = 'plugged'
let s:package_start_dir = s:vim_home .. '/pack/' .. s:package .. '/start'
let s:package_opt_dir   = s:vim_home .. '/pack/' .. s:package .. '/opt'

" paq:
" {
"    'paq_name': { 'dir': dir, 'url': url }
" }
let s:paqs = {}

" Paq management functions
function! s:paq_init() abort
    call mkdir(s:package_start_dir, 'p')
    call mkdir(s:package_opt_dir,   'p')
endfunction

function! s:paq_add(name, args = {}) abort
    let l:url = 'https://github.com/' .. a:name
    let l:as = a:args->get('as', a:name->split('/')[1])

    if a:args->get('opt', v:false)
        let l:dir = s:package_opt_dir   .. '/' .. l:as
    else
        let l:dir = s:package_start_dir .. '/' .. l:as
    endif

    let s:paqs[l:as] = { 'dir': l:dir, 'url': l:url }
endfunction

function! s:paq_update() abort
    for paq in s:paqs->items()
        let l:as  = paq[0]
        let l:dir = paq[1].dir
        let l:url = paq[1].url

        " check if it has been git cloned already
        if finddir('.git', l:dir)->empty()
            let l:git_clone_cmd = 'git clone --depth=1 ' .. l:url .. ' ' .. l:dir
            silent! let l:git_cmd_result = system(l:git_clone_cmd)->split('\n')
        else
            let l:git_pull_cmd = 'git -C ' .. l:dir .. ' ' .. 'pull --depth=1'
            silent! let l:git_cmd_result = system(l:git_pull_cmd)->split('\n')
        endif

        let l:doc_dir = l:dir .. '/doc'
        if l:doc_dir->isdirectory()
            execute "helptags " ..  l:doc_dir
        endif

        echo printf("%17s: %s", l:as, l:git_cmd_result[0])
    endfor
endfunction

function! s:paq_clean() abort
    let l:dirs = []
    for dir in [ s:package_start_dir, s:package_opt_dir ]
        let l:dirs += glob(dir .. '/*', v:true, v:true)
    endfor

    let l:idx = 0
    while l:idx < l:dirs->len()
        for dir in s:paqs->values()->map({ _, val -> val.dir })
            if l:dirs[l:idx] == dir
                let l:dirs[l:idx] = ''
                break
            endif
        endfor

        let l:idx += 1
    endwhile

    if l:dirs->filter('v:val != ""')->empty()
        redraw! | echo 'Package [' .. s:package .. '] is clean.'
    else
        let l:prompt = "WARNING:\nThe following folder(s) will be deleted.\n\n"
                    \ .. l:dirs->join("\n") .. "\n\n"
                    \ .. "Are you sure? (y/n) "
        if 'y' == input(l:prompt)->tolower()
            for dir in l:dirs
                call delete(dir, 'rf')
            endfor
        endif
    endif
endfunction

" -------
" plugins
" -------
" system plugins

" matchit
packadd! matchit

" netrw
let g:netrw_banner       = 0
let g:netrw_browse_split = 4
let g:netrw_dirhistmax   = 0
let g:netrw_keepdir      = 0
let g:netrw_list_hide    = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_liststyle    = 3
let g:netrw_winsize      = 29

nnoremap <silent> <F9> <Cmd>Lexplore<CR>

" remap cd to be global
augroup netrw_group | autocmd!
    autocmd filetype netrw
                \ nnoremap <buffer> <silent> <nowait> <LocalLeader>cd
                \ <Cmd>execute 'cd ' .. b:netrw_curdir<CR><Cmd>pwd<CR>
augroup END

" termdebug
let g:termdebug_wide = 1

" personal plugins
call s:paq_add('prabirshrestha/asyncomplete.vim',     {'as': 'asyncomplete'})
call s:paq_add('prabirshrestha/asyncomplete-lsp.vim', {'as': 'asyncomplete-lsp'})
call s:paq_add('jiangmiao/auto-pairs')
call s:paq_add('chrisbra/colorizer',                  {'as': 'colorizer'})
call s:paq_add('tpope/vim-commentary',                {'as': 'commentary'})
call s:paq_add('tommcdo/vim-exchange',                {'as': 'exchange'})
call s:paq_add('tpope/vim-fugitive',                  {'as': 'fugitive'})
call s:paq_add('machakann/vim-highlightedyank',       {'as': 'highlighted-yank'})
call s:paq_add('tpope/vim-repeat',                    {'as': 'repeat'})
call s:paq_add('tpope/vim-surround',                  {'as': 'surround'})

" lion
call s:paq_add('tommcdo/vim-lion', {'as': 'lion'})
let g:lion_squeeze_spaces = 1

" lsp
call s:paq_add('prabirshrestha/vim-lsp', {'as': 'lsp'})
let g:lsp_diagnostics_echo_cursor = 1

augroup lsp_clangd | autocmd!
    autocmd User lsp_setup call lsp#register_server({
                \       'name': 'clangd',
                \       'cmd': { server_info->[ 'clangd' ] },
                \       'allowlist': [ 'c', 'cpp', 'objc', 'objcpp' ],
                \ })
augroup END

augroup lsp_install | autocmd!
    " call s:init_lsp_buffer only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:init_lsp_buffer()
augroup END

function! s:init_lsp_buffer() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc')
        setlocal tagfunc=lsp#tagfunc
    endif

    call s:set_lsp_keymaps()
endfunction

function! s:set_lsp_keymaps() abort
    nnoremap <buffer> gd <Plug>(lsp-definition)
    nnoremap <buffer> gr <Plug>(lsp-references)
    nnoremap <buffer> gi <Plug>(lsp-implementation)
    nnoremap <buffer> gt <Plug>(lsp-type-definition)
    nnoremap <buffer> gR <Plug>(lsp-rename)
    nnoremap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nnoremap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nnoremap <buffer> K  <Plug>(lsp-hover)
endfunction

" rainbow
call s:paq_add('luochen1990/rainbow')
let g:rainbow_active = 1
let g:rainbow_conf = {
            \	'guifgs':    ['DarkBlue', 'DarkYellow', 'DarkCyan', 'DarkMagenta'],
            \	'ctermfgs':  ['DarkBlue', 'DarkYellow', 'DarkCyan', 'DarkMagenta'],
            \	'operators': '_,_'
            \ }

" sneak
call s:paq_add('justinmk/vim-sneak', {'as': 'sneak'})
let g:sneak#label = 1

noremap <Leader>s <Plug>Sneak_s
noremap <Leader>S <Plug>Sneak_S

noremap f <Plug>Sneak_f
noremap F <Plug>Sneak_F
noremap t <Plug>Sneak_t
noremap T <Plug>Sneak_T

" vinegar
call s:paq_add('tpope/vim-vinegar', {'as': 'vinegar'})
noremap - k^

" update/clean plugins
nnoremap <silent> <Leader>Qu <Cmd>source $MYVIMRC<Bar>call <SID>paq_init()<Bar>call <SID>paq_update()<CR>
nnoremap <silent> <Leader>Qc <Cmd>source $MYVIMRC<Bar>call <SID>paq_init()<Bar>call <SID>paq_clean()<CR>

" }}}
