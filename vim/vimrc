" defaults
source $VIMRUNTIME/defaults.vim

" options
set number relativenumber lazyredraw showmatch hidden
set smartindent expandtab tabstop=2 shiftwidth=2 softtabstop=2
set smartcase ignorecase shortmess+=I title mouse=a laststatus=2
set noshowmode listchars=trail:·,tab:»·
set cursorline termguicolors path+=**
set viewoptions=folds,cursor
set sessionoptions=folds

" colors
if !has("gui_running")
  packadd! vim-dracula
  colorscheme dracula
  highlight SpecialKey ctermfg=60 guifg=#ffffa5
  highlight Whitespace ctermfg=60 guifg=#ffffa5
endif

" key mappings

" leaders
let g:mapleader      = " "
let g:maplocalleader = ","

" vimrc
nnoremap <silent> <Leader>cd :cd     %:p:h<CR>:pwd<CR>
nnoremap <silent> <Leader>ev :edit   $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :source $MYVIMRC<CR>

" minpac
nnoremap <silent> <Leader>pu :PackUpdate<CR>
nnoremap <silent> <Leader>pc :PackClean<CR>
nnoremap <silent> <Leader>ps :PackStatus<CR>

" disable arrow keys in normal mode
map <Up>    <Nop>
map <Down>  <Nop>
map <Left>  <Nop>
map <Right> <Nop>

" disable arrow keys in insert mode
imap <Up>    <Nop>
imap <Down>  <Nop>
imap <Left>  <Nop>
imap <Right> <Nop>

" swap j/k <-> gj/gk
nnoremap <expr> j (v:count? 'j' : 'gj')
nnoremap <expr> k (v:count? 'k' : 'gk')

" copy to clipboard
nnoremap Y          y$
vnoremap <Leader>y  "+y
nnoremap <Leader>y  "+y
nnoremap <Leader>Y  "+y$
nnoremap <Leader>yy "+yy

" paste from clipboard
nnoremap <Leader>p "+p
nnoremap <Leader>P "+P
vnoremap <Leader>p "+p
vnoremap <Leader>P "+P

" use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" terminal
" tnoremap <Esc> <C-\><C-N>
nnoremap <silent> <Leader>o :below 10sp term://$SHELL<CR>i

" initialization
" set list when in insert mode
autocmd InsertEnter,InsertLeave * set list!

augroup AutoSaveFolds | autocmd!
  autocmd BufWinLeave,BufLeave,BufWritePost ?* nested silent! mkview!
  autocmd BufWinEnter ?* silent! loadview
augroup END

" plugin settings
" netrw
let g:netrw_dirhistmax   = 0
let g:netrw_liststyle    = 3
let g:netrw_banner       = 0
let g:netrw_browse_split = 4
let g:netrw_winsize      = 25
let g:netrw_list_hide    = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_keepdir      = 1

nmap <silent> <F9> :Lexplore<CR>

" remap cd to be global
augroup NetrwGroup | autocmd!
  autocmd filetype netrw call s:NetrwMapping()
augroup END

function! s:NetrwMapping()
  nmap <buffer> <silent> <nowait> <LocalLeader>cd  :execute "cd ".b:netrw_curdir<CR>:pwd<CR>
endfunction

" quick scope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" lightline
let g:lightline = {
      \   'colorscheme': 'dracula',
      \   'active': {
      \     'left': [ [ 'mode', 'paste' ],
      \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \   },
      \   'component_function': {
      \     'gitbranch': 'FugitiveHead'
      \   },
      \ }

" nnn
let g:nnn#statusline           = 0
let g:nnn#replace_netrw        = 0
let g:nnn#set_default_mappings = 0
let g:nnn#layout               = { 'window': { 'width': 0.9, 'height': 0.6, 'highlight': 'Debug' } }

nnoremap <Leader>n :NnnPicker %:p:h<CR>

" fzf
nnoremap <Leader>. :Files .<CR>
nnoremap <Leader>` :Files /<CR>
nnoremap <Leader>~ :Files $HOME<CR>
nnoremap <Leader>% :Files %:p:h<CR>

nnoremap <Leader>? :History<CR>
nnoremap <Leader>: :History:<CR>
nnoremap <Leader>/ :History/<CR>

nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>h :Helptags<CR>
nnoremap <Leader>m :Maps<CR>
nnoremap <Leader>t :Tags<CR>

" lion
let g:lion_squeeze_spaces = 1

" easymotion
map <Leader><Leader>. <Plug>(easymotion-repeat)

" vinegar
noremap - k^

" lsp
augroup lsp_clangd | autocmd!
  autocmd User lsp_setup call lsp#register_server({
                    \ 'name': 'clangd',
                    \ 'cmd': {server_info->['clangd']},
                    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                    \ })
augroup END

function! s:on_lsp_buffer_enabled() abort
    let b:vcm_tab_complete = "omni"
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif

    call s:lsp_mappings()
endfunction

augroup lsp_install | autocmd!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

function! s:lsp_mappings()
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)

  " refer to doc to add more commands
endfunction

" ide setup
" f5            : start debugging / continue
" ctrl-f5       : run without debugging
" shift-f5      : stop debugging
" ctrl-shift-f5 : restart debugging
" f7            : step into
" f8            : step over
" shift-f8      : step out

" termdebug
let g:termdebug_wide = 1

" minpac plugins
if exists('g:loaded_minpac')
  call minpac#init()
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  call minpac#add('jiangmiao/auto-pairs',          {'name': 'vim-auto-pairs'})
  call minpac#add('tpope/vim-commentary')
  call minpac#add('machakann/vim-highlightedyank', {'name': 'vim-highlighted-yank'})
  call minpac#add('unblevable/quick-scope',        {'name': 'vim-quick-scope'})
  call minpac#add('tpope/vim-repeat')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-unimpaired')
  call minpac#add('easymotion/vim-easymotion')
  call minpac#add('tommcdo/vim-exchange')
  call minpac#add('tommcdo/vim-lion')

  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tpope/vim-eunuch')
  call minpac#add('tpope/vim-vinegar')
  call minpac#add('mattn/emmet-vim',  {'name': 'vim-emmet'})
  call minpac#add('junegunn/fzf.vim', {'name': 'vim-fzf'})
  call minpac#add('mcchrish/nnn.vim', {'name': 'vim-nnn'})

  call minpac#add('dracula/vim',           {'name': 'vim-dracula'})
  call minpac#add('sheerun/vim-polyglot')
  call minpac#add('chrisbra/colorizer',    {'name': 'vim-colorizer'})
  call minpac#add('itchyny/lightline.vim', {'name': 'vim-lightline'})

  call minpac#add('prabirshrestha/vim-lsp')
  call minpac#add('ajh17/VimCompletesMe', {'name': 'vim-vcm'})
endif

" Define user commands for updating/cleaning the plugins.
" Each of them loads minpac, reloads .vimrc to register the
" information of plugins, then performs the task.
command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update('', {'do': 'call minpac#status()'})
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()
command! PackStatus packadd minpac | source $MYVIMRC | call minpac#status()
