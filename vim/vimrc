vim9script
# let the fun begin

# requirements {{{

const required_patch_level = "9.1.1703"
if !has('patch-' .. required_patch_level)
    const msg = 'Error: Vim patch level ' .. required_patch_level .. ' or higher is required.'
    const cmd = 'printf "\033[31m' .. msg .. '\033[0m\n"'
    execute 'silent !' .. cmd
    quitall!
endif

# }}}

# commons {{{

for [xdg_env_var, default_dir] in [
        ['XDG_CACHE_HOME',  $'{$HOME}/.cache'],
        ['XDG_CONFIG_HOME', $'{$HOME}/.config'],
        ['XDG_DATA_HOME',   $'{$HOME}/.local/share'],
        ['XDG_STATE_HOME',  $'{$HOME}/.local/state']
        ]

    const xdg_base_dir = getenv(xdg_env_var) ?? default_dir
    const vim_base_dir = $'{xdg_base_dir}/vim'

    const vim_env_var = xdg_env_var->substitute('XDG', 'VIM', 'g')
    setenv(vim_env_var, vim_base_dir)

    mkdir(vim_base_dir, 'p', 0o700)
endfor

def Highlight(group: string, fg='NONE', bg='NONE', style='NONE'): void
    var style_dict: dict<bool>

    style->split(',')->mapnew((_, v) => {
        style_dict[v] = true
    })

    hlset([{
        name:    group,
        ctermfg: fg,
        ctermbg: bg,
        cterm:   style_dict,
        guifg:   fg,
        guibg:   bg,
        gui:     style_dict
    }])
enddef

# }}}

# options {{{

# --------
# defaults
# --------
unlet! g:skip_defaults_vim
source $VIMRUNTIME/defaults.vim

# ---------
# work dirs
# ---------
mkdir($'{$VIM_STATE_HOME}/swap', 'p', 0o700)
mkdir($'{$VIM_STATE_HOME}/undo', 'p', 0o700)
mkdir($'{$VIM_STATE_HOME}/view', 'p', 0o700)

# -------
# options
# -------
set autoindent
set autoread
set complete-=i
set completeopt=menu,menuone,noinsert,noselect,preinsert
set cursorline
set diffopt+=linematch:60
set directory=$VIM_STATE_HOME/swap
set encoding=utf-8
set expandtab
set fileformats=unix,dos,mac
set foldmethod=marker
set formatoptions=tcqj
set hidden
set history=1000
set hlsearch
set ignorecase
set laststatus=2
set lazyredraw
set listchars=trail:·,tab:»·
set mouse=a
set mousemodel=popup_setpos
set nolist
set noshowmode
set notitle
set number
set packpath^=$VIM_DATA_HOME
set path=.,,**
set pumheight=7
set relativenumber
set scrolloff=1
set sessionoptions-=options
set shiftround
set shiftwidth=4
set shortmess+=Ic
set showmatch
set sidescroll=1
set sidescrolloff=2
set smartcase
set smartindent
set smarttab
set smoothscroll
set softtabstop=0
set splitbelow
set splitright
set switchbuf=uselast
set tabstop=8
set termencoding=utf-8
if $TERM_PROGRAM !=# 'Apple_Terminal'
    set termguicolors
endif
set textwidth=80
set timeoutlen=777
set ttimeoutlen=77
set undodir=$VIM_STATE_HOME/undo
set undofile
set viewdir=$VIM_STATE_HOME/view
set viewoptions=cursor,folds
set viminfo=%,<800,'10,/50,:100,h,f0
set viminfofile=$VIM_STATE_HOME/viminfo
set virtualedit=block
set wildoptions=pum,tagfile

# }}}

# keymaps {{{

# leaders
g:mapleader = ' '

# vimrc
nnoremap <silent> <Leader>cd <Cmd>cd      %:p:h<Bar>pwd<CR>
nnoremap <silent> <Leader>ev <Cmd>tabedit $MYVIMRC<CR>
nnoremap <silent> <Leader>sv <Cmd>source  $MYVIMRC<CR>

# disable arrow keys
noremap <Up>    <Nop>
noremap <Down>  <Nop>
noremap <Left>  <Nop>
noremap <Right> <Nop>

inoremap <Up>    <Nop>
inoremap <Down>  <Nop>
inoremap <Left>  <Nop>
inoremap <Right> <Nop>

# swap j/k <-> gj/gk
nnoremap <expr> j (v:count > 0 ? 'j' : 'gj')
nnoremap <expr> k (v:count > 0 ? 'k' : 'gk')
xnoremap <expr> j (v:count > 0 ? 'j' : 'gj')
xnoremap <expr> k (v:count > 0 ? 'k' : 'gk')

# vimdiff as mergetool
nnoremap <expr> g1 (!&diff ?? '<Cmd>diffget LO<CR>')
nnoremap <expr> g2 (!&diff ?? '<Cmd>diffget RE<CR>')
nnoremap <expr> g3 (!&diff ?? '<Cmd>diffget BA<CR>')

# unimpaired
nnoremap <silent> [<Space> O<Esc>j
nnoremap <silent> ]<Space> o<Esc>k

nnoremap <silent> [a <Cmd>previous<CR>
nnoremap <silent> ]a <Cmd>next<CR>
nnoremap <silent> [A <Cmd>first<CR>
nnoremap <silent> ]A <Cmd>last<CR>

nnoremap <silent> [b <Cmd>bprevious<CR>
nnoremap <silent> ]b <Cmd>bnext<CR>
nnoremap <silent> [B <Cmd>bfirst<CR>
nnoremap <silent> ]B <Cmd>blast<CR>

nnoremap <silent> [l <Cmd>lprevious<CR>
nnoremap <silent> ]l <Cmd>lnext<CR>
nnoremap <silent> [L <Cmd>lfirst<CR>
nnoremap <silent> ]L <Cmd>llast<CR>

nnoremap <silent> [q <Cmd>cprevious<CR>
nnoremap <silent> ]q <Cmd>cnext<CR>
nnoremap <silent> [Q <Cmd>cfirst<CR>
nnoremap <silent> ]Q <Cmd>clast<CR>

# open/close location list window
nnoremap <silent> <Leader>lo <Cmd>lopen<CR>
nnoremap <silent> <Leader>lc <Cmd>lclose<CR>
nnoremap <silent> <Leader>ll <ScriptCmd>ToggleQuickfixWindow('ll')<CR>

# open/close quickfix window
nnoremap <silent> <Leader>qo <Cmd>copen<CR>
nnoremap <silent> <Leader>qc <Cmd>cclose<CR>
nnoremap <silent> <Leader>qq <ScriptCmd>ToggleQuickfixWindow('qf')<CR>

def ToggleQuickfixWindow(type: string): void
    var value = ''
    var prefix = ''

    if type == 'qf'
        value = 'v:val.quickfix'
        prefix = 'c'
    elseif type == 'll'
        value = 'v:val.loclist'
        prefix = 'l'
    endif

    if getwininfo()->filter(value)->empty()
        execute $'silent! {prefix}open'
    else
        execute $'silent! {prefix}close'
    endif
enddef

# use quickfix to show args
def QfShowArguments(): void
    setqflist([], ' ', {
        items: argv()->mapnew((_, v) => ({ filename: v->fnamemodify(':p') })),
        quickfixtextfunc: '<SID>FormatQuickfixItems'
    })
enddef
nnoremap <silent> <Leader>fa <ScriptCmd>QfShowArguments()<Bar>copen<CR>

# use quickfix to show buffers
def QfShowBuffers(): void
    setqflist([], ' ', {
        items: range(1, bufnr('$'))
            ->filter('buflisted(v:val)')
            ->map((_, v) => ({ bufnr: v })),
        quickfixtextfunc: '<SID>FormatQuickfixItems'
    })
enddef
nnoremap <silent> <Leader>fb <ScriptCmd>QfShowBuffers()<Bar>copen<CR>

# use quickfix to show oldfiles
def QfShowOldFiles(): void
    setqflist([], ' ', {
        items: v:oldfiles
            ->mapnew((_, v) => ({ filename: v->fnamemodify(':p') })),
        quickfixtextfunc: '<SID>FormatQuickfixItems'
    })
enddef
nnoremap <silent> <Leader>fo <ScriptCmd>QfShowOldFiles()<Bar>copen<CR>

def FormatQuickfixItems(info: dict<number>): list<string>
    var items = getqflist({ id: info.id, items: 1 }).items
    var list = []

    for v in items
        var bufname = bufname(v.bufnr)
        if bufname->empty()
            list->add("[No Name]")
        else
            list->add(fnamemodify(bufname, ':~'))
        endif
    endfor

    return list
enddef

# use tab to select from popup menu
inoremap <expr> <Tab>   (pumvisible() ? '<C-N>' : '<Tab>')
inoremap <expr> <S-Tab> (pumvisible() ? '<C-P>' : '<C-H>')

# stolen from neovim defaults
nnoremap Y     yg_
nnoremap <C-L> <Cmd>nohlsearch<Bar>diffupdate<Bar>normal! <C-L><CR>
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>
xnoremap *     y/\V<C-R>"<CR>
xnoremap #     y?\V<C-R>"<CR>
nnoremap &     <Cmd>&&<CR>

# copy to clipboard
if has('clipboard')
    nnoremap <silent> <Leader>y  "+y
    xnoremap <silent> <Leader>y  "+y
    nnoremap <silent> <Leader>Y  "+yg_
    nnoremap <silent> <Leader>yy "+y_
else
    nnoremap <expr> <silent> <Leader>y  YankToClipboard()
    xnoremap <expr> <silent> <Leader>y  YankToClipboard()
    nnoremap <expr> <silent> <Leader>Y  YankToClipboard('g_')
    nnoremap <expr> <silent> <Leader>yy YankToClipboard('_')
endif

def YankToClipboard(arg = ''): string
    &operatorfunc = (type: string, ...args: list<string>) => {
        var selection = &selection
        var clipboard = &clipboard
        var register = getreginfo(v:register)
        var visual_marks = [getpos("'<"), getpos("'>")]

        set selection=inclusive

        if type == 'char'
            silent execute $'normal! v`[o`]"{v:register}y'
        elseif type == 'line'
            silent execute $'normal! `[V`]"{v:register}y'
        elseif type == 'block' || type == 'v' || type == 'V' || type == "\<C-V>"
            silent execute $'normal! gv"{v:register}y'
        elseif type =~ '^\d\+$'
            silent execute $'normal! ^v{type}$h"{v:register}y'
            if mode() == 'v'
                normal! v
            endif
        endif

        var orig_text = getreg(v:register)
        var b64_text = orig_text->split('\n')->str2blob()->base64_encode()
        var osc52_text = $"\x1b]52;c;{b64_text}\x07"

        echoraw(osc52_text)

        &selection = selection
        &clipboard = clipboard
        setreg(v:register, register)
        setpos("'<", visual_marks[0])
        setpos("'>", visual_marks[1])
    }

    return 'g@' .. arg
enddef

# paste from clipboard
if has('clipboard')
    nnoremap <silent> <Leader>p "+p
    nnoremap <silent> <Leader>P "+P
    xnoremap <silent> <Leader>p "+p
    xnoremap <silent> <Leader>P "+P
else
    nnoremap <silent> <Leader>p <ScriptCmd>PasteFromClipboard("p")<CR>
    nnoremap <silent> <Leader>P <ScriptCmd>PasteFromClipboard("P")<CR>
    xnoremap <silent> <Leader>p <ScriptCmd>PasteFromClipboard("p")<CR>
    xnoremap <silent> <Leader>P <ScriptCmd>PasteFromClipboard("P")<CR>
endif

var pending_paste_command = ""

def PasteFromClipboard(command: string)
    echoraw("\x1b]52;c;?\x07")
    pending_paste_command = command
enddef

augroup capture_osc52_paste | autocmd!
    autocmd TermResponseAll osc {
        var match = matchlist(v:termosc, '^\%x1b]52;c;\(.*\)\%x07$')
        if !(empty(match) || empty(pending_paste_command))
            var b64text = match[1]
            var decoded_text = b64text->base64_decode()->blob2str()->join()
            setreg(v:register, decoded_text)
            execute 'normal! "' .. v:register .. pending_paste_command
            pending_paste_command = ""
        endif
    }
augroup END

# toggles
nnoremap <leader>tt <Cmd>belowright terminal<CR>
nnoremap <leader>tx <Cmd>Lexplore<CR>

# }}}

# commands {{{

# instant grep + quickfix
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr Grep(<f-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr Grep(<f-args>)

def Grep(...params: list<string>): string
    var args = params->join(' ')->expandcmd()
    var cmd = &grepprg->substitute('\$\*', args, '')
    return system(cmd)
enddef

# force saving files that otherwise require sudoedit
command! -nargs=0 SudoWrite {
    silent! write !sudo tee % > /dev/null
    edit!
    echo $'{expand('%:p')} saved!'
}

# }}}

# autos {{{

augroup auto_clang_format | autocmd!
    if executable('clang-format')
        autocmd FileType c,cpp,objc setlocal equalprg=clang-format
    endif
augroup END

augroup auto_save_folds | autocmd!
    autocmd BufWinLeave,BufLeave,BufWritePost ?* ++nested silent! mkview!
    autocmd BufWinEnter ?* silent! loadview
augroup END

augroup highlight_on_yank | autocmd!
    autocmd TextYankPost * HighlightOnYank()
augroup END

def HighlightOnYank(hlgroup = 'IncSearch', duration = 300, in_visual = true)
    if v:event.operator ==? 'y'
        if !in_visual && visualmode() != null_string
            visualmode(1)
            return
        endif
        var [beg, end] = [getpos("'["), getpos("']")]
        var type = v:event.regtype ?? 'v'
        var pos = getregionpos(beg, end, {type: type})
        var end_offset = (type == 'V' || v:event.inclusive) ? 1 : 0
        var m = matchaddpos(hlgroup, pos->mapnew((_, v) => {
            var col_beg = v[0][2] + v[0][3]
            var col_end = v[1][2] + v[1][3] + end_offset
            return [v[0][1], col_beg, col_end - col_beg]
        }))
        var winid = win_getid()
        timer_start(duration, (_) => m->matchdelete(winid))
    endif
enddef

augroup no_number_for_old_term | autocmd!
    autocmd TerminalWinOpen * setlocal nonumber norelativenumber
augroup END

augroup no_trailing_whitespaces | autocmd!
    autocmd BufWritePre * :%s/\s\+$//e
augroup END

augroup setup_quickfix | autocmd!
    autocmd QuickFixCmdPost cgetexpr cwindow
    autocmd QuickFixCmdPost lgetexpr lwindow

    autocmd Filetype qf {
        setlocal norelativenumber
        setlocal statusline=%!DrawQfStatusLine()
    }
augroup END

def g:DrawQfStatusLine(): string
    return join([
        '%#StatusVimMode#',
        ' ',
        GetVimMode(),
        ' ',
        '%#StatusFileName#',
        ' ',
        '%<%F',
        '%=',
        ' ',
        '%#StatusPercent#',
        '%l/%L',
        ' '
    ], '')
enddef

augroup show_color_column_per_line | autocmd!
    autocmd FileType * {
        const textwidth = &textwidth > 0 ? &textwidth + 1 : 0
        execute $'match ColorColumn /\%{textwidth}v./'
    }
augroup END

augroup show_listchars_when_insert | autocmd!
    autocmd InsertEnter * set list
    autocmd InsertLeave * set nolist
augroup END

augroup override_colors | autocmd!
    autocmd ColorScheme * {
        Highlight('ColorColumn', 'NONE', 'LightMagenta')
        Highlight('CursorLine', '', '', 'NONE')
        Highlight('TabLine', 'Black', 'LightGray')
        Highlight('TabLineFill', 'Black', 'White')
        Highlight('TabLineSel', 'White', 'DarkBlue', 'bold')

        HighlightStatusLine()
    }
augroup END

augroup update_status_line | autocmd!
    autocmd BufEnter,BufWritePost,WinEnter,VimEnter * HighlightStatusLine()
    autocmd ModeChanged,VimResized * redrawstatus!
augroup END

augroup use_as_man_pager | autocmd!
    autocmd FileType man setlocal textwidth=0 | match none
augroup END

# }}}

# status line {{{

def HighlightStatusLine(): void
    HighlightGitBranchStatus()

    Highlight('StatusBlank',      'Black',    'LightGray', 'NONE')
    Highlight('StatusFileName',   'Black',    'LightGray', 'bold')
    Highlight('StatusFileState',  'Brown',    'LightGray', 'bold')
    Highlight('StatusFileSize',   'Black',    'LightGray', 'NONE')
    Highlight('StatusFileFormat', 'Black',    'Gray',      'NONE')
    Highlight('StatusFileEncode', 'Black',    'Gray',      'NONE')
    Highlight('StatusPercent',    'Black',    'LightGray', 'NONE')
    Highlight('StatusWinNR',      'DarkBlue', 'Gray',      'bold')
enddef

def GetVimMode(): string
    # :help mode()
    const mode_color_map = {
        N: 'DarkBlue',
        V: 'DarkCyan',
        O: 'DarkMagenta',
        S: 'DarkYellow',
        I: 'DarkGreen',
        R: 'DarkRed',
        C: 'Brown',
        T: 'Black'
    }

    var mode = mode()->toupper()

    if mode == 'N' && state() =~ '[o]'
        mode = 'O'
    elseif mode =~ "[vV\<C-V>]"
        mode = 'V'
    elseif mode =~ "[sS\<C-S>]"
        mode = 'S'
    endif

    var color = mode_color_map[mode]
    Highlight('StatusVimMode', color, 'White', 'bold,inverse')
    return mode
enddef

def HighlightGitBranchStatus(): void
    if executable('git') < 1 | return | endif

    var git_icon = '*'
    var git_dir = expand('%:p:h:S')
    var git_cmd = $'git -C {git_dir} status --branch --porcelain=2'
    silent! var git_cmd_result = system(git_cmd)->split('\n')

    # Line                                  Notes
    # ------------------------------------------------------------
    # branch.oid <commit> | (initial)       Current commit.
    # branch.head <branch> | (detached)     Current branch.
    # branch.upstream <upstream_branch>     If upstream is set.
    # branch.ab +<ahead> -<behind>          If upstream is set and
    #                                       the commit is present.
    # ------------------------------------------------------------

    var git_branch = ''
    var git_status = []
    var git_color = ''

    if v:shell_error > 0
        Highlight('StatusGitBranchStatus', 'Black', 'LightGray')
        b:git_branch_status = ''
    else
        git_branch = git_cmd_result->copy()
            ->filter('v:val =~ "^# branch.head"')[0]->split()[2]
        git_status = git_cmd_result->copy()
            ->filter('v:val !~ "^# "')

        if git_status->empty()
            # clean branch
            git_color = 'DarkGreen'
        else
            # dirty branch
            git_color = 'DarkRed'
        endif

        Highlight('StatusGitBranchStatus', git_color, 'LightGray')
        b:git_branch_status = git_icon .. ' ' .. git_branch
    endif
enddef

def GetFileSize(): string
    var file = expand('%:p')
    var bytes = 0

    if file->len() > 0
        bytes = file->getfsize()
    else
        # it's a buffer
        bytes = wordcount().bytes
    endif

    if bytes == 0 || bytes == -1 || bytes == -2
        return ''
    endif

    const _1K = 1024
    const _1M = 1024 * _1K
    const _1G = 1024 * _1M
    const _1T = 1024 * _1G
    const _1P = 1024 * _1T
    const _1E = 1024 * _1P

    if bytes < _1K
        return printf('%dB',   bytes)
    elseif bytes < _1M
        return printf('%.1fK', bytes / _1K)
    elseif bytes < _1G
        return printf('%.1fM', bytes / _1M)
    elseif bytes < _1T
        return printf('%.1fG', bytes / _1G)
    elseif bytes < _1P
        return printf('%.1fT', bytes / _1T)
    elseif bytes < _1E
        return printf('%.1fP', bytes / _1P)
    else # math.maxinteger = 2^63 -1
        return printf('%.1fE', bytes / _1E)
    endif
enddef

HighlightStatusLine()
set statusline=%!DrawStatusLine()
def g:DrawStatusLine(): string
    if g:statusline_winid != win_getid()
        return join([
            '%#StatusWinNR#',
            ' ',
            '%{winnr()}',
            ' ',
            '%#StatusFileName#',
            ' ',
            '%<%F',
            '%=',
            ' ',
            '%#StatusPercent#',
            '%P',
            ' '
        ], '')
    else
        return join([
            '%#StatusVimMode#',
            ' ',
            GetVimMode(),
            ' ',
            '%#StatusBlank#',
            ' ',
            '%#StatusFileName#',
            '%<%F',
            '%#StatusBlank#',
            ' ',
            '%#StatusFileState#',
            '%m%r%h%w%q',
            '%#StatusBlank#',
            ' ',
            '%#StatusGitBranchStatus#',
            '%{b:->get("git_branch_status", "")}',
            '%#StatusBlank#',
            '%=',
            ' ',
            '%#StatusFileSize#',
            GetFileSize(),
            '%#StatusBlank#',
            ' ',
            '%#StatusFileFormat#',
            ' ',
            '%{&fileformat}',
            ' | ',
            '%#StatusFileEncode#',
            '%{&fileencoding ?? &encoding}',
            ' ',
            '%#StatusBlank#',
            ' ',
            '%#StatusPercent#',
            '%P',
            ' '
        ], '')
    endif
enddef

# }}}

# tab line {{{

set tabline=%!DrawTabLine()
def g:DrawTabLine(): string
    var tabline = ''
    var selected_tab_nr = tabpagenr()
    var last_tab_nr = tabpagenr('$')

    for i in range(1, last_tab_nr)
        # select the highlighting
        if i == selected_tab_nr
            tabline ..= '%#TabLineSel#'
        else
            tabline ..= '%#TabLine#'
        endif

        # set the tab page number (for mouse clicks)
        tabline ..= '%' .. i .. 'T'

        # the label consists of tab # and bufname of active window
        var buflist = tabpagebuflist(i)
        var winnr = tabpagewinnr(i)
        var buf = buflist[winnr - 1]
        var bufname = bufname(buf)->fnamemodify(':~')->pathshorten()

        tabline ..= ' ' .. i .. ':' .. bufname .. ' '

        # if buffer is modified
        var buf_modified = getbufvar(buf, '&modified')
        if buf_modified | tabline ..= '[+] ' | endif

        if i != last_tab_nr
            tabline ..= '%#TabLineFill#' .. ' '
        endif
    endfor

    # after the last tab fill with TabLineFill and reset tab page nr
    tabline ..= '%#TabLineFill#%T'

    return tabline
enddef

# }}}

# plugins {{{

final pack = {}
pack.name      = 'plugged'
pack.start_dir = $'{$VIM_DATA_HOME}/pack/{pack.name}/start'
pack.opt_dir   = $'{$VIM_DATA_HOME}/pack/{pack.name}/opt'

# paq:
# {
#    'paq_name' : { 'dir' : dir, 'url' : url }
# }
final paqs = {}

# Paq management functions
def PaqInit(): void
    mkdir(pack.start_dir, 'p')
    mkdir(pack.opt_dir,   'p')
enddef

def PaqAdd(name: string, args = {}): void
    var url = 'https://github.com/' .. name
    var as = args->get('as', name->split('/')[1])

    var dir: string
    if args->get('opt', false)
        dir = pack.opt_dir   .. '/' .. as
    else
        dir = pack.start_dir .. '/' .. as
    endif

    paqs[as] = {
        dir: dir,
        url: url
    }
enddef

def PaqUpdate(): void
    const max = paqs->mapnew((k, _) => len(k))->max()

    for [k, v] in items(paqs)
        const as  = k
        const dir = v.dir
        const url = v.url
        const sed_rm_ansi_esc_chars = 'sed'
            .. ' -e "s/[^[:print:]]\[[0-9;]*[a-zA-Z]//g"'
            .. ' -e "s/[[:cntrl:]]//g"'

        # check if it has been git cloned already
        var git_cmd = ''
        var git_cmd_result = []
        if finddir('.git', dir)->empty()
            git_cmd =  $'git clone --depth=1 {url} {dir}|{sed_rm_ansi_esc_chars}'
        else
            git_cmd = $'(git -C {dir} fetch --depth=1 '
                .. $'&& git -C {dir} reset --hard FETCH_HEAD) '
                .. $'2>&1|{sed_rm_ansi_esc_chars}'
        endif
        git_cmd_result = system(git_cmd)->split('\n')

        const doc_dir = $'{dir}/doc'
        if doc_dir->isdirectory()
            execute $'helptags {doc_dir}'
        endif

        const fmt = $'%{max + 1}s: %s'
        echo printf(fmt, as, git_cmd_result[0])
    endfor
enddef

def PaqClean(): void
    var dirs = []
    for dir in [ pack.start_dir, pack.opt_dir ]
        dirs += glob($'{dir}/*', true, true)
    endfor

    for [k, v] in items(dirs)
        for dir in paqs->values()->map((_, val) => val.dir )
            if v == dir
                dirs[k] = ''
                break
            endif
        endfor
    endfor

    if dirs->filter('v:val != ""')->empty()
        redraw! | echo $'Pack [{pack.name}] is clean.'
    else
        var prompt = "WARNING:"
            .. "\nThe following folder(s) will be deleted.\n"
            .. "\n" .. dirs->join("\n") .. "\n"
            .. "\n" .. "Are you sure? [y/N] "
        if 'y' == input(prompt)->tolower()
            for dir in dirs
                delete(dir, 'rf')
            endfor
        endif
    endif
enddef

# -------
# plugins
# -------
# system plugins

# comment
packadd! comment

# matchit
packadd! matchit

# netrw
g:netrw_banner       = 0
g:netrw_browse_split = 4
g:netrw_dirhistmax   = 0
g:netrw_keepdir      = 0
g:netrw_list_hide    = '\(^\|\s\s\)\zs\.\S\+'
g:netrw_liststyle    = 3
g:netrw_winsize      = 29

augroup vinegarize_netrw | autocmd!
    autocmd filetype netrw {
        nnoremap <buffer> <silent> ^ <Plug>NetrwBrowseUpDir()
        nnoremap <buffer> <silent> - k
        nnoremap <buffer> <silent> ~ <Cmd>execute $"Ntree {expand('~/')}"<CR>
    }
augroup END

# termdebug
command! -nargs=0 EnableTermDebug call EnableTermDebug()

def EnableTermDebug(): void
    packadd termdebug

    g:termdebug_config = {
        sign:   '>>',
        wide:   1,
        winbar: 0
    }
    nnoremap <silent> <F5> <Cmd>Termdebug<CR>
enddef

# 3rd party plugins
PaqAdd('tommcdo/vim-exchange', {as: 'exchange'})
PaqAdd('tpope/vim-repeat',     {as: 'repeat'})
PaqAdd('tpope/vim-surround',   {as: 'surround'})

# lion
PaqAdd('tommcdo/vim-lion', {as: 'lion'})
g:lion_squeeze_spaces = 1

# lsp
PaqAdd('yegappan/lsp', {as: 'lsp'})
var lsp_opts = {autoHighlightDiags: true}
var lsp_servers: list<dict<any>>

if executable('clangd')
    lsp_servers->add({
        name: 'clangd',
        filetype: ['c', 'cpp'],
        path: 'clangd',
        args: ['--background-index']
    })
endif

if executable('gopls')
    lsp_servers->add({
        name: 'gopls',
        filetype: ['go'],
        path: 'gopls'
    })
endif

if executable('neocmakelsp')
    lsp_servers->add({
        name: 'neocmakelsp',
        filetype: ['cmake'],
        path: 'neocmakelsp',
        args: ['--stdio']
    })
endif

if executable('pylsp')
    lsp_servers->add({
        name: 'pylsp',
        filetype: ['python'],
        path: 'pylsp',
        initializationOptions: {
            'pylsp': {
                'plugins': {
                    'jedi': {
                        'environment': system("pvx python find")->trim()
                    }
                }
            }
        }
    })
endif

augroup lsp_setup | autocmd!
    autocmd User LspSetup {
        g:LspOptionsSet(lsp_opts)
        g:LspAddServer(lsp_servers)
    }
augroup END

augroup lsp_attached | autocmd!
    autocmd User LspAttached SetLspKeymaps()
augroup END

def SetLspKeymaps(): void
    nnoremap <buffer> gd <Cmd>LspGotoDefinition<CR>
    nnoremap <buffer> gp <Cmd>LspPeekDefinition<CR>
    nnoremap <buffer> gr <Cmd>LspPeekReferences<CR>
    nnoremap <buffer> gi <Cmd>LspGotoImpl<CR>
    nnoremap <buffer> gt <Cmd>LspGotoTypeDef<CR>
    nnoremap <buffer> gR <Cmd>LspRename<CR>
    nnoremap <buffer> go <Cmd>LspDocumentSymbol<CR>
    nnoremap <buffer> [d <Cmd>LspDiag prev<CR>
    nnoremap <buffer> ]d <Cmd>LspDiag next<CR>
    nnoremap <buffer> K  <Cmd>LspHover<CR>
enddef

# rainbow
PaqAdd('luochen1990/rainbow')
g:rainbow_active = 1
g:rainbow_conf = {
    guifgs: [
        'DarkBlue',
        'DarkYellow',
        'DarkGreen',
        'DarkRed',
        'DarkCyan',
        'DarkMagenta'
    ],
    ctermfgs: [
        'DarkBlue',
        'DarkYellow',
        'DarkGreen',
        'DarkRed',
        'DarkCyan',
        'DarkMagenta'
    ],
    operators: '_,_'
}

# sneak
PaqAdd('justinmk/vim-sneak', {as: 'sneak'})
g:sneak#label = 1

nnoremap s <Plug>Sneak_s
nnoremap S <Plug>Sneak_S

nnoremap f <Plug>Sneak_f
nnoremap F <Plug>Sneak_F
nnoremap t <Plug>Sneak_t
nnoremap T <Plug>Sneak_T

# vimspector
PaqAdd('puremourning/vimspector', {as: 'vimspector', opt: true})

command! -nargs=0 EnableVimspector call EnableVimspector()

def EnableVimspector(): void
    packadd vimspector

    nnoremap <F4>     <Plug>VimspectorDisassemble
    nnoremap <F5>     <Plug>VimspectorContinue
    nnoremap <S-F5>   <Plug>VimspectorStop
    nnoremap <C-S-F5> <Plug>VimspectorRestart
    nnoremap <F6>     <Plug>VimspectorPause
    nnoremap <F7>     <Plug>VimspectorBalloonEval
    xnoremap <F7>     <Plug>VimspectorBalloonEval
    nnoremap <F8>     <Plug>VimspectorJumpToNextBreakpoint
    nnoremap <S-F8>   <Plug>VimspectorJumpToPreviousBreakpoint
    nnoremap <F9>     <Plug>VimspectorToggleBreakpoint
    nnoremap <C-F9>   <Plug>VimspectorBreakpoints
    nnoremap <S-F9>   <Plug>VimspectorAddFunctionBreakpoint
    nnoremap <F10>    <Plug>VimspectorStepOver
    nnoremap <C-F10>  <Plug>VimspectorRunToCursor
    nnoremap <F11>    <Plug>VimspectorStepInto
    nnoremap <S-F11>  <Plug>VimspectorStepOut
    nnoremap <F12>    <Plug>VimspectorUpFrame
    nnoremap <S-F12>  <Plug>VimspectorDownFrame

    augroup customize_vimspector_ui | autocmd!
        autocmd User VimspectorUICreated {
            win_gotoid(g:vimspector_session_windows.code)

            nunmenu WinBar

            nnoremenu WinBar.Continue <Cmd>call vimspector#Continue()<CR>
            nnoremenu WinBar.Next     <Cmd>call vimspector#StepOver()<CR>
            nnoremenu WinBar.Step     <Cmd>call vimspector#StepInto()<CR>
            nnoremenu WinBar.Finish   <Cmd>call vimspector#StepOut()<CR>
            nnoremenu WinBar.Pause    <Cmd>call vimspector#Pause()<CR>
            nnoremenu WinBar.Stop     <Cmd>call vimspector#Stop()<CR>
            nnoremenu WinBar.Restart  <Cmd>call vimspector#Restart()<CR>
            nnoremenu WinBar.Exit     <Cmd>call vimspector#Reset()<CR>
        }
    augroup END
enddef

# clean/update plugins
nnoremap <silent> <Leader>Qc <Cmd>PaqClean<CR>
nnoremap <silent> <Leader>Qu <Cmd>PaqUpdate<CR>

command! -nargs=0 PaqClean {
    PaqInit()
    PaqClean()
}

command! -nargs=0 PaqUpdate {
    PaqInit()
    PaqUpdate()
}

# }}}

# color scheme {{{

set background=light
colorscheme wildcharm

# }}}
