#!/usr/bin/env python

import os
import subprocess
import enum
import gi

os.environ["GTK_THEME"] = "Adwaita:dark"

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, Gdk

gap = 2
screen_width = 1920
width = 305
height = 50
posy = 30 + gap
posx = screen_width - width - gap

BACKLIGHT_BRIGHTNESS = "/sys/class/backlight/intel_backlight/brightness"
PATH_AC="/sys/class/power_supply/AC"
PATH_BATTERY_0="/sys/class/power_supply/BAT0"
PATH_BATTERY_1="/sys/class/power_supply/BAT1"

class Actions(enum.IntEnum):
    Lock = 1
    LogOut = 2
    Reboot = 3
    PowerOff = 4
    Suspend = 5

actions = {
    Actions.Lock     : ["", "Lock",      "light-locker-command --lock"],
    Actions.LogOut   : ["", "Log Out",   "herbstclient quit"],
    Actions.Reboot   : ["", "Reboot",    "systemctl reboot"],
    Actions.PowerOff : ["", "Power Off", "systemctl poweroff"],
    Actions.Suspend  : ["", "Suspend",   "systemctl suspend"]
}

def read_file(file):
    f = open(file,"r")
    data = f.read()
    f.close()

    return data

def write_file(file, data):
    f = open(file,"w")
    f.write(data)
    f.close()


def get_brightness():
    brightness = read_file(BACKLIGHT_BRIGHTNESS)
    brightness = int(brightness) / 12

    return brightness

def set_brightness(brightness):
    brightness = str(int(brightness * 12))
    write_file(BACKLIGHT_BRIGHTNESS, brightness )

def get_volume():
    return int(subprocess.Popen(["pactl get-sink-volume @DEFAULT_SINK@ | awk '{print $5}'| grep -m 1 % | sed 's/[%|,]//g'"], shell=True,
                              stdout=subprocess.PIPE,
                              universal_newlines=True).stdout.read())

def set_volume(vol):
    muted = subprocess.Popen(["pactl get-sink-mute @DEFAULT_SINK@ | cut -d ' ' -f 2"], shell=True,
                              stdout=subprocess.PIPE,
                              universal_newlines=True).stdout.read().strip()
    muted = "1" if muted == "yes" else "0"

    vol = str(int(vol)).strip()
    subprocess.Popen(["pactl", "set-sink-volume", "@DEFAULT_SINK@", vol + "%"])
    subprocess.Popen(["herbstclient", "emit_hook", "vol", muted, vol])

def get_essid():
    return subprocess.Popen(["iwctl station wlan0 show | grep 'Connected network' | awk '{print $3}'"], shell=True,
                              stdout=subprocess.PIPE,
                              universal_newlines=True).stdout.read().strip()

def get_battery_status_icon(percent, ac):
    if ac == 1:
        return ""

    if percent >= 95:
        return ""

    if percent >= 75:
        return ""

    if percent >= 50:
        return ""

    if percent >= 25:
        return ""

    return ""

def get_battery_details():
    ac = int(read_file(PATH_AC + "/online"))

    battery_level_0 = int(read_file(PATH_BATTERY_0 + "/energy_now"))
    battery_max_0   = int(read_file(PATH_BATTERY_0 + "/energy_full"))
    battery_level_1 = int(read_file(PATH_BATTERY_1 + "/energy_now"))
    battery_max_1   = int(read_file(PATH_BATTERY_1 + "/energy_full"))

    battery_percent_0 = int(battery_level_0 * 100 / battery_max_0)
    battery_percent_1 = int(battery_level_1 * 100 / battery_max_1)

    battery_level = battery_level_0 + battery_level_1
    battery_max = battery_max_0 + battery_max_1
    battery_percent = int(battery_level * 100 / battery_max)

    return [
        (battery_percent_0, ac), # BAT0
        (battery_percent_1, ac), # BAT0
        (battery_percent,   ac)  # BATx
    ]

class ActionDialog(Gtk.Dialog):
    def __init__(self, parent, a):
        super().__init__(title="Are you sure?", transient_for=parent, flags=0)

        self.set_border_width(20)
        self.set_default_size(150, 150)
        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)

        button = self.add_button(Gtk.STOCK_YES, Gtk.ResponseType.YES)
        button.set_always_show_image(True)

        button = self.add_button(Gtk.STOCK_NO, Gtk.ResponseType.NO)
        button.set_always_show_image(True)

        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 30)

        label = Gtk.Label.new()
        text = "Are you sure you want to " + actions[a][1].lower() + " your computer now?"
        label.set_text(text)

        image = Gtk.Image()
        image.set_from_icon_name("dialog-question", Gtk.IconSize.DIALOG)
        image.show()

        hbox.add(image)
        hbox.add(label)

        ca = self.get_content_area()
        ca.add(hbox)
        self.show_all()

class ShowTrayWindow(Gtk.Window):
    def __init__(self):
        super().__init__(title="Show Time")

        self.set_type_hint(Gdk.WindowTypeHint.NORMAL)
        self.set_default_size(width, height)
        self.set_border_width(7)
        self.move(posx, posy)
        self.connect("focus-out-event", Gtk.main_quit)

        vbox = Gtk.Box.new(Gtk.Orientation.VERTICAL, 3)
        self.add(vbox)

        # brightness
        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
        vbox.add(hbox)

        label = Gtk.Label.new()
        label.set_text("{0:2s}".format(""))
        label.set_xalign(0.0)
        hbox.add(label)

        brightness_scale = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 100, 5)
        brightness_scale.set_value(get_brightness())
        brightness_scale.set_draw_value(False)
        brightness_scale.set_size_request(260, 0)
        brightness_scale.connect("value-changed", self.on_change_brightness)
        hbox.add(brightness_scale)

        # volume
        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
        vbox.add(hbox)

        label = Gtk.Label.new()
        label.set_text("{0:2s}".format(""))
        label.set_xalign(0.0)
        hbox.add(label)

        volume_scale = Gtk.Scale.new_with_range(Gtk.Orientation.HORIZONTAL, 0, 150, 5)
        volume_scale.set_value(get_volume())
        volume_scale.set_draw_value(False)
        volume_scale.set_size_request(260, 0)
        volume_scale.add_mark(100, Gtk.PositionType.TOP, None)
        volume_scale.connect("value-changed", self.on_change_volume)
        hbox.add(volume_scale)

        # separator
        vbox.add(Gtk.Separator.new(Gtk.Orientation.HORIZONTAL))

        # network
        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
        vbox.add(hbox)

        label = Gtk.Label.new()
        label.set_text("{0:2s}".format(""))
        label.set_xalign(0.0)
        hbox.add(label)

        essid_label = Gtk.Label.new()
        essid_label.set_text(get_essid())
        essid_label.set_xalign(0.05)
        essid_label.set_size_request(260, 0)
        hbox.add(essid_label)

        # separator
        vbox.add(Gtk.Separator.new(Gtk.Orientation.HORIZONTAL))

        # power supply
        batt_details = get_battery_details()

        # batx
        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
        vbox.add(hbox)

        label = Gtk.Label.new()
        label.set_text("{0:2s}".format(get_battery_status_icon(batt_details[2][0], batt_details[2][1])))
        label.set_xalign(0.0)
        hbox.add(label)

        label = Gtk.Label.new()
        label.set_text(str(batt_details[2][0]) + "%")
        label.set_xalign(0.04)
        label.set_size_request(260, 0)
        hbox.add(label)

        hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
        vbox.add(hbox)

        # bat0/1
        i = 0
        while i < 2:
            hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
            vbox.add(hbox)

            label = Gtk.Label.new()
            label.set_text("\t{0:2s}".format("🞂"))
            label.set_xalign(0.0)
            hbox.add(label)

            label = Gtk.Label.new()
            label.set_text("BAT{0:d}".format(i)),
            label.set_xalign(0.0)
            label.set_size_request(60, 0)
            hbox.add(label)

            label = Gtk.Label.new()
            label.set_text("{0:3d}%".format(batt_details[i][0])),
            label.set_xalign(1.0)
            label.set_size_request(100, 0)
            hbox.add(label)

            label = Gtk.Label.new()
            label.set_text("↗↗" if batt_details[i][1] == 1 else "↘↘"),
            label.set_xalign(1.0)
            label.set_size_request(60, 0)
            hbox.add(label)

            i += 1

        # separator
        vbox.add(Gtk.Separator.new(Gtk.Orientation.HORIZONTAL))

        # actions
        for a in actions:
            hbox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 3)
            vbox.add(hbox)

            label = Gtk.Label.new()
            label.set_text("{0:2s}".format(actions[a][0]))
            label.set_xalign(0.0)
            hbox.add(label)

            button = Gtk.Button.new()
            button.set_label(actions[a][1])
            button.set_relief(Gtk.ReliefStyle.NONE)
            button.connect("clicked", self.on_click_action, a)
            hbox.add(button)

    def on_change_brightness(self, scale):
        set_brightness(scale.get_value())

    def on_change_volume(self, scale):
        set_volume(scale.get_value())

    def on_click_action(self, button, a):
        dialog = ActionDialog(self, a)
        response = dialog.run()
        dialog.destroy()

        if response == Gtk.ResponseType.YES:
            subprocess.Popen("canberra-gtk-play --id service-logout", shell=True, stdout=subprocess.PIPE)
            subprocess.Popen(actions[a][2], shell=True, stdout=subprocess.PIPE)


if __name__ == "__main__":
    Gdk.set_program_class("hlwm-show-tray")

    win = ShowTrayWindow()
    win.show_all()

    Gtk.main()
