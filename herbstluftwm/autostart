#!/usr/bin/env bash

# this is a simple config for herbstluftwm

HLWM_HOME=$HOME/.config/herbstluftwm

hc() {
    herbstclient "$@"
}

# let the fun begin
hc emit_hook reload

# remove all existing keybindings
hc keyunbind --all

# keybindings
Mod=Mod4   # Use the super key as the main modifier

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload
hc keybind $Mod-Shift-c close
hc keybind $Mod-Return       \
    spawn kitty --single-instance --instance-group=main
hc keybind $Mod-Shift-Return \
    spawn kitty --single-instance --instance-group=main --class scratchpad

# user custom keybindings
hc keybind $Mod-d                spawn kitty --class fzmenu -- $HLWM_HOME/alacarte
hc keybind Mod1-Control-Delete   spawn kitty --class fzmenu -- $HLWM_HOME/sayonara

hc keybind XF86AudioMicMute      spawn wpctl set-mute @DEFAULT_SOURCE@  toggle
hc keybind XF86AudioMute         spawn $HLWM_HOME/volumectl 1 0
hc keybind XF86AudioRaiseVolume  spawn $HLWM_HOME/volumectl 0 5%+
hc keybind XF86AudioLowerVolume  spawn $HLWM_HOME/volumectl 0 5%-

hc keybind XF86MonBrightnessUp   spawn $HLWM_HOME/brightnessctl +5
hc keybind XF86MonBrightnessDown spawn $HLWM_HOME/brightnessctl -5

hc keybind Print                                       \
   chain , spawn canberra-gtk-play --id screen-capture \
         , spawn scrot '%F_%H%M%S.png'                 \
                       --exec 'mv $f ~/Pictures/Screenshots/'
hc keybind Mod1-Print                                  \
   chain , spawn canberra-gtk-play --id screen-capture \
         , spawn scrot --focused '%F_%H%M%S.png'       \
                       --exec 'mv $f ~/Pictures/Screenshots/'

# basic movement
# focusing clients
hc keybind $Mod-h     focus left
hc keybind $Mod-j     focus down
hc keybind $Mod-k     focus up
hc keybind $Mod-l     focus right

# moving clients
hc keybind $Mod-Shift-h     shift left
hc keybind $Mod-Shift-j     shift down
hc keybind $Mod-Shift-k     shift up
hc keybind $Mod-Shift-l     shift right

# maximize clients
hc keybind $Mod-Up set_layout max

# splitting frames
# create an empty frame at the specified direction
hc keybind $Mod-u       split   bottom  0.5
hc keybind $Mod-o       split   right   0.5
# let the current frame explode into subframes
hc keybind $Mod-Control-space split explode

# resizing frames
resizestep=0.05
hc keybind $Mod-Control-h  resize left  +$resizestep
hc keybind $Mod-Control-j  resize down  +$resizestep
hc keybind $Mod-Control-k  resize up    +$resizestep
hc keybind $Mod-Control-l  resize right +$resizestep

# set default frame layout
hc set default_frame_layout horizontal
hc substitute ALGO settings.default_frame_layout \
    foreach T tags.by-name.                      \
    sprintf ATTR '%c.tiling.root.algorithm' T    \
    set_attr ATTR ALGO

# tags
tag_keys=( {1..9} 0 )
tag_names=( {1..9} 0 ) # 0 for external monitor

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Shift-$key" move_index "$i"
    fi
done

#  cycle through tags
hc keybind $Mod-period use_index +1 --skip-visible
hc keybind $Mod-comma  use_index -1 --skip-visible
hc keybind $Mod-Tab    use_previous

#  layouting
hc keybind $Mod-r remove
hc keybind $Mod-s floating toggle
hc keybind $Mod-f fullscreen toggle
hc keybind $Mod-p pseudotile toggle

# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-Shift-space                                                   \
             or , and . compare tags.focus.curframe_wcount = 2                \
                      . cycle_layout +1 vertical horizontal max vertical grid \
                , cycle_layout +1

#  mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

#  focus
hc keybind $Mod-BackSpace chain , cycle_monitor , spawn $HLWM_HOME/monitorctl

hc keybind $Mod-bracketright cycle_all   +1
hc keybind $Mod-bracketleft  cycle_all   -1
hc keybind $Mod-braceright   cycle_frame +1
hc keybind $Mod-braceleft    cycle_frame -1
hc keybind $Mod-parentright  cycle       +1
hc keybind $Mod-parentleft   cycle       -1
hc keybind $Mod-i            jumpto      urgent

#  theme
bg_main="#ffffff"
bg_dim="#f0f0f0"
fg_main="#000000"
fg_dim="#595959"
bg_active="#3548cfaa"
border_active="#3548cf"
border_normal="#ffffff"
border_urgent="#a60000"
window_divider="#d7d7d7"

hc set frame_border_active_color "$border_active"
hc set frame_border_normal_color "$border_normal"
hc set frame_border_normal_color "#00000000" # full transparency

hc set frame_bg_normal_color "$bg_main"
hc set frame_bg_active_color "$bg_active"

hc attr theme.active.color "$border_active"
hc attr theme.normal.color "$border_normal"
hc attr theme.urgent.color "$border_urgent"
hc
hc attr theme.active.inner_color "$border_active"
hc attr theme.normal.inner_color "$window_divider"
hc attr theme.urgent.inner_color "$border_urgent"
hc
hc attr theme.active.title_color "$bg_main"
hc attr theme.normal.title_color "$fg_dim"
hc attr theme.urgent.title_color "$bg_main"

hc attr theme.active.tab_color "$bg_main"
hc attr theme.normal.tab_color "$bg_main"
hc attr theme.urgent.tab_color "$border_urgent"

hc attr theme.floating.outer_color "$border_active"

hc attr theme.background_color '#00000000'

for state in active urgent normal; do
    hc substitute C theme.${state}.inner_color attr theme.${state}.outer_color C
done

hc attr theme.inner_width           1
hc attr theme.border_width          1
hc attr theme.floating.border_width 1
hc attr theme.floating.outer_width  1

hc attr theme.tiling.reset          1
hc attr theme.floating.reset        1

hc set always_show_frame         1
hc set frame_border_width        1
hc set frame_bg_transparent      1
hc set frame_transparent_width   1
hc set frame_gap                 1

hc set window_gap                1
hc set frame_padding             1
hc set smart_window_surroundings 1
hc set smart_frame_surroundings  1
hc set mouse_recenter_gap        0

hc set auto_detect_monitors      1

# rules
hc unrule --all
hc rule focus=on switchtag=on # normally focus new clients

hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on floatplacement=center
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# home made applications
hc rule class~'termbar' manage=off focus=off
hc rule class~'fzmenu' focus=on floating=on floatplacement=center floating_geometry=400x400
hc rule class~'scratchpad' focus=on floating=on floatplacement=center floating_geometry=1440x900

# firefox
hc rule instance='Browser' class='firefox' focus=on floating=on floatplacement=center

# gtk
hc rule windowrole~'Gtk(App|Color|File|Font|Recent)ChooserDialog' floatplacement=center floating_geometry=1024x768

# jetbrains
hc rule class='jetbrains-clion' title='splash' focus=on pseudotile=on floatplacement=center

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock

# start ibus daemon
ibus-daemon --daemonize --replace --xim &

# workaround a java bug for jetbrain products
hc cycle_value wmname herbstluftwm LG3D

# terminate already running bar instances
pkill -u $UID -f termbar

# wait until the processes have been shut down
while pgrep -u $UID -f termbar >/dev/null; do sleep 1; done

# launch termbar on primary monitor
hc pad 0 35
exec -a termbar kitty                                             \
     --class termbar                                              \
     --config $HLWM_HOME/termbar.kitty.conf                       \
     --override open_url_with=$HLWM_HOME/termbar-protocol-handler \
     --single-instance                                            \
     --instance-group=termbar                                     \
     -- $HLWM_HOME/termbar 0 &

# do multi monitor setup here, e.g.:
# herbstclient set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
hc detect_monitors

if [[ $(hc get_attr monitors.count) > 1 ]]; then
    # put the external monitor on the right
    xrandr --output eDP-1 --primary --auto \
           --output HDMI-2 --auto --right-of eDP-1

    hc focus_monitor 1
    hc use 0
    hc lock_tag 1

    hc focus_monitor 0
fi
