#!/usr/bin/env bash

SEPARATOR=" "
COLS=$(tput cols)
MONITOR="${1:-0}"

# helpers
uniq_linebuffered() {
    awk '$0 != l {print; l=$0; fflush();}' "$@"
}

printl() {
    tput cup 0 0
    echo -n "$1"
}

printc() {
    local len=${#1}
    local pos=$(( ($COLS - $len) / 2 ))

    tput cup 0 $pos
    echo -n "$1"
}

printr() {
    local str=$(sed -e 's|[[:cntrl:]]\[[[:digit:]]\+m||g' <<< "${1}")
    local len=${#str}
    local spacer="  " #2 spaces
    local pos=$(( $COLS - $len - ${#spacer} - 2 ))

    tput cup 0 $pos
    echo -n "${spacer}$1"

    tput el
}

# printers
print_date() {
    date +$'date\t%a %d %b %H:%M'
}

print_ime() {
    local ime=$(ibus engine 2> /dev/null)

    echo -e "ime\t$ime"
}

print_vol() {
    # format: vol/muted?/vol

    # use pipewire
    # pw-cli list-objects Node
    # pw-cli enum-params <node-id> Props
    # pw-cli set-param <node-id> Props '{ mute: false, channelVolumes: [ 0.5, 0.5 ], save: true }'

    # get default node name
    local default_node_name=$(wpctl status|grep -A2 Default|tail -1|awk '{print $3}')

    # get its node_id
    local node_id=$(pw-dump|jq --arg default_node_name $default_node_name '.[]|select(.info.props["node.name"] == $default_node_name)|.id')

    # true - false
    local muted=$(wpctl status|grep ${node_id}[.]|awk -F '[][]' '{print $2}'|awk '{print $3}')
    if [[ $muted == "MUTED" ]]; then
        muted=true
    else
        muted=false
    fi

    # vol -> (0.00, 1.00)
    local vol=$(wpctl status|grep ${node_id}[.]|awk -F '[][]' '{print $2}'|awk '{print $2}')
    vol=$(printf "%.0f" $(echo "${vol} * 100"|bc -l))

    echo -e "vol\t${muted}\t${vol}"
}

print_net() {
    # /proc/net/wireless
    # format: net/eth?/strength

    local strength=$(awk 'NR==3 {printf "%d",$3}' /proc/net/wireless)

    # hard code eth=0 for now
    local eth=0
    echo -e "net\t${eth}\t${strength}"
}

print_batt() {
    local PATH_AC="/sys/class/power_supply/AC"
    local PATH_BATTERY_0="/sys/class/power_supply/BAT0"
    local PATH_BATTERY_1="/sys/class/power_supply/BAT1"

    local ac=0
    local battery_level_0=0
    local battery_level_1=0
    local battery_max_0=0
    local battery_max_1=0

    if [ -f "${PATH_AC}/online" ]; then
        ac=$(cat "${PATH_AC}/online")
    fi

    if [ -f "${PATH_BATTERY_0}/energy_now" ]; then
        battery_level_0=$(cat "${PATH_BATTERY_0}/energy_now")
    fi

    if [ -f "${PATH_BATTERY_0}/energy_full" ]; then
        battery_max_0=$(cat "${PATH_BATTERY_0}/energy_full")
    fi

    if [ -f "${PATH_BATTERY_1}/energy_now" ]; then
        battery_level_1=$(cat "${PATH_BATTERY_1}/energy_now")
    fi

    if [ -f "${PATH_BATTERY_1}/energy_full" ]; then
        battery_max_1=$(cat "${PATH_BATTERY_1}/energy_full")
    fi

    local battery_level=$((${battery_level_0} + ${battery_level_1}))
    local battery_max=$((${battery_max_0} + ${battery_max_1}))
    local battery_percent=$((${battery_level} * 100 / ${battery_max}))

    echo -e "batt\t${ac}\t${battery_percent}"
}

# formatters
format_focused_tag() {
    echo -n "$(tput bold)$(tput smul)$1$(tput sgr0)"
}

format_occupied_tag() {
    echo -n "$1$(tput sgr0)"
}

format_unoccupied_tag() {
    echo -n "$(tput setaf 7)$1$(tput sgr0)"
}

format_urgent_tag() {
    echo -n "$(tput bold)$(tput setaf 1)$1$(tput sgr0)"
}

format_tags() {
    local tags=("$@")
    local ws

    for i in "${tags[@]}"; do
        tag_name="${i:1}"
        tag_status="${i:0:1}"

        case ${tag_status} in
            ".") # unoccupied
                ws+=$(format_unoccupied_tag "${tag_name}")
                ;;
            ":") # occupied
                ws+=$(format_occupied_tag "${tag_name}")
                ;;
            "+") # unfocused on specified monitor
                ws+="${tag_name}"
                ;;
            "#") # focused on specified monitor
                ws+=$(format_focused_tag "${tag_name}")
                ;;
            "-") # unfocused on different monitor
                ws+="${tag_name}"
                ;;
            "%") # focused on different monitor
                ws+=$(format_focused_tag "${tag_name}")
                ;;
            "!") # urgent!
                ws+=$(format_urgent_tag "${tag_name}")
                ;;
        esac

        ws+="${SEPARATOR}"
    done

    echo -n "${ws}"
}

format_date() {
    local now="$@"

    echo -n "${now}"
}

format_ime() {
    local ime=""

    [[ $1 == "xkb:us::eng" ]] && ime="[en]"
    [[ $1 == "libpinyin" ]] && ime="[zh]"

    echo -n "${ime}"
}

format_vol() {
    # unmuted "——|——"
    # muted   "——X——"
    # | or X indicates the volume level

    local muted=$1
    local vol=$2
    local icon

    if [[ "${muted}" == true ]]; then
        icon="x"
    else
        icon="|"
    fi

    if [[ "${vol}" -ge 100 ]]; then
        icon="————${icon}"
    elif [[ "${vol}" -ge 75 ]]; then
        icon="———${icon}—"
    elif [[ "${vol}" -ge 50 ]]; then
        icon="——${icon}——"
    elif [[ "${vol}" -ge 25 ]]; then
        icon="—${icon}———"
    else
        icon="${icon}————"
    fi

    echo -n "${icon}"
}

format_net() {
    # 🔗 lan
    # 📶 wifi
    # 🌐 disconnected

    local eth=$1
    local strength=$((${2:-0} * 100 / 70))
    local icon

    if [ "${eth}" -eq 1 ]; then
        icon="🔗"
    else
        if [ "${strength}" -gt 66 ]; then
            icon="📶"
        elif [ "${strength}" -gt 33 ]; then
            icon="📶"
        else
            icon="📶"
        fi
    fi

    echo -n "${icon}"
}

format_batt() {
    # 🔋🔌▱▰ ◽ ◾ ◼◻

    local ac=$1
    local battery_percent=$2
    local icon, batt

    [[ "${ac}" -eq 1 ]] && icon="$(tput smul)"

    if [ "${battery_percent}" -ge 95 ]; then
        icon+="◼◼◼"
    elif [ "${battery_percent}" -ge 66 ]; then
        icon+="◼◼◻"
    elif [ "${battery_percent}" -ge 33 ]; then
        icon+="◼◻◻"
    else
        icon+="◻◻◻"
    fi

    [[ "${ac}" -eq 1 ]] && icon+="$(tput rmul)"

    batt="${icon} ${battery_percent}%"

    if [[ "${ac}" -eq 0 && "${battery_percent}" -le 9 ]]; then
        batt="$(tput setaf 1)${batt}"
    fi

    echo -n "${batt}"
}

# hide the cursor
tput civis

# the fun begins
{
    # volume
    print_vol

    # ime
    print_ime

    # time
    while :; do
        print_date
        sleep 1 || break
    done > >(uniq_linebuffered) &
    pids[0]=$!

    # battery info
    while :; do
        print_batt
        sleep 17 || break
    done > >(uniq_linebuffered) &
    pids[1]=$!

    udevadm monitor --udev --subsystem-match power_supply |
        while read event; do
            print_batt
        done > >(uniq_linebuffered) &
    pids[2]=$!

    # net
    while :; do
        print_net
        sleep 11 || break
    done > >(uniq_linebuffered) &
    pids[3]=$!

    # ime
    dbus-monitor --address `ibus address` --profile "type='signal',member='GlobalEngineChanged'" |
        while read event; do
            print_ime
        done > >(uniq_linebuffered) &
    pids[4]=$!

    # initialize tags
    echo -n "tags init"

    # wait for events
    herbstclient --idle

    # clean up
    for pid in "${pids[@]}"; do
        kill -9 $pid
    done
} 2> /dev/null | {
    while :; do
        IFS=$'\t' read -ra cmd || break
        case "${cmd[0]}" in
            tag*)
                IFS=$'\t' read -ra tags <<< $(herbstclient tag_status "${MONITOR}")
                ws=$(format_tags "${tags[@]}")
                ;;
            date)
                date=$(format_date "${cmd[@]:1}")
                ;;
            vol)
                vol=$(format_vol "${cmd[@]:1}")
                ;;
            net)
                net=$(format_net "${cmd[@]:1}")
                ;;
            batt)
                batt=$(format_batt "${cmd[@]:1}")
                ;;
            ime)
                ime=$(format_ime "${cmd[@]:1}")
                ;;
            reload)
                exit
                ;;
            quit_panel)
                exit
                ;;
            *)
                continue
                ;;
        esac

        # print the final result
        LEFT="${ws}"
        CENTER="${date}"
        RIGHT="${ime}${SEPARATOR}${vol}${SEPARATOR}${net}${SEPARATOR}${batt}"

        echo -n $(tput sgr0)
        printl "${LEFT}"
        printc "${CENTER}"
        printr "${RIGHT}"
        echo -n $(tput sgr0)
    done
} 2> /dev/null
