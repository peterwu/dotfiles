# -*- coding: utf-8 -*-
#+STARTUP: overview

My Emacs Configuration

* auto update packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :init
    (setq auto-package-update-last-update-day-filename
	  (expand-file-name ".cache/last-package-update-day" user-emacs-directory))
    :config
    (setq auto-package-update-delete-old-versions t
	  auto-package-update-hide-results t
	  auto-package-update-prompt-before-update t
	  auto-package-update-interval 13)
    (auto-package-update-maybe))
#+END_SRC
* variables
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t
	initial-major-mode 'org-mode
	initial-scratch-message nil)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
	display-time-format "%R"
	display-time-default-load-average nil)
  (setq visible-bell t
	visible-cursor nil)
  (setq default-input-method "pyim")
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
    (setq inhibit-compacting-font-caches t)) 
  (setq frame-title-format
	'(buffer-file-name "%f"
			   (dired-directory dired-directory "%b")))
#+END_SRC
* modes
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (blink-cursor-mode t)
  (save-place-mode t)
#+END_SRC
* theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'modus-operandi t)
  #+END_SRC
* mode line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :init
    (setq telephone-line-height 24
	  telephone-line-evil-use-short-tag nil)

    (setq telephone-line-primary-left-separator 'telephone-line-flat
	  telephone-line-secondary-left-separator 'telephone-line-nil
	  telephone-line-primary-right-separator 'telephone-line-flat
	  telephone-line-secondary-right-separator 'telephone-line-nil)
    :config
    (telephone-line-mode t))
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC
* key bindings
#+BEGIN_SRC emacs-lisp
  (use-package hydra)

  (use-package general
    :init
    (defconst my-leader-key "SPC")
    (defconst my-local-leader-key ",")
    :config
    ;; use shortnames
    (general-evil-setup t))

  (defhydra hydra-zoom (global-map "C-c z")
    "zoom"
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (lambda () (interactive) (text-scale-set 0)) "reset"))

  ;; shell
  (bind-key "C-`" 'shell)

  ;; Mouse scrolling in terminal emacs
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    (xterm-mouse-mode 1)
    (bind-key "<mouse-4>" 'scroll-down-line)
    (bind-key "<mouse-5>" 'scroll-up-line))
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
    ([remap other-window] . ace-window)
    :config
    (set-face-attribute 'aw-leading-char-face nil
			:height 3.0
			:box t))
#+END_SRC
* evils
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (fset 'evil-visual-update-x-selection 'ignore)
    (setq x-select-enable-clipboard nil)

    (setq evil-want-C-i-jump nil)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-mode-line-format '(after . mode-line-front-space))
    :general
    (mmap 
     :prefix my-leader-key :keymaps 'override
     "y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))

    (nvmap
     :prefix my-leader-key
     "p" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-after))
     "P" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-before))
     "y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank))
     "Y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line)))
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-numbers
    :config
    (defhydra hydra-evil-numbers (global-map "C-c n")
      "evil-numbers"
      ("+" evil-numbers/inc-at-pt "increase")
      ("-" evil-numbers/dec-at-pt "decrease")))

  (use-package evil-args
    :general
    (nmap
     "L" 'evil-forward-arg
     "H" 'evil-backward-arg
     "K" 'evil-jump-out-args)

    (mmap
     "L" 'evil-forward-arg
     "H" 'evil-backward-arg)

    (itomap
     "a" 'evil-inner-arg)

    (otomap
     "a" 'evil-outer-arg))

  (use-package evil-lion
    :config
    (evil-lion-mode))

  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-define-global-key-bindings t))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook text-mode)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC
* org mode
** stock org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t
	org-fontify-whole-heading-line t
	org-support-shift-select t
	org-odt-convert-process 'unoconv
	org-odt-preferred-output-format "docx"
	org-agenda-files (list "~/Documents/Org")
	org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
	   "* TODO %?\n  %i\n  %a")
	  ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
	   "* Notes %?\n  %i\n  %a")
	  ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a")))

  (bind-keys
   :prefix "C-c" :prefix-map mode-specific-map
   ("a" . org-agenda)
   ("b" . org-switchb)
   ("c" . org-capture)
   ("l" . org-store-link))
#+END_SRC
** org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶")
	  org-superstar-prettify-item-bullets t
	  org-superstar-leading-bullet ?\s))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    :config
    (global-company-mode t))
#+END_SRC
* search
** Avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
	:general
	(nmap 
	 :prefix my-leader-key
	 "f" 'avy-goto-char))
  #+END_SRC
** Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :init (ivy-mode 1)
      :general
      (nmap 
       :prefix my-leader-key
       "b" 'ivy-switch-buffer)
      :config
      (setq ivy-use-virtual-buffers t
	    ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t))
  #+END_SRC
** Swiper
  #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:general
	(nmap
	 :prefix my-leader-key
	 "s" 'swiper))
  #+END_SRC
** Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :bind
      (("M-x"    . counsel-M-x)
       ("M-y"    . counsel-yank-pop)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("<f1> l" . counsel-find-library)
       ("<f2> i" . counsel-info-lookup-symbol)
       ("<f2> u" . counsel-unicode-char)
       ("<f2> j" . counsel-set-variable))
      :general
      (nmap 
       :prefix my-leader-key
       "e" 'counsel-file-file
       "g" 'counsel-git
       "." 'counsel-fzf
       "`" (lambda() (interactive) (counsel-fzf nil "/"))))
  #+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :defer t
    :bind ([f9] . sr-speedbar-toggle))
#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (use-package yasnippet-snippets)
    (yas-global-mode 1))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode    . lsp)
	   (c++-mode  . lsp)
	   (objc-mode . lsp)
	   (go-mode   . lsp)
	   (rust-mode . lsp)
	   (lsp-mode  . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui  :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
#+END_SRC
