# -*- coding: utf-8 -*-
#+STARTUP: overview
#+TITLE: My Emacs Configuration

* =bootstrap=
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file 'noerror)

  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; install use-package if not
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  (setq use-package-always-ensure t)

  ;; auto update packages
  (use-package auto-package-update
    :custom
    (auto-package-update-last-update-day-filename
     (expand-file-name ".cache/last-package-update-day" user-emacs-directory))
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-interval 13)
    :config
    (auto-package-update-maybe))
#+END_SRC
* =defaults=
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message t
        initial-major-mode 'org-mode
        initial-scratch-message nil)
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil
        auto-save-list-file-prefix nil)
  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 10000
        auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
        display-time-format "%R"
        display-time-default-load-average nil)
  (setq visible-bell t
        visible-cursor nil)
  (setq x-select-enable-clipboard nil)
  (setq default-input-method "pyim")
  (setq frame-title-format
        '(buffer-file-name "%f"
                           (dired-directory dired-directory "%b")))
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
    (setq inhibit-compacting-font-caches t))
#+END_SRC

* =modes=
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (column-number-mode +1)
  (blink-cursor-mode +1)
  (electric-pair-mode +1)
  (global-auto-revert-mode +1)
  (global-display-line-numbers-mode +1)
  (global-hl-line-mode +1)
  (global-visual-line-mode +1)
  (recentf-mode +1)
  (save-place-mode +1)
  (size-indication-mode +1)
  (show-paren-mode +1)
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ([remap other-window] . ace-window)
    :config (set-face-attribute 'aw-leading-char-face nil
                                :height 3.0
                                :box t))
#+END_SRC
* avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :bind ("M-s" . avy-goto-char-timer))
  #+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (global-company-mode +1)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-selection-wrap-around t)
    :config
    (company-tng-mode +1))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+END_SRC
* consult
#+BEGIN_SRC emacs-lisp
  (use-package consult
    :bind (("C-c h" . consult-history)
           ("C-c o" . consult-outline)
           ([remap switch-to-buffer] . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x r x" . consult-register)
           ("C-x r b" . consult-bookmark)
           ;; ("C-s" . consult-line)
           ([remap isearch-forward] . consult-line)
           ("M-y" . consult-yank-pop)
           ("<help> a" . consult-apropos))
    :init
    (fset 'multi-occur #'consult-multi-occur)
    :config
    (consult-preview-mode +1))

  (use-package consult-selectrum
    :demand t)

  (use-package consult-flycheck
    :bind (:map flycheck-command-map
                ("!" . consult-flycheck)))
#+END_SRC
* evil
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :preface
    (defconst my-leader-key "SPC")
    (defconst my-local-leader-key ",")
    (defconst my-non-normal-prefix "C-")

    (defun my-define-leader-maps ()
      "Define key maps for with my-leader-key for needed evil states"

      ;; normal
      (define-prefix-command 'my-evil-leader-nmap)
      (define-key evil-normal-state-map (kbd my-leader-key) 'my-evil-leader-nmap)

      ;; visual
      (define-prefix-command 'my-evil-leader-vmap)
      (define-key evil-visual-state-map (kbd my-leader-key) 'my-evil-leader-vmap)

      ;; motion
      (define-prefix-command 'my-evil-leader-mmap)
      (define-key evil-motion-state-map (kbd my-leader-key) 'my-evil-leader-mmap))

    (defun my-set-evil-state-color ()
      (let* ((default 'modus-theme-intense-neutral)
             (face (cond ((evil-emacs-state-p) 'modus-theme-intense-magenta)
                         ((evil-insert-state-p) 'modus-theme-intense-green)
                         ((evil-motion-state-p) 'modus-theme-intense-yellow)
                         ((evil-normal-state-p) default)
                         ((evil-operator-state-p) 'modus-theme-subtle-yellow)
                         ((evil-replace-state-p) 'modus-theme-intense-red)
                         ((evil-visual-state-p) 'modus-theme-intense-cyan)
                         ((minibufferp) default)
                         (t default))))
        (set-face-background 'mode-line (face-background face))
        (set-face-foreground 'mode-line (face-foreground face))))
    :init
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (evil-want-C-i-jump nil)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-mode-line-format nil)
    :bind (:map my-evil-leader-mmap
                ("y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))
                ("Y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line))))
    :bind (:map my-evil-leader-nmap
                ("p" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-after)))
                ("P" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-before)))
                ("y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))
                ("Y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line))))
    :hook (post-command . my-set-evil-state-color)
    :config
    (my-define-leader-maps)
    (evil-mode +1))

  (use-package evil-args
    :bind (:map evil-inner-text-objects-map
                ("a" . evil-inner-arg))
    :bind (:map evil-outer-text-objects-map
                ("a" . evil-outer-arg))
    :bind (:map evil-normal-state-map
                ("H" . evil-backward-arg)
                ("L" . evil-forward-arg)
                ("K" . evil-jump-out-args))
    :bind (:map evil-motion-state-map
                ("H" . evil-backward-arg)
                ("L" . evil-forward-arg)))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :init
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode +1))

  (use-package evil-exchange
    :config
    (evil-exchange-install))

  (use-package evil-goggles
    :custom
    (evil-goggles-pulse t)
    :config  
    (evil-goggles-mode +1))

  (use-package evil-lion
    :config
    (evil-lion-mode +1))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode +1))

  (use-package evil-numbers
    :bind (:map evil-normal-state-map
                ("C-c +" . evil-numbers/inc-at-pt)
                ("C-c -" . evil-numbers/dec-at-pt)))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode +1))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode +1))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :after lsp-mode
    :hook (lsp-mode . flycheck-mode))
#+END_SRC
* flyspell
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :ensure nil
    :custom
    (ispell-program-name "hunspell")
    (ispell-dictionary "en_US")
    :config
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US"))

  (use-package flyspell
    :ensure nil
    :after ispell
    :bind ("C-c s" . flyspell-mode))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map
                ("C-;" . flyspell-correct-wrapper)))
#+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode c++-mode objc-mode go-mode rust-mode) . lsp)
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode)
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
           ("C-c j" . magit-dispatch)
           ("C-c g" . magit-file-dispatch)))
#+END_SRC
* man
#+BEGIN_SRC emacs-lisp
  (use-package man
    :after evil
    :config
    (evil-define-key 'normal Man-mode-map "q" 
      (lambda ()
        (interactive)
        (if (> (length (window-list)) 1)
            (quit-window)
          (delete-frame)))))
#+END_SRC
* marginalia
#+BEGIN_SRC emacs-lisp
  (use-package marginalia
    :init
    (marginalia-mode +1))
#+END_SRC
* minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode +1))
#+END_SRC
* org mode
** stock org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :hook (org-mode . (lambda ()
                        (org-indent-mode +1)
                        (variable-pitch-mode -1)
                        (display-line-numbers-mode -1)))
    :bind (("C-c a" . org-agenda)
           ("C-c b" . org-switchb)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))  
    :custom
    (org-ellipsis " ▾")
    (org-startup-folded t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-export-with-tags nil)
    (org-export-headline-levels 5)
    (org-hide-emphasis-markers t)
    (org-fontify-whole-heading-line t)
    (org-support-shift-select t)
    (org-startup-with-inline-images t)
    (org-odt-convert-process 'unoconv)
    (org-odt-preferred-output-format "docx")
    (org-agenda-files (list "~/Documents/Org"))
    (org-capture-templates
     '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
       ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
        "* Notes %?\n  %i\n  %a")
       ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a"))))

  (use-package org-indent
    :ensure nil
    :after org)
#+END_SRC
** org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶"))
    (org-superstar-prettify-item-bullets t)
    (org-superstar-leading-bullet ?\s))
#+END_SRC
* prescient
#+begin_src emacs-lisp
  (use-package prescient)
  (use-package company-prescient
    :after company)
  (use-package selectrum-prescient
    :after selectrum)
#+end_src
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* selectrum
#+BEGIN_SRC emacs-lisp
  (use-package selectrum
    :config
    (selectrum-mode +1))
#+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :custom (speedbar-use-images nil)
    :bind ([f9] . sr-speedbar-toggle))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
* terminal support
#+BEGIN_SRC emacs-lisp
  ;; osc52 support under supporting terminals and tmux
  (use-package osc52
    :unless window-system
    :load-path "mine"
    :config
    (osc52-set-cut-function))

  ;; Mouse scrolling in terminal emacs
  (unless window-system
    ;; activate mouse-based scrolling
    (xterm-mouse-mode +1)
    (bind-key "<mouse-4>" 'scroll-down-line)
    (bind-key "<mouse-5>" 'scroll-up-line))
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  ;; load favorite theme
  (load-theme 'modus-operandi t)
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode +1))
  #+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook ((prog-mode org-mode) . yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC
* zoom in/out
  #+BEGIN_SRC emacs-lisp
    (bind-keys
     ([C-mouse-4] . text-scale-increase)
     ([C-mouse-5] . text-scale-decrease)
     ([C-0]       . (lambda () (interactive) (text-scale-set 0))))
  #+END_SRC
* ...
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
  (use-package yaml-mode)
#+END_SRC
