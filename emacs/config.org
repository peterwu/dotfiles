# -*- coding: utf-8 -*-
#+STARTUP: overview

My Emacs Configuration

* variables
#+bEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t
	initial-major-mode 'org-mode
	initial-scratch-message nil)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
	display-time-format "%R"
	display-time-default-load-average nil)
  (setq visible-bell t
	visible-cursor nil)
  (setq default-input-method "pyim")
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
    (setq inhibit-compacting-font-caches t)) 
  (setq frame-title-format
	'(buffer-file-name "%f"
			   (dired-directory dired-directory "%b")))
#+eND_SRC
* theme
  #+BEGIN_SRC emacs-lisp
    (load-theme 'modus-operandi t)
  #+END_SRC
* mode line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :init
    (setq telephone-line-height 24
	  telephone-line-evil-use-short-tag nil)

    (setq telephone-line-primary-left-separator 'telephone-line-flat
	  telephone-line-secondary-left-separator 'telephone-line-nil
	  telephone-line-primary-right-separator 'telephone-line-flat
	  telephone-line-secondary-right-separator 'telephone-line-nil)
    :config
    (telephone-line-mode t))
#+END_SRC
* ace-window
  #+BEGIN_SRC emacs-lisp
    (use-package ace-window
      :bind
      ([remap other-window] . ace-window)
      :config
      (set-face-attribute 'aw-leading-char-face nil
			  :height 3.0
			  :box t))
  #+END_SRC
* evils
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (fset 'evil-visual-update-x-selection 'ignore)
    (setq x-select-enable-clipboard nil)

    (setq evil-want-C-i-jump nil)
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-mode-line-format '(after . mode-line-front-space))
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-numbers)

  (use-package evil-args)

  (use-package evil-lion
    :config
    (evil-lion-mode))

  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (setq magit-define-global-key-bindings t))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC
* org mode
** stock org-mode
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
  (setq org-fontify-whole-heading-line t)
  (setq org-support-shift-select t)
  (setq org-odt-convert-process 'unoconv)
  (setq org-odt-preferred-output-format "docx")
  (setq org-agenda-files (list "~/Documents/Org"))
  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
	   "* TODO %?\n  %i\n  %a")
	  ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
	   "* Notes %?\n  %i\n  %a")
	  ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC
** org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶")
	  org-superstar-prettify-item-bullets t
	  org-superstar-leading-bullet ?\s))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    :config
    (global-company-mode t))
#+END_SRC
* search
** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy)
    #+END_SRC
** Ivy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
	:init (ivy-mode 1)
	:config
	(setq ivy-use-virtual-buffers t)
	(setq ivy-count-format "(%d/%d) ")
	(setq enable-recursive-minibuffers t))
    #+END_SRC
** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper)
    #+END_SRC
** Counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel)
    #+END_SRC
* sr-speedbar
  #+BEGIN_SRC emacs-lisp
    (use-package sr-speedbar
      :defer t)
  #+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode 1))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode    . lsp)
	   (c++-mode  . lsp)
	   (objc-mode . lsp)
	   (go-mode   . lsp)
	   (rust-mode . lsp)
	   (lsp-mode  . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
* key bindings
#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-create-definer my--golden-key ;; all states
      :states '(normal visual motion emacs insert)
      :keymaps 'override)
    (general-create-definer my--normal-key
      :states 'normal
      :keymaps 'override)
    (general-create-definer my--motion-key
      :states 'motion
      :keymaps 'override)
    (general-create-definer my--leader-key
      :states '(normal visual motion insert emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "M-SPC"))

  (my--leader-key
    "E" 'sudo-edit
    "p" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-after))
    "P" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-before))
    "y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank))
    "Y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line)))

  (my--normal-key
    "C-c +" 'evil-numbers/inc-at-pt
    "C-c -" 'evil-numbers/dec-at-pt)

  (my--normal-key
    "L" 'evil-forward-arg
    "H" 'evil-backward-arg
    "K" 'evil-jump-out-args)

  (my--motion-key
    "L" 'evil-forward-arg
    "H" 'evil-backward-arg)

  (my--golden-key
    :keymaps 'evil-inner-text-objects-map
     "a" 'evil-inner-arg
     "a" 'evil-outer-arg)

  ;; org mode
  (my--golden-key
    :prefix "C-c"
    "l" 'org-store-link
    "a" 'org-agenda
    "c" 'org-capture
    "b" 'org-switchb)

  ;; avy, ivy, swiper, counsel
  (my--leader-key
    "f" 'avy-goto-char
    "b" 'ivy-switch-buffer
    "s" 'swiper
    "e" 'counsel-file-file
    "g" 'counsel-git
    "." 'counsel-fzf
    "`" (lambda() (interactive) (counsel-fzf nil "/"))) ;; search from root dir

  (my--golden-key
    "M-x"    'counsel-M-x
    "M-y"    'counsel-yank-pop
    "<f1> f" 'counsel-describe-function
    "<f1> v" 'counsel-describe-variable
    "<f1> l" 'counsel-find-library
    "<f2> i" 'counsel-info-lookup-symbol
    "<f2> u" 'counsel-unicode-char
    "<f2> j" 'counsel-set-variable
    "<f9>"   'sr-speedbar-toggle
    "C-`"    'shell)

  ;; Mouse scrolling in terminal emacs
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    (xterm-mouse-mode 1)
    (my--golden-key
      "<mouse-4>" 'scroll-down-line
      "<mouse-5>" 'scroll-up-line))
#+END_SRC
* modes
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (blink-cursor-mode t)
  (save-place-mode t)
#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
#+END_SRC
