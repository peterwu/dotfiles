# -*- coding: utf-8 -*-
#+STARTUP: overview
#+TITLE: My Emacs Configuration

* auto update packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-last-update-day-filename
     (expand-file-name ".cache/last-package-update-day" user-emacs-directory))
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-interval 13)
    :config
    (auto-package-update-maybe))
#+END_SRC
* variables
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message t
        initial-major-mode 'org-mode
        initial-scratch-message nil)
  (setq backup-inhibited t
        make-backup-files nil
        auto-save-default nil
        auto-save-list-file-prefix nil)
  (setq scroll-step 1
        scroll-margin 1
        scroll-conservatively 10000
        auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
        display-time-format "%R"
        display-time-default-load-average nil)
  (setq visible-bell t
        visible-cursor nil)
  (setq default-input-method "pyim")
  (setq frame-title-format
        '(buffer-file-name "%f"
                           (dired-directory dired-directory "%b")))
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
    (setq inhibit-compacting-font-caches t))
#+END_SRC
* modes
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (column-number-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (save-place-mode t)
  (blink-cursor-mode t)
  (global-hl-line-mode t)
  (global-auto-revert-mode t)
  (global-visual-line-mode t)
  (global-display-line-numbers-mode t)
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'modus-operandi t)
#+END_SRC
* mode line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :custom
    (telephone-line-height 24)
    (telephone-line-evil-use-short-tag nil)

    (telephone-line-primary-left-separator 'telephone-line-flat)
    (telephone-line-secondary-left-separator 'telephone-line-nil)
    (telephone-line-primary-right-separator 'telephone-line-flat)
    (telephone-line-secondary-right-separator 'telephone-line-nil)
    :config
    (telephone-line-mode t))
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :init
      (which-key-mode))
  #+END_SRC
* key bindings
#+BEGIN_SRC emacs-lisp
  (use-package hydra)

  (use-package general
    :init
    (defconst my-leader-key "SPC")
    (defconst my-local-leader-key ",")
    :config
    ;; use shortnames
    (general-evil-setup t))

  (defhydra hydra-zoom (global-map "C-c z")
    "zoom"
    ("+" text-scale-increase "in")
    ("-" text-scale-decrease "out")
    ("0" (lambda () (interactive) (text-scale-set 0)) "reset"))

  ;; shell
  (bind-key "C-`" 'shell)

  ;; Mouse scrolling in terminal emacs
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    (xterm-mouse-mode 1)
    (bind-key "<mouse-4>" 'scroll-down-line)
    (bind-key "<mouse-5>" 'scroll-up-line))
#+END_SRC
* ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
    ([remap other-window] . ace-window)
    :config
    (set-face-attribute 'aw-leading-char-face nil
			:height 3.0
			:box t))
#+END_SRC
* evils
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (x-select-enable-clipboard nil)

    (evil-want-C-i-jump nil)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-mode-line-format '(after . mode-line-front-space))
    :general
    (mmap 
     :prefix my-leader-key :keymaps 'override
     "y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))

    (nvmap
     :prefix my-leader-key
     "p" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-after))
     "P" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-before))
     "y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank))
     "Y" (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line)))
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :custom
    (evil-goggles-pulse t)
    :config  
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-numbers
    :config
    (defhydra hydra-evil-numbers (global-map "C-c n")
      "evil-numbers"
      ("+" evil-numbers/inc-at-pt "increase")
      ("-" evil-numbers/dec-at-pt "decrease")))

  (use-package evil-args
    :general
    (nmap
     "L" 'evil-forward-arg
     "H" 'evil-backward-arg
     "K" 'evil-jump-out-args)

    (mmap
     "L" 'evil-forward-arg
     "H" 'evil-backward-arg)

    (itomap
     "a" 'evil-inner-arg)

    (otomap
     "a" 'evil-outer-arg))

  (use-package evil-lion
    :config
    (evil-lion-mode))

  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :custom
    (magit-define-global-key-bindings t))
#+END_SRC
* sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* org mode
** stock org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure nil
    :hook (org-mode . (lambda ()
			(org-indent-mode)
			(variable-pitch-mode -1)
			(display-line-numbers-mode -1)))
    :bind (("C-c a" . org-agenda)
	   ("C-c b" . org-switchb)
	   ("C-c c" . org-capture)
	   ("C-c l" . org-store-link))  
    :custom
    (org-ellipsis " ▾")
    (org-startup-folded t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-export-with-tags nil)
    (org-export-headline-levels 5)
    (org-hide-emphasis-markers t)
    (org-fontify-whole-heading-line t)
    (org-support-shift-select t)
    (org-startup-with-inline-images t)
    (org-odt-convert-process 'unoconv)
    (org-odt-preferred-output-format "docx")
    (org-agenda-files (list "~/Documents/Org"))
    (org-capture-templates
     '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
	"* TODO %?\n  %i\n  %a")
       ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
	"* Notes %?\n  %i\n  %a")
       ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
	"* %?\nEntered on %U\n  %i\n  %a"))))

  (use-package org-indent
    :ensure nil
    :after org)
#+END_SRC
** org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶"))
    (org-superstar-prettify-item-bullets t)
    (org-superstar-leading-bullet ?\s))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-selection-wrap-around t)
    :config
    (company-tng-mode t))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))
#+END_SRC
* search
** Avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
	:general
	(nmap 
	 :prefix my-leader-key
	 "f" 'avy-goto-char))
  #+END_SRC
** Swiper!
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :init (ivy-mode 1)
      :general
      (nmap
        :prefix my-leader-key
        "b" 'ivy-switch-buffer
        "e" 'counsel-find-file
        "g" 'counsel-git
        "." 'counsel-fzf
        "`" (lambda() (interactive) (counsel-fzf nil "/")))
      :bind
      (("M-x"    . counsel-M-x)
       ("M-y"    . counsel-yank-pop)
       ("<f1> f" . counsel-describe-function)
       ("<f1> v" . counsel-describe-variable)
       ("<f1> l" . counsel-find-library)
       ("<f2> i" . counsel-info-lookup-symbol)
       ("<f2> u" . counsel-unicode-char)
       ("<f2> j" . counsel-set-variable)
       ("C-s"    . swiper))
      :custom
      (ivy-use-virtual-buffers t)
      (ivy-count-format "(%d/%d) ")
      (enable-recursive-minibuffers t)
      (search-default-mode #'char-fold-to-regexp))

    (use-package ivy-rich
      :after ivy
      :init
      (ivy-rich-mode))
  #+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :custom
    (speedbar-use-images nil)
    :bind
    ([f9] . sr-speedbar-toggle))
#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ghook ('(prog-mode-hook
              org-mode-hook)
            #'yas-minor-mode))

  (use-package yasnippet-snippets
    :after yasnippet)
#+END_SRC
* helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :after counsel
    :bind
    ([remap describe-key]      . helpful-key)
    ([remap describe-command]  . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-function] . counsel-describe-function)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable))
#+END_SRC
* flyspell
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :ensure nil
    :custom
    (ispell-program-name "hunspell")
    (ispell-dictionary "en_US")
    :config
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US"))

  (use-package flyspell
    :ensure nil
    :after ispell
    :bind ("C-c s" . flyspell-mode))

  (use-package flyspell-correct
    :after flyspell
    :bind (:map flyspell-mode-map
		("C-;" . flyspell-correct-wrapper)))

  (use-package flyspell-correct-ivy
    :after (flyspell-correct ivy))
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :after lsp-mode
    :hook (lsp-mode . flycheck-mode))
#+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode    . lsp)
           (c++-mode  . lsp)
           (objc-mode . lsp)
           (go-mode   . lsp)
           (rust-mode . lsp)
           (lsp-mode  . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+END_SRC
* osc52 support
#+BEGIN_SRC emacs-lisp
  ;; osc52 support under supporting terminals and tmux
  (use-package osc52
    :unless window-system
    :load-path "mine/"
    :config
    (osc52-set-cut-function))
#+END_SRC
* misc
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
  (use-package yaml-mode)
#+END_SRC
