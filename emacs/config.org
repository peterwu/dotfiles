# -*- coding: utf-8 -*-
#+STARTUP: overview

My Emacs Configuration

* Package Management 
  This section documents what packages that have been installed and configured.
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :init
       (which-key-mode))
   #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp
   (load-theme 'modus-operandi t)
   #+END_SRC
** ace-window
   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :bind
       ([remap other-window] . ace-window)
       :config
       (set-face-attribute 'aw-leading-char-face nil
			   :height 3.0
			   :box t))
   #+END_SRC
** evil and related packages
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (fset 'evil-visual-update-x-selection 'ignore)
    ;; (setq x-select-enable-clipboard nil)
    :config
    (evil-mode 1)
    (setq evil-mode-line-format '(after . mode-line-front-space)))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)

    ;; bind evil-jump-out-args
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))

  (use-package evil-lion
    :config
    (evil-lion-mode))

  (use-package evil-exchange
    :config
    (evil-exchange-install))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)

  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC
** org mode
*** stock org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-hide-emphasis-markers t)
    (setq org-fontify-whole-heading-line t)
    (setq org-support-shift-select t)
    (setq org-odt-convert-process 'unoconv)
    (setq org-odt-preferred-output-format "docx")
    (setq org-agenda-files (list "~/Documents/Org"))
    (setq org-capture-templates
	  '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
	     "* TODO %?\n  %i\n  %a")
	    ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
	     "* Notes %?\n  %i\n  %a")
	    ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
	     "* %?\nEntered on %U\n  %i\n  %a")))
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c b" . org-switchb)))
#+END_SRC
*** org-superstar
#+BEGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶")
	  org-superstar-prettify-item-bullets t
	  org-superstar-leading-bullet ?\s))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    (global-company-mode t))
#+END_SRC
** search
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
	:bind ("M-s" . avy-goto-char))
    #+END_SRC
*** Ivy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
	:init (ivy-mode 1)
	:bind (("C-c C-r" . ivy-resume)
	       ("<f6>" . ivy-resume))
	:config
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t))
    #+END_SRC
*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:bind ("C-s" . swiper))
    #+END_SRC
*** Counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
	:bind
	(("C-x C-f" . counsel-find-file)
	 ("<f1> u" . counsel-unicode-char)))
    #+END_SRC
** treemacs
   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
       :defer t
       :bind
       (([f9] . treemacs)
	("M-0" . treemacs-select-window)))
#+END_SRC
*** Evil support
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+END_SRC
*** Use pretty icons
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
#+END_SRC
** yasnippets
#+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode 1))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c-mode . lsp)
	   (c++-mode . lsp)
	   (objc-mode . lsp)
	   (go-mode . lsp)
	   (rust-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+END_SRC
** various modes for programming languages and file types
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
#+END_SRC
** misc.
#+BEGIN_SRC emacs-lisp
  
#+END_SRC
* Personal Settings
** Variables
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t
	initial-major-mode 'org-mode
	initial-scratch-message nil)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
	display-time-format "%R"
	display-time-default-load-average nil)
  (setq visible-bell t
	visible-cursor nil)
  (setq default-input-method "pyim")
  (when (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
    (setq inhibit-compacting-font-caches t)) 
  (setq frame-title-format
	  '(buffer-file-name "%f"
	    (dired-directory dired-directory "%b")))
#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (blink-cursor-mode t)
  (save-place-mode t)
#+END_SRC
** Faces
#+BEGIN_SRC emacs-lisp
  ;; default face
  (set-face-attribute 'default nil
		      :family "Iosevka Fusion"
		      :foundry "outline"
		      :height 130)
#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-~") 'eshell)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;;;; Mouse scrolling in terminal emacs
  (unless (display-graphic-p)
    ;; activate mouse-based scrolling
    (xterm-mouse-mode 1)
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :init
    (setq telephone-line-height 24
	  telephone-line-evil-use-short-tag nil)

    (setq telephone-line-primary-left-separator 'telephone-line-flat
	  telephone-line-secondary-left-separator 'telephone-line-nil
	  telephone-line-primary-right-separator 'telephone-line-flat
	  telephone-line-secondary-right-separator 'telephone-line-nil)
    :config
    (telephone-line-mode t))
#+END_SRC
** EShell prompt
#+BEGIN_SRC emacs-lisp
  (setq eshell-highlight-prompt nil)
#+END_SRC
