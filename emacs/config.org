# -*- coding: utf-8 -*-
#+startup: overview
#+title: My Emacs Configuration

* /scaffolding/
** defaults
   #+begin_src emacs-lisp
     (use-package emacs
       :init
       (prefer-coding-system 'utf-8)
       (set-default-coding-systems 'utf-8)
       (set-language-environment 'utf-8)
       (set-selection-coding-system 'utf-8)
       (set-terminal-coding-system 'utf-8)
       :custom
       (auto-save-default nil)
       (auto-save-list-file-prefix nil)
       (backup-inhibited t)
       (bidi-inhibit-bpa t)
       (fill-column 76)
       (frame-title-format
        '((:eval
           (if (buffer-file-name)
               (abbreviate-file-name (buffer-file-name))
             "%b"))))
       (indent-tabs-mode nil)
       (inhibit-startup-buffer-menu t)
       (inhibit-startup-echo-area-message t)
       (inhibit-startup-screen t)
       (initial-buffer-choice t)
       (initial-major-mode 'org-mode)
       (initial-scratch-message nil)
       (make-backup-files nil)
       (nsm-settings-file (expand-file-name "cache/network-security.data" user-emacs-directory))
       (scroll-conservatively 10000)
       (scroll-margin 1)
       (scroll-preserve-screen-position t)
       (scroll-step 1)
       (tab-always-indent 'complete)
       (tab-width 4)
       (use-short-answers t)
       (visible-bell t)
       :bind (:map mode-specific-map
                   ([return] . pp-macroexpand-last-sexp))
       :hook (text-mode . turn-on-auto-fill))
   #+end_src
** mode line
   #+begin_src emacs-lisp
     (use-package emacs
       :preface
       (defun wy:ellipsize-file-name (file-name max-length)
         (let* ((ellipsis (if (char-displayable-p ?…) "…" "..."))
                (left (/ max-length 2))
                (center (length ellipsis))
                (right (- max-length left center)))
           (if (> (length file-name) max-length)
               (concat
                (substring file-name 0 (1- left))
                " "
                ellipsis
                " "
                (substring file-name (- (length file-name) (1- right))))
             file-name)))

       (defun wy:mode-line-render (left right)
         "Return a string of `window-total-width' length.
         Containing LEFT, and RIGHT aligned respectively."
         (let ((available-width
                (- (window-total-width)
                   (string-width (format-mode-line left))
                   (string-width (format-mode-line right)))))
           (append left
                   (list (format (format "%%%ds" available-width) ""))
                   right)))

       (defvar-local wy:evil-mode-line-tag
         '(:eval (propertize evil-mode-line-tag
                             'face '(:foreground "#7f10d0" :weight bold))))
       (put 'wy:evil-mode-line-tag 'risky-local-variable t)

       (defvar-local wy:mode-line-buffer-identification
         '(:eval (if (buffer-file-name)
                     (propertize (wy:ellipsize-file-name
                                  (file-name-nondirectory (buffer-file-name))
                                  36)
                                 'help-echo (abbreviate-file-name (buffer-file-name))
                                 'face '(:inherit mode-line-emphasis)
                                 'mouse-face 'mode-line-highlight)
                   (propertize (buffer-name)
                               'help-echo "Buffer name"
                               'face '(:inherit mode-line-buffer-id)
                               'mouse-face 'mode-line-highlight))))
       (put 'wy:mode-line-buffer-identification 'risky-local-variable t)

       (defvar-local wy:mode-line-git-status
         ;; Format: (defun vc-default-mode-line-string (backend file) in vc-hooks.el
         ;;   \"BACKEND-REV\"        if the file is up-to-date
         ;;   \"BACKEND:REV\"        if the file is edited (or locked by the calling user)
         ;;   \"BACKEND:LOCKER:REV\" if the file is locked by somebody else
         ;;   \"BACKEND@REV\"        if the file was locally added
         ;;   \"BACKEND!REV\"        if the file contains conflicts or was removed
         ;;   \"BACKEND?REV\"        if the file is under VC, but is missing

         '(:eval (when vc-mode
                   (let* ((git-status (vc-git-mode-line-string (buffer-file-name)))
                          (status (replace-regexp-in-string "^Git" "" git-status))
                          (class (substring-no-properties status 0 1))
                          (locked? (string-match
                                    (rx (and
                                         line-start ":"
                                         (one-or-more alnum) ":"
                                         (group (one-or-more alnum))))
                                    status))
                          (branch
                           (if locked?  (match-string 1 status)
                             (substring status 1)))
                          (git-mode-line-status (concat "(" branch ")")))
                     (cond
                      ;; up-to-date
                      ((string-equal "-" class)
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-up-to-date-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ;; locked
                      (locked?
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-locked-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ;; edited
                      ((string-equal ":" class)
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-edited-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ;; locally added
                      ((string-equal "@" class)
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-locally-added-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ;; removed or conflicting
                      ((string-equal "!" class)
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-removed-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ;; missing
                      ((string-equal "?" class)
                       (propertize git-mode-line-status
                                   'face '(:inherit vc-missing-state :weight bold)
                                   'mouse-face 'mode-line-highlight))
                      ((t git-mode-line-status)))))))
       (put 'wy:mode-line-git-status 'risky-local-variable t)

       (defvar-local wy:mode-line-position
         '(:propertize "(%l,%C)"
                       help-echo "(Line,Column)"
                       mouse-face mode-line-highlight))
       (put 'wy:mode-line-position 'risky-local-variable t)

       (defvar-local wy:mode-line-modes
         '(:eval (and (or (and (consp mode-name)
                               (setcar mode-name
                                       (propertize (car mode-name)
                                                   'face '(:inherit mode-line-emphasis))))
                          (setq mode-name
                                (propertize mode-name
                                            'face '(:inherit mode-line-emphasis))))
                      minions-mode-line-modes)))
       (put 'wy:mode-line-modes 'risky-local-variable t)

       (defvar-local wy:mode-line-percent-position
         '(:eval (let ((p (format-mode-line "%p")))
                   (cond
                    ((string-equal p "All")
                     (propertize "All" 'help-echo p 'mouse-face 'mode-line-highlight))
                    ((string-equal p "Top")
                     (propertize "Top" 'help-echo p 'mouse-face 'mode-line-highlight))
                    ((string-equal p "Bottom")
                     (propertize "Bot" 'help-echo p 'mouse-face 'mode-line-highlight))
                    (t
                     (propertize (concat p  "%%")
                                 'help-echo "Position"
                                 'mouse-face 'mode-line-highlight))))))
       (put 'wy:mode-line-percent-position 'risky-local-variable t)

       (defvar-local wy:mode-line-buffer-size
         '(:propertize "%I"
                       help-echo "Size"
                       mouse-face mode-line-highlight))
       (put 'wy:mode-line-buffer-size 'risky-local-variable t)
       :custom
       (mode-line-format
        '(:eval
          (wy:mode-line-render
           ;; left hand side
           (list
            "%e"
            wy:evil-mode-line-tag
            wy:mode-line-buffer-identification
            " "
            wy:mode-line-git-status)

           ;; right hand side
           (list
            wy:mode-line-buffer-size
            " "
            wy:mode-line-modes
            wy:mode-line-percent-position
            " ")))))
   #+end_src
** msft specifics
   #+begin_src emacs-lisp
     (use-package emacs
       :when (eq system-type 'windows-nt)
       :init
       (set-selection-coding-system 'utf-16le-dos)
       :custom
       (w32-get-true-file-attributes nil)
       (inhibit-compacting-font-caches t))
   #+end_src
** theme
   #+begin_src emacs-lisp
     (use-package emacs
       :custom
       (modus-themes-syntax '(green-strings yellow-comments))
       :config
       ;; Load the theme of my choice: operandi
       (load-theme 'modus-operandi))
   #+end_src
* autorevert
  #+begin_src emacs-lisp
    (use-package autorevert
      :custom (auto-revert-verbose t)
      :config
      (global-auto-revert-mode +1))
  #+end_src
* avy
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :after evil
      :custom (avy-background t)
      :bind (:map isearch-mode-map
                  ("C-'" . avy-isearch))
      :bind (:map wy:evil-jump-map
                  ("f" . avy-goto-char)
                  ("r" . avy-resume)
                  ("s" . avy-goto-char-2)
                  ("j" . avy-goto-char-timer)
                  ("w" . avy-goto-word-1)
                  ("W" . avy-goto-word-0)))
  #+end_src
* battery
  #+begin_src emacs-lisp
    (use-package battery
      :after evil
      :custom
      (battery-load-low 20)
      (battery-load-critical 10)
      (battery-mode-line-format "[%b%p%%]")
      (battery-mode-line-limit 95)
      (battery-update-interval 180)
      :bind (:map wy:evil-toggle-map
                  ("b" . display-battery-mode))
      :config
      (display-battery-mode -1))
  #+end_src
* bookmark
  #+begin_src emacs-lisp
    (use-package bookmark
      :custom
      (bookmark-default-file
       (expand-file-name "cache/bookmarks" user-emacs-directory)))
  #+end_src
* company, /et al./
** company
   #+begin_src emacs-lisp
     (use-package company
       :ensure t
       :init
       (global-company-mode +1)
       :custom
       (company-idle-delay 0)
       (company-minimum-prefix-length 1)
       (company-selection-wrap-around t)
       :config
       (company-tng-mode +1))
   #+end_src
** company-box
   #+begin_src emacs-lisp
     (use-package company-box
       :ensure t
       :after company
       :hook (company-mode . company-box-mode))
   #+end_src
* custom
  #+begin_src emacs-lisp
    (use-package custom
      :init
      (defvar wy:custom-file (expand-file-name "cache/custom.el" user-emacs-directory))
      (setq custom-file wy:custom-file)
      :hook (after-init . (lambda ()
                            (let ((file wy:custom-file))
                              (unless (file-exists-p file)
                                (make-empty-file file))
                              (load-file file)))))
  #+end_src
* dabbrev
  #+begin_src emacs-lisp
    (use-package dabbrev
      :after (minibuffer icomplete)
      :custom
      (dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
      (dabbrev-abbrev-skip-leading-regexp "[$*/=']")
      (dabbrev-backward-only nil)
      (dabbrev-case-distinction 'case-replace)
      (dabbrev-case-fold-search t)
      (dabbrev-case-replace 'case-replace)
      (dabbrev-check-other-buffers t)
      (dabbrev-eliminate-newlines t)
      (dabbrev-upcase-means-case-search t))
  #+end_src
* dash
  #+begin_src emacs-lisp
    (use-package dash
      :ensure t
      :config
      (global-dash-fontify-mode +1))
  #+end_src
* delsel
  #+begin_src emacs-lisp
    (use-package delsel
      :config
      (delete-selection-mode +1))
  #+end_src
* diff-mode
  #+begin_src emacs-lisp
    (use-package diff-mode
      :custom
      (diff-advance-after-apply-hunk t)
      (diff-default-read-only t)
      (diff-font-lock-prettify nil)
      (diff-font-lock-syntax 'hunk-also)
      (diff-refine nil)
      (diff-update-on-the-fly t))
  #+end_src
* dired, /et al./
** dired
   #+begin_src emacs-lisp
     (use-package dired
       :custom
       (delete-by-moving-to-trash t)
       (dired-dwim-target t)
       (dired-listing-switches
        "-AGFhlv --group-directories-first --time-style=long-iso")
       (dired-recursive-copies 'always)
       (dired-recursive-deletes 'always)
       :hook ((dired-mode . dired-hide-details-mode)
              (dired-mode . hl-line-mode)))
   #+end_src
** dired-aux
   #+begin_src emacs-lisp
     (use-package dired-aux
       :demand t
       :custom
       (dired-create-destination-dirs 'ask)
       (dired-isearch-filenames 'dwim)
       (dired-vc-rename-file t)
       :bind (:map dired-mode-map
                   ("C-+" . dired-create-empty-file)))
   #+end_src
** dired-sidebar
   #+begin_src emacs-lisp
     (use-package dired-sidebar
       :ensure t
       :after evil
       :custom (dired-sidebar-set-width 41)
       :bind ("<f9>" . dired-sidebar-toggle-sidebar)
       :bind (:map wy:evil-toggle-map
                   ("t" . dired-sidebar-toggle-sidebar))
       :commands (dired-sidebar-toggle-sidebar))
   #+end_src
** dired-x
   #+begin_src emacs-lisp
     (use-package dired-x
       :after (dired evil)
       :demand t
       :custom
       (dired-bind-info nil)
       (dired-bind-man nil)
       (dired-clean-confirm-killing-deleted-buffers t)
       (dired-clean-up-buffers-too t)
       (dired-guess-shell-alist-user '(("\\.pdf$" "xdg-open * &")))
       (dired-x-hands-off-my-keys t)
       :bind (:map wy:evil-dired-map
                   ("j" . dired-jump)
                   ("J" . dired-jump-other-window))
       :bind (:map dired-mode-map
                   ("I" . dired-info)))
   #+end_src
** image-dired
   #+begin_src emacs-lisp
     (use-package image-dired
       :custom
       (image-dired-external-viewer "xdg-open")
       (image-dired-thumb-margin 2)
       (image-dired-thumb-relief 0)
       (image-dired-thumb-size 80)
       (image-dired-thumbs-per-row 4)
       :bind (:map image-dired-thumbnail-mode-map
                   ([return] . image-dired-thumbnail-display-external)))
   #+end_src
** wdired
   #+begin_src emacs-lisp
     (use-package wdired
       :after dired
       :commands wdired-change-to-wdired-mode
       :custom
       (wdired-allow-to-change-permissions t)
       (wdired-create-parent-directories t))
   #+end_src
* display-line-numbers
  #+begin_src emacs-lisp
    (use-package display-line-numbers
      :after evil
      :custom (display-line-numbers-type 'relative)
      :hook ((text-mode prog-mode). display-line-numbers-mode)
      :bind (:map wy:evil-toggle-map
                  ("n" . display-line-numbers-mode)))
  #+end_src
* doc-view
  #+begin_src emacs-lisp
    (use-package doc-view
      :custom (doc-view-resolution 192))
  #+end_src
* eglot
  #+begin_src emacs-lisp
    (use-package eglot
      :ensure t
      :hook ((c-mode
              c++-mode) . eglot-ensure))
  #+end_src
* eldoc
  #+begin_src emacs-lisp
    (use-package eldoc
      :hook ((emacs-lisp-mode
              ielm-mode
              lisp-interaction-mode) . eldoc-mode))
  #+end_src
* electric
  #+begin_src emacs-lisp
    (use-package electric
      :custom
      (electric-pair-pairs
       '((8216 . 8217)
         (8220 . 8221)
         (171 . 187)))
      (electric-pair-preserve-balance t)
      (electric-pair-skip-whitespace nil)
      (electric-pair-skip-whitespace-chars
       '(9
         10
         32))

      (electric-quote-context-sensitive t)
      (electric-quote-paragraph t)
      (electric-quote-replace-double t)
      (electric-quote-string nil)
      :config
      (electric-indent-mode +1)
      (electric-pair-mode +1)
      (electric-quote-mode +1))
  #+end_src
* erc
  #+begin_src emacs-lisp
    (use-package erc
      :custom
      (erc-nick "ixlxi")
      (erc-user-full-name "iExcel")
      (erc-server "irc.libera.chat")
      (erc-port "6697"))
  #+end_src
* evil, /et al./
** evil
   #+begin_src emacs-lisp
     (use-package evil
       :ensure t
       :preface
       (defun wy:colorize-mode-line-on-evil-state ()
         (let* ((default 'modus-themes-intense-neutral)
                (face (cond ((minibufferp) default)
                            ((evil-emacs-state-p) 'modus-themes-subtle-magenta)
                            ((evil-insert-state-p) 'modus-themes-subtle-green)
                            ((evil-motion-state-p) 'modus-themes-subtle-blue)
                            ((evil-normal-state-p) default)
                            ((evil-operator-state-p) 'modus-themes-subtle-yellow)
                            ((evil-replace-state-p) 'modus-themes-subtle-red)
                            ((evil-visual-state-p)  'modus-themes-subtle-cyan)
                            (t default))))
           (set-face-attribute 'mode-line nil
                               :foreground (face-foreground face)
                               :background (face-background face))))

       (defun wy:define-evil-commands ()
         (evil-define-operator wy:evil-yank-to-clipboard (beg end type register yank-handler)
           :move-point nil
           :repeat nil
           (interactive "<R><x><y>")
           (evil-yank beg end type ?+ yank-handler))

         (evil-define-operator wy:evil-yank-line-to-clipboard (beg end type register)
           :motion evil-line-or-visual-line
           :move-point nil
           (interactive "<R><x>")
           (evil-yank-line beg end type ?+ yank-handler))

         (evil-define-command wy:evil-paste-before-from-clipboard (count &optional register yank-handler)
           :suppress-operator t
           (interactive "*P<x>")
           (evil-paste-before count ?+ yank-handler))

         (evil-define-command wy:evil-paste-after-from-clipboard (count &optional register yank-handler)
           :suppress-operator t
           (interactive "*P<x>")
           (evil-paste-after count ?+ yank-handler)))

       (defun wy:ignore-some-evil-functions ()
         (fset 'evil-visual-update-x-selection 'ignore))
       :custom
       (evil-echo-state nil)
       (evil-mode-line-format nil)
       (evil-respect-visual-line-mode nil)
       (evil-undo-system 'undo-redo)
       (evil-want-C-i-jump nil)
       (evil-want-Y-yank-to-eol t)
       (evil-want-integration t)
       (evil-want-keybinding nil)
       :bind (:map evil-motion-state-map
                   :prefix "<SPC>" :prefix-map wy:evil-leader-mmap)
       :bind (:map evil-normal-state-map
                   :prefix "<SPC>" :prefix-map wy:evil-leader-nmap)
       :bind (:map wy:evil-leader-mmap
                   ("y" . wy:evil-yank-to-clipboard)
                   ("Y" . wy:evil-yank-line-to-clipboard))
       :bind (:map wy:evil-leader-nmap
                   ("p" . wy:evil-paste-after-from-clipboard)
                   ("P" . wy:evil-paste-before-from-clipboard)
                   ("z" . text-scale-adjust))

       :bind (:map wy:evil-leader-nmap
                   :prefix "b" :prefix-map wy:evil-buffer-map)
       :bind-keymap ("C-c b" . wy:evil-buffer-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "d" :prefix-map wy:evil-dired-map)
       :bind-keymap ("C-c d" . wy:evil-dired-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "f" :prefix-map wy:evil-find-map)
       :bind-keymap ("C-c f" . wy:evil-find-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "g" :prefix-map wy:evil-magit-map)
       :bind-keymap ("C-c g" . wy:evil-magit-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "j" :prefix-map wy:evil-jump-map)
       :bind-keymap ("C-c j" . wy:evil-jump-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "o" :prefix-map wy:evil-org-map)
       :bind-keymap ("C-c o" . wy:evil-org-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "s" :prefix-map wy:evil-spell-map)
       :bind-keymap ("C-c s" . wy:evil-spell-map)

       :bind (:map wy:evil-leader-nmap
                   :prefix "t" :prefix-map wy:evil-toggle-map)
       :bind-keymap ("C-c t" . wy:evil-toggle-map)

       :hook ((post-command    . wy:colorize-mode-line-on-evil-state)
              (evil-after-load . wy:define-evil-commands)
              (evil-after-load . wy:ignore-some-evil-functions))
       :config
       (evil-mode +1))
   #+end_src
** evil-args
   #+begin_src emacs-lisp
     (use-package evil-args
       :ensure t
       :bind (:map evil-inner-text-objects-map
                   ("a" . evil-inner-arg))
       :bind (:map evil-outer-text-objects-map
                   ("a" . evil-outer-arg))
       :bind (:map evil-normal-state-map
                   ("H" . evil-backward-arg)
                   ("L" . evil-forward-arg)
                   ("K" . evil-jump-out-args))
       :bind (:map evil-motion-state-map
                   ("H" . evil-backward-arg)
                   ("L" . evil-forward-arg)))
   #+end_src
** evil-collection
   #+begin_src emacs-lisp
     (use-package evil-collection
       :ensure t
       :after evil
       :custom (evil-collection-setup-minibuffer t)
       :init (evil-collection-init))
   #+end_src
** evil-commentary
   #+begin_src emacs-lisp
     (use-package evil-commentary
       :ensure t
       :config
       (evil-commentary-mode +1))
   #+end_src
** evil-exchange
   #+begin_src emacs-lisp
     (use-package evil-exchange
       :ensure t
       :config
       (evil-exchange-install))
   #+end_src
** evil-goggles
   #+begin_src emacs-lisp
     (use-package evil-goggles
       :ensure t
       :preface
       (defun wy:add-evil-commands-to-goggles ()
         (let ((commands (list
                          '(wy:evil-yank-to-clipboard
                            :face evil-goggles-yank-face
                            :switch evil-goggles-enable-yank
                            :advice evil-goggles--generic-async-advice)

                          '(wy:evil-yank-line-to-clipboard
                            :face evil-goggles-yank-face
                            :switch evil-goggles-enable-yank
                            :advice evil-goggles--generic-async-advice)

                          '(wy:evil-paste-before-from-clipboard
                            :face evil-goggles-paste-face
                            :switch evil-goggles-enable-paste
                            :advice evil-goggles--paste-advice :after t)

                          '(wy:evil-paste-after-from-clipboard
                            :face evil-goggles-paste-face
                            :switch evil-goggles-enable-paste
                            :advice evil-goggles--paste-advice :after t))))
           (dolist (command commands)
             (add-to-list 'evil-goggles--commands command))))
       :custom
       (evil-goggles-async-duration 0.900)
       (evil-goggles-blocking-duration 0.100)
       (evil-goggles-pulse t)
       :config
       (wy:add-evil-commands-to-goggles)
       (evil-goggles-mode +1))
   #+end_src
** evil-lion
   #+begin_src emacs-lisp
     (use-package evil-lion
       :ensure t
       :config
       (evil-lion-mode +1))
   #+end_src
** evil-matchit
   #+begin_src emacs-lisp
     (use-package evil-matchit
       :ensure t
       :config
       (global-evil-matchit-mode +1))
   #+end_src
** evil-numbers
   #+begin_src emacs-lisp
     (use-package evil-numbers
       :ensure t
       :demand t
       :after evil
       :bind (:map wy:evil-leader-nmap
                   ("C-a" . evil-numbers/inc-at-pt)
                   ("C-x" . evil-numbers/dec-at-pt)
                   ("M-a" . evil-numbers/inc-at-pt-incremental)
                   ("M-x" . evil-numbers/dec-at-pt-incremental)))
   #+end_src
** evil-surround
   #+begin_src emacs-lisp
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode +1))
   #+end_src
* flymake
  #+begin_src emacs-lisp
    (use-package flymake
      :after lsp-mode
      :commands flymake-mode
      :custom
      (flymake-fringe-indicator-position 'left-fringe)
      (flymake-no-changes-timeout nil)
      (flymake-proc-compilation-prevents-syntax-check t)
      (flymake-start-on-flymake-mode t)
      (flymake-start-on-save-buffer t)
      (flymake-suppress-zero-counters t)
      (flymake-wrap-around nil)
      :hook (lsp-mode . flymake-mode)
      :bind (:map flymake-mode-map
                  ("C-c ! s" . flymake-start)
                  ("C-c ! d" . flymake-show-diagnostics-buffer)
                  ("C-c ! n" . flymake-goto-next-error)
                  ("C-c ! p" . flymake-goto-prev-error)))
  #+end_src
* flyspell, /et al./
** ispell
   #+begin_src emacs-lisp
     (use-package ispell
       :unless (eq system-type 'windows-nt)
       :custom
       (ispell-program-name "hunspell")
       (ispell-dictionary "en_US")
       :config
       (ispell-set-spellchecker-params)
       (ispell-hunspell-add-multi-dic "en_US"))
   #+end_src
** flyspell
   #+begin_src emacs-lisp
     (use-package flyspell
       :unless (eq system-type 'windows-nt)
       :after (ispell evil)
       :custom
       (flyspell-issue-message-flag nil)
       (flyspell-issue-welcome-flag nil)
       :bind (:map wy:evil-spell-map
                   ("s" . flyspell-mode)))
   #+end_src
* frame
  #+begin_src emacs-lisp
    (use-package frame
      :custom
      (blink-cursor-blinks 20)
      (blink-cursor-delay 0.2)
      (blink-cursor-interval 0.5)
      (cursor-in-non-selected-windows 'hollow)
      (cursor-type '(hbar . 3))
      :config
      (blink-cursor-mode +1))
  #+end_src
* gdb
  #+begin_src emacs-lisp
    (use-package gdb-mi
      :custom
      (gdb-many-windows t)
      (gdb-show-main t))
  #+end_src
* gnus
  #+begin_src emacs-lisp
    (use-package gnus
      :custom
      (user-full-name "Peter Wu")
      (user-mail-address "peterwu@hotmail.com")

      (gnus-home-directory (expand-file-name "gnus" user-emacs-directory))
      (gnus-startup-file (expand-file-name ".newsrc" gnus-home-directory))
      (gnus-directory (expand-file-name "news" gnus-home-directory))
      (message-directory (expand-file-name "mail" gnus-home-directory))

      (gnus-always-read-dribble-file nil)
      (gnus-asynchronous t)
      (gnus-blocked-images nil)
      (gnus-expert-user t)
      (gnus-interactive-exit nil)
      (gnus-novice-user nil)
      (gnus-show-threads t)
      (gnus-use-dribble-file nil)

      (gnus-select-method '(nntp "news.gmane.io"))
      (gnus-secondary-select-methods
       '((nnimap "hotmail"
                 (nnimap-address "outlook.office365.com")
                 (nnimap-server-port 993)
                 (nnimap-stream ssl)
                 (nnimap-authenticator login))))

      (send-mail-function 'smtpmail-send-it)
      (smtpmail-smtp-server "smtp.office365.com")
      (smtpmail-smtp-service 587)
      :hook (gnus-group-mode . gnus-topic-mode))
  #+end_src
* help
  #+begin_src emacs-lisp
    (use-package help
      :defer t
      :config
      (temp-buffer-resize-mode +1))
  #+end_src
* hl-line
  #+begin_src emacs-lisp
    (use-package hl-line
      :config
      (global-hl-line-mode +1))
  #+end_src
* ibuffer
  #+begin_src emacs-lisp
    (use-package ibuffer
      :demand t
      :custom
      (ibuffer-default-shrink-to-minimum-size nil)
      (ibuffer-default-sorting-mode 'filename/process)
      (ibuffer-display-summary nil)
      (ibuffer-expert t)
      (ibuffer-formats
       '((mark modified read-only locked " "
               (name 30 30 :left :elide)
               " "
               (size 9 -1 :right)
               " "
               (mode 16 16 :left :elide)
               " " filename-and-process)
         (mark " "
               (name 16 -1)
               " " filename)))
      (ibuffer-movement-cycle nil)
      (ibuffer-old-time 48)
      (ibuffer-saved-filter-groups nil)
      (ibuffer-show-empty-filter-groups nil)
      (ibuffer-use-header-line t)
      (ibuffer-use-other-window nil)
      :hook (ibuffer-mode . hl-line-mode)
      :bind (:map wy:evil-buffer-map
                  ("l" . ibuffer))
      :bind (:map ibuffer-mode-map
                  ("* f" . ibuffer-mark-by-file-name-regexp)
                  ("* g" . ibuffer-mark-by-content-regexp) ; "g" is for "grep"
                  ("* n" . ibuffer-mark-by-name-regexp)
                  ("s n" . ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
                  ("/ g" . ibuffer-filter-by-content)))
  #+end_src
* icomplete
  #+begin_src emacs-lisp
    (use-package icomplete
      :demand t
      :custom
      (icomplete-hide-common-prefix nil)
      (icomplete-in-buffer t)
      (icomplete-separator (propertize " · " 'face 'shadow))
      (icomplete-show-matches-on-no-input t)
      (icomplete-tidy-shadowed-file-names t)
      (icomplete-with-completion-tables t)
      :bind (:map icomplete-minibuffer-map
                  ([left]  . icomplete-backward-completions)
                  ([right] . icomplete-forward-completions)
                  ([up]    . icomplete-backward-completions)
                  ([down]  . icomplete-forward-completions))
      :config
      (fido-mode +1))
  #+end_src
* ido
  #+begin_src emacs-lisp
    (use-package ido
      :demand t
      :preface
      (defun wy:customize-ido-decorations ()
        (setf (nth 2 ido-decorations)
              (propertize " · " 'face 'shadow))
        (setf (nth 3 ido-decorations)
              (propertize
               (concat " · " (if (char-displayable-p ?…) "…" "..."))
               'face 'shadow)))
      :custom
      (ido-default-buffer-method 'selected-window)
      (ido-default-file-method 'selected-window)
      (ido-enable-flex-matching t)
      (ido-everywhere t)
      (ido-save-directory-list-file
       (expand-file-name "cache/ido.last" user-emacs-directory))
      (ido-show-dot-for-dired t)
      (ido-use-virtual-buffers t)
      :bind (:map ido-completion-map
                  ([left]  . ido-prev-match)
                  ([right] . ido-next-match)
                  ([up]    . ido-prev-match)
                  ([down]  . ido-next-match))
      :bind (:map wy:evil-buffer-map
                  ("b" . ido-switch-buffer))
      :hook (ido-minibuffer-setup . wy:customize-ido-decorations)
      :config
      (ido-mode +1))
  #+end_src
* imenu
  #+begin_src emacs-lisp
    (use-package imenu
      :custom
      (imenu-auto-rescan t)
      (imenu-auto-rescan-maxout 600000)
      (imenu-eager-completion-buffer t)
      (imenu-level-separator "/")
      (imenu-max-item-length 100)
      (imenu-space-replacement " ")
      (imenu-use-markers t)
      (imenu-use-popup-menu nil)
      :bind ("M-i" . imenu))
  #+end_src
* isearch
  #+begin_src emacs-lisp
    (use-package isearch
      :custom
      (isearch-allow-scroll 'unlimited)
      (isearch-lax-whitespace t)
      (isearch-lazy-count t)
      (isearch-lazy-highlight t)
      (isearch-regexp-lax-whitespace nil)
      (isearch-yank-on-move 'shift)
      (lazy-count-prefix-format nil)
      (lazy-count-suffix-format " (%s/%s)")
      (search-highlight t)
      (search-whitespace-regexp ".*?")
      :bind (:map minibuffer-local-isearch-map
                  ("M-/" . isearch-complete-edit))
      :bind (:map isearch-mode-map
                  ("C-g" . isearch-cancel)       ; instead of `isearch-abort'
                  ("M-/" . isearch-complete)))
  #+end_src
* magit
  #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :bind (:map wy:evil-magit-map
                  ("g" . magit-status)
                  ("j" . magit-dispatch)
                  ("J" . magit-file-dispatch)
                  ("r" . vc-refresh-state)))
  #+end_src
* minibuffer
  #+begin_src emacs-lisp
    (use-package minibuffer
      :custom
      (completion-cycle-threshold 12)
      (completions-detailed t)
      (completions-format 'one-column)
      (completion-ignore-case t)
      (completion-styles '(initials partial-completion flex))
      (enable-recursive-minibuffers t)
      (minibuffer-eldef-shorten-default t)
      (read-buffer-completion-ignore-case t)
      (read-file-name-completion-ignore-case t)
      (resize-mini-windows t)
      :config
      (minibuffer-depth-indicate-mode +1)
      (minibuffer-electric-default-mode +1))
  #+end_src
* minions
  #+begin_src emacs-lisp
    (use-package minions
      :ensure t
      :custom
      (minions-mode-line-delimiters '("" . ""))
      (minions-mode-line-face 'mode-line-emphasis)
      (minions-mode-line-lighter (if (char-displayable-p ?…) "…" "...")))
  #+end_src
* mouse
  #+begin_src emacs-lisp
    (use-package mouse
      :when window-system
      :custom
      (make-pointer-invisible t)
      (mouse-drag-copy-region nil)
      (mouse-wheel-follow-mouse t)
      (mouse-wheel-progressive-speed t)
      (mouse-wheel-scroll-amount
       '(1
         ((shift) . 5)
         ((meta) . 0.5)
         ((control) . text-scale)))
      :config
      (mouse-wheel-mode +1))
  #+end_src
* org, /et al./
** org
   #+begin_src emacs-lisp
     (use-package org
       :after evil
       :custom
       (org-ellipsis " ▾")
       (org-export-headline-levels 5)
       (org-export-with-tags nil)
       (org-fontify-whole-heading-line t)
       (org-hide-emphasis-markers t)
       (org-log-done 'time)
       (org-log-into-drawer t)
       (org-odt-convert-process 'unoconv)
       (org-odt-preferred-output-format "docx")
       (org-src-fontify-natively t)
       (org-src-tab-acts-natively t)
       (org-startup-folded t)
       (org-startup-with-inline-images t)
       (org-support-shift-select t)

       (org-agenda-files (list "~/Documents/Org"))
       (org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
           "* Notes %?\n  %i\n  %a")
          ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
           "* %?\nEntered on %U\n  %i\n  %a")))
       :hook (org-mode . (lambda ()
                           (variable-pitch-mode -1)
                           (display-line-numbers-mode -1)))
       :bind (:map wy:evil-org-map
                   ("a" . org-agenda)
                   ("b" . org-switchb)
                   ("c" . org-capture)
                   ("l" . org-store-link)))
   #+end_src
** org-superstar
   #+begin_src emacs-lisp
     (use-package org-superstar
       :ensure t
       :hook (org-mode . org-superstar-mode)
       :custom
       (org-superstar-headline-bullets-list '("◉" "○" "⮞" "☉" "□" "▣" "✓"))
       (org-superstar-leading-bullet ?\s)
       (org-superstar-prettify-item-bullets t))
   #+end_src
* osc52
  #+begin_src emacs-lisp
    ;; osc52 support under supporting terminals and tmux
    (use-package osc52
      :unless window-system
      :load-path "mine"
      :config
      (osc52-set-cut-function))
  #+end_src
* paren
  #+begin_src emacs-lisp
    (use-package paren
      :custom
      (show-paren-style 'parenthesis)
      (show-paren-when-point-in-periphery nil)
      (show-paren-when-point-inside-paren nil)
      :config
      (show-paren-mode +1))
  #+end_src
* proced
  #+begin_src emacs-lisp
    (use-package proced
      :commands proced
      :custom
      (proced-auto-update-flag t)
      (proced-auto-update-interval 1)
      (proced-descend t)
      (proced-filter 'user))
  #+end_src
* project
  #+begin_src emacs-lisp
    ;; (use-package project
    ;;   :custom (project-switch-commands
    ;;            '((?f "File" project-find-file)
    ;;              (?g "Grep" project-find-regexp)
    ;;              (?d "Dired" project-dired)
    ;;              (?b "Buffer" project-switch-to-buffer)
    ;;              (?q "Query replace" project-query-replace-regexp)
    ;;              (?v "VC dir" project-vc-dir)
    ;;              (?e "Eshell" project-eshell)))
    ;;   :bind (:map project-prefix-map
    ;;               ("q" . project-query-replace-regexp)))
  #+end_src
* rainbow, /et al./
** rainbow-mode
   #+begin_src emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :custom
       (rainbow-ansi-colors nil)
       (rainbow-x-colors nil)
       :hook prog-mode)
   #+end_src
** rainbow-delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :ensure t
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src
* re-builder
  #+begin_src emacs-lisp
    (use-package re-builder
      :custom (reb-re-syntax 'read))
  #+end_src
* recentf
  #+begin_src emacs-lisp
    (use-package recentf
      :custom
      (recentf-exclude '(".gz" ".xz" ".zip" "/elpa/" "/ssh:" "/sudo:"))
      (recentf-max-saved-items 200)
      (recentf-save-file (expand-file-name "cache/recentf" user-emacs-directory))
      :config
      (recentf-mode +1))
  #+end_src
* replace
  #+begin_src emacs-lisp
    (use-package replace
      :custom (list-matching-lines-jump-to-current-line t)
      :hook ((occur-mode . hl-line-mode)
             (occur-mode . (lambda () (toggle-truncate-lines t))))
      :bind (("M-s M-o" . multi-occur)
             :map occur-mode-map
             ("t" . toggle-truncate-lines)))
  #+end_src
* savehist
  #+begin_src emacs-lisp
    (use-package saveplace
      :custom
      (history-delete-duplicates t)
      (history-length 1000)
      (savehist-file (expand-file-name "cache/savehist" user-emacs-directory))
      (savehist-save-minibuffer-history t)
      :config
      (savehist-mode +1))
  #+end_src
* saveplace
  #+begin_src emacs-lisp
    (use-package saveplace
      :custom
      (save-place-file (expand-file-name "cache/places" user-emacs-directory))
      (save-place-forget-unreadable-files t)
      :config
      (save-place-mode +1))
  #+end_src
* select
  #+begin_src emacs-lisp
    (use-package select
      :custom (select-enable-clipboard nil))
  #+end_src
* shell
  #+begin_src emacs-lisp
    (use-package shell
      :commands shell-command
      :custom
      (ansi-color-for-comint-mode t)
      (shell-command-prompt-show-cwd t))
  #+end_src
* simple
  #+begin_src emacs-lisp
    (use-package simple
      :config
      (column-number-mode +1)
      (global-visual-line-mode +1)
      (prettify-symbols-mode +1)
      (size-indication-mode +1))
  #+end_src
* so-long
  #+begin_src emacs-lisp
    (use-package so-long
      :config
      (global-so-long-mode +1))
  #+end_src
* tab-bar
  #+begin_src emacs-lisp
    (use-package tab-bar
      :custom
      (tab-bar-close-button-show t)
      (tab-bar-close-last-tab-choice 'tab-bar-mode-disable)
      (tab-bar-close-tab-select 'recent)
      (tab-bar-new-tab-choice t)
      (tab-bar-new-tab-to 'right)
      (tab-bar-position nil)
      (tab-bar-show t)
      (tab-bar-tab-hints nil)
      (tab-bar-tab-name-function 'tab-bar-tab-name-all)
      :config
      (tab-bar-mode -1)
      (tab-bar-history-mode -1))
  #+end_src
* time
  #+begin_src emacs-lisp
    (use-package time
      :commands world-clock
      :custom
      (display-time-default-load-average nil)
      (display-time-format "[%H:%M]")
      (display-time-interval 60)

      (zoneinfo-style-world-list
       '(("America/Los_Angeles" "Los Angeles")
         ("America/New_York" "New York")
         ("Europe/Brussels" "Brussels")
         ("Asia/Shanghai" "Shanghai")
         ("Asia/Tokyo" "Tokyo")))

      (world-clock-buffer-name "*world-clock*")
      (world-clock-list t)
      (world-clock-timer-enable t)
      (world-clock-time-format "%R %z  %A %d %B")
      (world-clock-timer-second 60)
      :bind (:map wy:evil-toggle-map
                  ("c" . display-time-mode)
                  ("g" . world-clock))
      :config (display-time-mode -1))
  #+end_src
* tooltip
  #+begin_src emacs-lisp
    (use-package tooltip
      :custom
      (tooltip-delay 0.5)
      (tooltip-frame-parameters
       '((name . "tooltip")
         (internal-border-width . 6)
         (border-width . 0)
         (no-special-glyphs . t)))
      (tooltip-short-delay 0.5)
      (x-gtk-use-system-tooltips nil)
      :config
      (tooltip-mode +1))
  #+end_src
* tramp
  #+begin_src emacs-lisp
    (use-package tramp
      :custom
      (tramp-default-method "sshx")
      (tramp-persistency-file-name
       (expand-file-name "cache/tramp" user-emacs-directory)))
  #+end_src
* tree-sitter, /et al./
** tree-sitter
   #+begin_src emacs-lisp
     (use-package tree-sitter
       :ensure t
       :hook
       (tree-sitter-after-on . tree-sitter-hl-mode)
       :config
       (global-tree-sitter-mode +1))
   #+end_src
** tree-sitter-langs
   #+begin_src emacs-lisp
     (use-package tree-sitter-langs
       :ensure t
       :after tree-sitter)
   #+end_src
* uniquify
  #+begin_src emacs-lisp
    (use-package uniquify
      :custom
      (uniquify-after-kill-buffer-p t)
      (uniquify-buffer-name-style 'forward)
      (uniquify-strip-common-suffix t))
  #+end_src
* vterm
  #+begin_src emacs-lisp
    (use-package vterm
      :unless (eq system-type 'windows-nt)
      :ensure t
      :bind ("<f12>" . vterm)
      :custom
      (vterm-always-compile-module t)
      (vterm-enable-manipulate-selection-data-by-osc52 t)
      (vterm-kill-buffer-on-exit t)
      (vterm-shell "/usr/bin/tmux new-session -s $(cat /dev/urandom | tr -dc [:alnum:] | head -c 7)"))
  #+end_src
* which-key
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode +1))
  #+end_src
* whitespace
  #+begin_src emacs-lisp
    (use-package whitespace
      :hook (before-save . whitespace-cleanup)
      :bind (:map wy:evil-toggle-map
                  ("w" . whitespace-mode)))
  #+end_src
* windmove
  #+begin_src emacs-lisp
    (use-package windmove
      :after evil
      :custom (windmove-create-window nil)
      :bind (:map evil-window-map
                  ([left]  . windmove-left)
                  ([right] . windmove-right)
                  ([up]    . windmove-up)
                  ([down]  . windmove-down)))
  #+end_src
* window
  #+begin_src emacs-lisp
    (use-package window
      :custom
      (even-window-sizes 'height-only)
      (switch-to-buffer-in-dedicated-window 'pop)
      (window-combination-resize t)
      (window-sides-vertical nil)
      :hook ((help-mode . visual-line-mode)
             (custom-mode . visual-line-mode)))
  #+end_src
* winner
  #+begin_src emacs-lisp
    (use-package winner
      :after evil
      :bind (:map evil-window-map
                  ("u" . winner-undo)
                  ("U" . winner-redo))
      :config
      (winner-mode +1))
  #+end_src
* xt-mouse
  #+begin_src emacs-lisp
    (use-package xt-mouse
      :unless window-system
      :demand t
      :bind(([mouse-4] . scroll-down-line)
            ([mouse-5] . scroll-up-line))
      :config
      (xterm-mouse-mode +1))
  #+end_src
* ...
  #+begin_src emacs-lisp
    (use-package cmake-mode :ensure t)
    (use-package go-mode    :ensure t)
    (use-package lua-mode   :ensure t)
    (use-package rust-mode  :ensure t)
    (use-package yaml-mode  :ensure t)
  #+end_src
