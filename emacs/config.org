# -*- coding: utf-8 -*-
#+TITLE: My Emacs Configuration
#+STARTUP: overview

* =bootstrap=
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

  ;; install use-package if not
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))

  ;; auto update packages
  (use-package auto-package-update
    :ensure t
    :custom
    (auto-package-update-last-update-day-filename
     (expand-file-name ".cache/last-package-update-day" user-emacs-directory))
    (auto-package-update-delete-old-versions t)
    (auto-package-update-hide-results t)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-interval 13)
    :config
    (auto-package-update-maybe))
#+END_SRC
* =defaults=
#+BEGIN_SRC emacs-lisp
  (use-package emacs
      :init
      (prefer-coding-system 'utf-8)
      (set-default-coding-systems 'utf-8)
      (set-language-environment "utf-8")

      (fset 'yes-or-no-p 'y-or-n-p)
      :custom
      (auto-save-list-file-prefix nil)

      (bidi-inhibit-bpa t)

      (inhibit-startup-buffer-menu t)
      (inhibit-startup-echo-area-message t)
      (inhibit-startup-screen t)

      (initial-major-mode 'org-mode)
      (initial-scratch-message nil)

      (scroll-conservatively 10000)
      (scroll-margin 1)
      (scroll-preserve-screen-position t)
      (scroll-step 1)
      :config
      (setq frame-title-format
            '(buffer-file-name "%f"
                               (dired-directory dired-directory "%b")))

      (when (eq system-type 'windows-nt)
        (setq w32-get-true-file-attributes nil)
        (setq inhibit-compacting-font-caches t)))
#+END_SRC
* autorevert
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :custom
    (auto-revert-verbose t)
    :config
    (global-auto-revert-mode +1))
#+END_SRC
* avy
  #+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :bind ("C-c f" . avy-goto-char))
  #+END_SRC 
* battery
#+BEGIN_SRC emacs-lisp
  (use-package battery
    :custom
    (battery-load-low 20)
    (battery-load-critical 10)
    (battery-mode-line-format "[%b%p%%]")
    (battery-mode-line-limit 95)
    (battery-update-interval 180)
    :bind
    ("C-c t b" . display-battery-mode)
    :config
    (display-battery-mode -1))
#+END_SRC
* bind-key
#+BEGIN_SRC emacs-lisp
  (use-package bind-key
    :ensure t
    :bind
    ;; reset text zooming
    ("C-c 0" . (lambda () (interactive) (text-scale-set 0))))
#+END_SRC
* bookmark
#+BEGIN_SRC emacs-lisp
  (use-package bookmark
    :custom
    (bookmark-default-file
     (expand-file-name ".cache/bookmarks" user-emacs-directory)))
#+END_SRC
* company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode +1)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1)
    (company-selection-wrap-around t)
    :config
    (company-tng-mode +1))

  (use-package company-box
    :ensure t
    :after company
    :hook (company-mode . company-box-mode))
#+END_SRC
* cus-edit
#+BEGIN_SRC emacs-lisp
  (use-package cus-edit
    :init
    (defvar my-custom-file (expand-file-name ".cache/custom.el" user-emacs-directory))
    :config
    (setq custom-file my-custom-file)
    :hook (after-init . (lambda ()
                          (let ((file my-custom-file))
                            (unless (file-exists-p file)
                              (make-empty-file file))
                            (load-file file)))))
#+END_SRC
* custom
#+BEGIN_SRC emacs-lisp
  (use-package custom
    :config
    (load-theme 'modus-operandi t))
#+END_SRC
* dabbrev
#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :after (minibuffer icomplete)
    :custom
    (dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
    (dabbrev-abbrev-skip-leading-regexp "[$*/=']")
    (dabbrev-backward-only nil)
    (dabbrev-case-distinction 'case-replace)
    (dabbrev-case-fold-search t)
    (dabbrev-case-replace 'case-replace)
    (dabbrev-check-other-buffers t)
    (dabbrev-eliminate-newlines t)
    (dabbrev-upcase-means-case-search t))
#+END_SRC
* delsel
#+BEGIN_SRC emacs-lisp
  (use-package delsel
    :config
    (delete-selection-mode +1))
#+END_SRC
* diff-mode
#+BEGIN_SRC emacs-lisp
  (use-package diff-mode
    :custom
    (diff-advance-after-apply-hunk t)
    (diff-default-read-only t)
    (diff-font-lock-prettify nil)
    (diff-font-lock-syntax 'hunk-also)
    (diff-refine nil)
    (diff-update-on-the-fly t))
#+END_SRC

* dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :custom
    (delete-by-moving-to-trash t)
    (dired-recursive-copies 'always)
    (dired-recursive-deletes 'always)
    (dired-listing-switches
     "-AGFhlv --group-directories-first --time-style=long-iso")
    (dired-dwim-target t)
    :hook ((dired-mode . dired-hide-details-mode)
           (dired-mode . hl-line-mode)))

  (use-package dired-aux
    :custom
    (dired-create-destination-dirs 'ask)
    (dired-isearch-filenames 'dwim)
    (dired-vc-rename-file t)
    :bind (:map dired-mode-map
                ("C-+" . dired-create-empty-file)
                ("M-s f" . nil)))

  (use-package dired-x
    :after dired
    :custom
    (dired-bind-info nil)
    (dired-bind-man nil)
    (dired-clean-confirm-killing-deleted-buffers t)
    (dired-clean-up-buffers-too t)
    (dired-x-hands-off-my-keys t)    ; easier to show the keys I use
    :bind (("C-x C-j" . dired-jump)
           ("C-x 4 C-j" . dired-jump-other-window))
    :bind(:map dired-mode-map
               ("I" . dired-info)))

  (use-package image-dired
    :custom
    (image-dired-external-viewer "xdg-open")
    (image-dired-thumb-margin 2)
    (image-dired-thumb-relief 0)
    (image-dired-thumb-size 80)
    (image-dired-thumbs-per-row 4)
    :bind (:map image-dired-thumbnail-mode-map
                ("<return>" . image-dired-thumbnail-display-external)))

  (use-package wdired
    :after dired
    :commands wdired-change-to-wdired-mode
    :custom
    (wdired-allow-to-change-permissions t)
    (wdired-create-parent-directories t))
#+END_SRC
* display-line-numbers
#+BEGIN_SRC emacs-lisp
  (use-package display-line-numbers
    :custom
    (display-line-numbers-type 'relative)
    :hook ((text-mode prog-mode). display-line-numbers-mode)
    :bind ("C-c t n" . display-line-numbers-mode))
#+END_SRC
* eldoc
#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :hook ((emacs-lisp-mode
            ielm-mode
            lisp-interaction-mode) . eldoc-mode))
#+END_SRC
* electric
#+BEGIN_SRC emacs-lisp
  (use-package electric
    :custom
    (electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
    (electric-pair-pairs
     '((8216 . 8217)
       (8220 . 8221)
       (171 . 187)))
    (electric-pair-preserve-balance t)
    (electric-pair-skip-self 'electric-pair-default-skip-self)
    (electric-pair-skip-whitespace-chars
     '(9
       10
       32))
    (electric-pair-skip-whitespace nil)

    (electric-quote-context-sensitive t)
    (electric-quote-paragraph t)
    (electric-quote-string nil)
    (electric-quote-replace-double t)
    :config
    (electric-indent-mode +1)
    (electric-pair-mode +1)
    (electric-quote-mode +1))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :preface
    (defconst my-leader-key "SPC")
    (defconst my-local-leader-key ",")
    (defconst my-non-normal-prefix "C-")

    (defun my-define-leader-maps ()
      "Define key maps for with my-leader-key for needed evil states"

      ;; normal
      (define-prefix-command 'my-evil-leader-nmap)
      (define-key evil-normal-state-map (kbd my-leader-key) 'my-evil-leader-nmap)

      ;; visual
      (define-prefix-command 'my-evil-leader-vmap)
      (define-key evil-visual-state-map (kbd my-leader-key) 'my-evil-leader-vmap)

      ;; motion
      (define-prefix-command 'my-evil-leader-mmap)
      (define-key evil-motion-state-map (kbd my-leader-key) 'my-evil-leader-mmap))

    (defun my-set-evil-state-color ()
      (let* ((default 'modus-theme-intense-neutral)
             (face (cond ((minibufferp) default)
                         ((evil-emacs-state-p) 'modus-theme-intense-magenta)
                         ((evil-insert-state-p) 'modus-theme-intense-green)
                         ((evil-motion-state-p) 'modus-theme-intense-yellow)
                         ((evil-normal-state-p) default)
                         ((evil-operator-state-p) 'modus-theme-subtle-yellow)
                         ((evil-replace-state-p) 'modus-theme-intense-red)
                         ((evil-visual-state-p)  'modus-theme-intense-cyan)
                         (t default))))
        (set-face-attribute 'mode-line nil
                            :foreground (face-foreground face)
                            :background (face-background face))))
    :init
    (fset 'evil-visual-update-x-selection 'ignore)
    :custom
    (evil-want-C-i-jump nil)
    (evil-want-integration t)
    (evil-want-keybinding nil)
    (evil-mode-line-format nil)
    :bind (:map evil-motion-state-map
                ("j" . evil-next-visual-line)
                ("k" . evil-previous-visual-line))
    :bind (:map my-evil-leader-mmap
                ("y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))
                ("Y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line))))
    :bind (:map my-evil-leader-nmap
                ("p" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-after)))
                ("P" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-paste-before)))
                ("y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank)))
                ("Y" . (lambda () (interactive) (evil-use-register ?+) (call-interactively 'evil-yank-line))))
    :hook (post-command . my-set-evil-state-color)
    :config
    (my-define-leader-maps)
    (evil-set-undo-system 'undo-redo)
    (evil-mode +1))

  (use-package evil-args
    :ensure t
    :bind (:map evil-inner-text-objects-map
                ("a" . evil-inner-arg))
    :bind (:map evil-outer-text-objects-map
                ("a" . evil-outer-arg))
    :bind (:map evil-normal-state-map
                ("H" . evil-backward-arg)
                ("L" . evil-forward-arg)
                ("K" . evil-jump-out-args))
    :bind (:map evil-motion-state-map
                ("H" . evil-backward-arg)
                ("L" . evil-forward-arg)))

  (use-package evil-collection
    :ensure t
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :init
    (evil-collection-init))

  (use-package evil-commentary
    :ensure t
    :config
    (evil-commentary-mode +1))

  (use-package evil-exchange
    :ensure t
    :config
    (evil-exchange-install))

  (use-package evil-goggles
    :ensure t
    :custom
    (evil-goggles-async-duration 0.900)
    (evil-goggles-blocking-duration 0.100)
    (evil-goggles-pulse t)
    :config  
    (evil-goggles-mode +1))

  (use-package evil-lion
    :ensure t
    :config
    (evil-lion-mode +1))

  (use-package evil-matchit
    :ensure t
    :config  
    (global-evil-matchit-mode +1))

  (use-package evil-numbers
    :ensure t
    :bind (:map evil-normal-state-map
                ("C-c +" . evil-numbers/inc-at-pt)
                ("C-c -" . evil-numbers/dec-at-pt)))

  (use-package evil-quickscope
    :ensure t
    :config
    (global-evil-quickscope-mode +1))

  (use-package evil-surround
    :ensure t
    :config  
    (global-evil-surround-mode +1))
#+END_SRC
* faces
#+BEGIN_SRC emacs-lisp
  (use-package faces
    :config
    (set-face-attribute 'default nil
                        :family "Iosevka Fusion"
                        :foundry "outline"
                        :height 130))
#+END_SRC
* files
#+BEGIN_SRC emacs-lisp
  (use-package files
    :custom
    (auto-save-default nil)
    (backup-inhibited t)
    (make-backup-files nil))
#+END_SRC
* flymake
#+BEGIN_SRC emacs-lisp
  (use-package flymake
    :after lsp-mode
    :commands flymake-mode
    :custom
    (flymake-fringe-indicator-position 'left-fringe)
    (flymake-no-changes-timeout nil)
    (flymake-proc-compilation-prevents-syntax-check t)
    (flymake-start-on-flymake-mode t)
    (flymake-start-on-save-buffer t)
    (flymake-suppress-zero-counters t)
    (flymake-wrap-around nil)
    :hook (lsp-mode . flymake-mode)
    :bind (:map flymake-mode-map
                ("C-c ! s" . flymake-start)
                ("C-c ! d" . flymake-show-diagnostics-buffer)
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)))
#+END_SRC
* flyspell
#+BEGIN_SRC emacs-lisp
  (use-package ispell
    :custom
    (ispell-program-name "hunspell")
    (ispell-dictionary "en_US")
    :config
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US"))

  (use-package flyspell
    :after ispell
    :custom
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)
    :bind ("C-c s" . flyspell-mode))
#+END_SRC
* frame
#+BEGIN_SRC emacs-lisp
  (use-package frame
    :custom
    (blink-cursor-blinks 20)
    (blink-cursor-delay 0.2)
    (blink-cursor-interval 0.5)
    (cursor-in-non-selected-windows 'hollow)
    (cursor-type '(hbar . 3))
    :config
    (blink-cursor-mode +1))
#+END_SRC
* hl-line
#+BEGIN_SRC emacs-lisp
  (use-package hl-line
    :config
    (global-hl-line-mode +1))
#+END_SRC
* ibuffer
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :custom
    (ibuffer-default-shrink-to-minimum-size nil)
    (ibuffer-default-sorting-mode 'filename/process)
    (ibuffer-display-summary nil)
    (ibuffer-expert t)
    (ibuffer-formats
     '((mark modified read-only locked " "
             (name 30 30 :left :elide)
             " "
             (size 9 -1 :right)
             " "
             (mode 16 16 :left :elide)
             " " filename-and-process)
       (mark " "
             (name 16 -1)
             " " filename)))
    (ibuffer-movement-cycle nil)
    (ibuffer-old-time 48)
    (ibuffer-saved-filter-groups nil)
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-use-header-line t)
    (ibuffer-use-other-window nil)
    :hook (ibuffer-mode . hl-line-mode)
    :bind ("C-x C-b" . ibuffer)
    :bind (:map ibuffer-mode-map
                ("* f" . ibuffer-mark-by-file-name-regexp)
                ("* g" . ibuffer-mark-by-content-regexp) ; "g" is for "grep"
                ("* n" . ibuffer-mark-by-name-regexp)
                ("s n" . ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
                ("/ g" . ibuffer-filter-by-content)))
#+END_SRC
* icomplete
#+BEGIN_SRC emacs-lisp
  (use-package icomplete
    :custom
    (icomplete-hide-common-prefix nil)
    (icomplete-separator (propertize " · " 'face 'shadow))
    (icomplete-show-matches-on-no-input t)
    (icomplete-tidy-shadowed-file-names t)
    (icomplete-with-completion-tables t)
    :config
    (fido-mode +1)
    (icomplete-mode +1))
#+END_SRC
* ido
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :custom
    (ido-enable-flex-matching t)
    (ido-everywhere t)
    (ido-default-buffer-method 'selected-window)
    (ido-default-file-method 'selected-window)
    (ido-save-directory-list-file
     (expand-file-name ".cache/ido.last" user-emacs-directory))
    (ido-use-virtual-buffers t)
    :config
    (ido-mode +1))
#+END_SRC
* imenu
#+BEGIN_SRC emacs-lisp
  (use-package imenu
    :custom
    (imenu-auto-rescan t)
    (imenu-auto-rescan-maxout 600000)
    (imenu-eager-completion-buffer t)
    (imenu-level-separator "/")
    (imenu-max-item-length 100)
    (imenu-space-replacement " ")
    (imenu-use-markers t)
    (imenu-use-popup-menu nil)
    :bind ("M-i" . imenu))
#+END_SRC
* isearch
#+BEGIN_SRC emacs-lisp
  (use-package isearch
    :custom
    (isearch-lax-whitespace t)
    (isearch-lazy-count t)
    (isearch-lazy-highlight t)
    (isearch-regexp-lax-whitespace nil)
    (lazy-count-prefix-format nil)
    (lazy-count-suffix-format " (%s/%s)")
    (isearch-allow-scroll 'unlimited)
    (isearch-yank-on-move 'shift)
    (search-highlight t)
    (search-whitespace-regexp ".*?")
    :bind (:map minibuffer-local-isearch-map
                ("M-/" . isearch-complete-edit))
    :bind	(:map isearch-mode-map
                ("C-g" . isearch-cancel)       ; instead of `isearch-abort'
                ("M-/" . isearch-complete)))
#+END_SRC
* lsp
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :custom
    (lsp-session-file (expand-file-name ".cache/lsp-session" user-emacs-directory))
    :hook ((c-mode
            c++-mode
            objc-mode
            go-mode
            rust-mode) . lsp)
    :hook (lsp-mode . lsp-enable-which-key-integration)
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+END_SRC
* magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)
           ("C-c j" . magit-dispatch)
           ("C-c g" . magit-file-dispatch)))
#+END_SRC
* man
#+BEGIN_SRC emacs-lisp
  (use-package man
    :after evil
    :config
    (evil-define-key 'normal Man-mode-map "q" 
      (lambda ()
        (interactive)
        (if (> (length (window-list)) 1)
            (quit-window)
          (delete-frame)))))
#+END_SRC
* menu-bar
#+BEGIN_SRC emacs-lisp
  (use-package menu-bar
    :bind
    ("C-c t m" . menu-bar-mode)
    :config
    (menu-bar-mode -1))
#+END_SRC
* minibuffer
#+BEGIN_SRC emacs-lisp
  (use-package minibuffer
    :custom
    (completion-cycle-threshold 10)
    (completion-styles '(initials partial-completion flex))

    (minibuffer-eldef-shorten-default t)
    :config
    (minibuffer-depth-indicate-mode +1)
    (minibuffer-electric-default-mode +1))
#+END_SRC
* minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :ensure t
    :config (minions-mode +1))
#+END_SRC
* mouse
#+BEGIN_SRC emacs-lisp
  (use-package mouse
    :unless window-system
    :custom
    (make-pointer-invisible t)
    (mouse-drag-copy-region nil)
    (mouse-wheel-follow-mouse t)
    (mouse-wheel-progressive-speed t)
    (mouse-wheel-scroll-amount
     '(1
       ((shift) . 5)
       ((meta) . 0.5)
       ((control) . text-scale)))
    :config
    (mouse-wheel-mode +1))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :hook (org-mode . (lambda ()
                        (org-indent-mode +1)
                        (variable-pitch-mode -1)
                        (display-line-numbers-mode -1)))
    :bind (("C-c a" . org-agenda)
           ("C-c b" . org-switchb)
           ("C-c c" . org-capture)
           ("C-c l" . org-store-link))  
    :custom
    (org-ellipsis " ▾")
    (org-export-headline-levels 5)
    (org-export-with-tags nil)
    (org-fontify-whole-heading-line t)
    (org-hide-emphasis-markers t)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-odt-convert-process 'unoconv)
    (org-odt-preferred-output-format "docx")
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    (org-startup-folded t)
    (org-startup-with-inline-images t)
    (org-support-shift-select t)

    (org-agenda-files (list "~/Documents/Org"))
    (org-capture-templates
     '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
       ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
        "* Notes %?\n  %i\n  %a")
       ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
        "* %?\nEntered on %U\n  %i\n  %a"))))

  (use-package org-indent
    :after org)

  (use-package org-superstar
    :ensure t
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "✸" "▷" "◆" "○" "▶"))
    (org-superstar-leading-bullet ?\s)
    (org-superstar-prettify-item-bullets t))
#+END_SRC
* osc52
#+BEGIN_SRC emacs-lisp
  ;; osc52 support under supporting terminals and tmux
  (use-package osc52
    :unless window-system
    :load-path "mine"
    :config
    (osc52-set-cut-function))
#+END_SRC
* paren
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :custom
    (show-paren-style 'parenthesis)
    (show-paren-when-point-in-periphery nil)
    (show-paren-when-point-inside-paren nil)
    :config
    (show-paren-mode +1))
#+END_SRC
* proced
#+BEGIN_SRC emacs-lisp
  (use-package proced
    :commands proced
    :custom
    (proced-auto-update-flag t)
    (proced-auto-update-interval 1)
    (proced-descend t)
    (proced-filter 'user))
#+END_SRC
* project
#+BEGIN_SRC emacs-lisp
  (use-package project
    :custom
    (project-switch-commands
     '((?f "File" project-find-file)
       (?g "Grep" project-find-regexp)
       (?d "Dired" project-dired)
       (?b "Buffer" project-switch-to-buffer)
       (?q "Query replace" project-query-replace-regexp)
       (?v "VC dir" project-vc-dir)
       (?e "Eshell" project-eshell)))
    :bind ("C-x p q" . project-query-replace-regexp)) 
#+END_SRC
* rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :custom
    (rainbow-ansi-colors nil)
    (rainbow-x-colors nil)
    :hook prog-mode)

  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
* re-builder
#+BEGIN_SRC emacs-lisp
  (use-package re-builder
    :custom
    (reb-re-syntax 'read))
#+END_SRC
* recentf
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :custom
    (recentf-exclude '(".gz" ".xz" ".zip" "/elpa/" "/ssh:" "/sudo:"))
    (recentf-max-saved-items 200)
    (recentf-save-file (expand-file-name ".cache/recentf" user-emacs-directory))
    :config
    (recentf-mode +1))
#+END_SRC
* replace
#+BEGIN_SRC emacs-lisp
  (use-package replace
    :custom
    (list-matching-lines-jump-to-current-line t)
    :hook ((occur-mode . hl-line-mode)
           (occur-mode . (lambda () (toggle-truncate-lines t))))
    :bind (("M-s M-o" . multi-occur)
           :map occur-mode-map
           ("t" . toggle-truncate-lines)))
#+END_SRC
* savehist
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :custom
    (history-delete-duplicates t)
    (history-length 1000)
    (savehist-file (expand-file-name ".cache/savehist" user-emacs-directory))
    (savehist-save-minibuffer-history t)
    :config
    (savehist-mode +1))
#+END_SRC
* saveplace
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :custom
    (save-place-file (expand-file-name ".cache/places" user-emacs-directory))
    (save-place-forget-unreadable-files t)
    :config
    (save-place-mode +1))
#+END_SRC
* scroll-bar
#+BEGIN_SRC emacs-lisp
  (use-package scroll-bar
    :bind
    ("C-c t l" . scroll-bar-mode)
    :config
    (scroll-bar-mode -1))
#+END_SRC
* select
#+BEGIN_SRC emacs-lisp
  (use-package select
    :custom
    (x-select-enable-clipboard nil))
#+END_SRC
* shell
#+BEGIN_SRC emacs-lisp
  (use-package shell
    :commands shell-command
    :custom
    (setq ansi-color-for-comint-mode t)
    (setq shell-command-prompt-show-cwd t))
#+END_SRC
* simple
#+BEGIN_SRC emacs-lisp
  (use-package simple
    :after evil
    :config
    (column-number-mode +1)
    (global-visual-line-mode +1)
    (prettify-symbols-mode +1)
    (size-indication-mode +1))
#+END_SRC
* so-long
#+BEGIN_SRC emacs-lisp
  (use-package so-long
    :config
    (global-so-long-mode +1))
#+END_SRC
* sr-speedbar
#+BEGIN_SRC emacs-lisp
  (use-package sr-speedbar
    :ensure t
    :custom (speedbar-use-images nil)
    :bind ([f9] . sr-speedbar-toggle))
#+END_SRC
* time
#+BEGIN_SRC emacs-lisp
  (use-package time
    :commands world-clock
    :custom
    (display-time-default-load-average nil)
    (display-time-format "[%H:%M]")
    (display-time-interval 60)

    (zoneinfo-style-world-list
     '(("America/Los_Angeles" "Los Angeles")
       ("America/New_York" "New York")
       ("Europe/Brussels" "Brussels")
       ("Asia/Shanghai" "Shanghai")
       ("Asia/Tokyo" "Tokyo")))

    (world-clock-buffer-name "*world-clock*")
    (world-clock-list t)
    (world-clock-timer-enable t)
    (world-clock-time-format "%R %z  %A %d %B")
    (world-clock-timer-second 60)
    :bind
    ("C-c t c" . display-time-mode)
    ("C-c t g" . world-clock)
    :config
    (display-time-mode -1))
#+END_SRC
* tool-bar
#+BEGIN_SRC emacs-lisp
  (use-package tool-bar
    :bind
    ("C-c t t" . tool-bar-mode)
    :config
    (tool-bar-mode -1))
#+END_SRC
* tooltip
#+BEGIN_SRC emacs-lisp
  (use-package tooltip
    :custom
    (tooltip-delay 0.5)
    (tooltip-frame-parameters
     '((name . "tooltip")
       (internal-border-width . 6)
       (border-width . 0)
       (no-special-glyphs . t)))
    (tooltip-short-delay 0.5)
    (x-gtk-use-system-tooltips nil)
    :config
    (tooltip-mode +1))
#+END_SRC
* tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :custom
    (tramp-persistency-file-name
     (expand-file-name ".cache/tramp" user-emacs-directory)))
#+END_SRC
* uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :custom
    (uniquify-after-kill-buffer-p t)
    (uniquify-buffer-name-style 'forward)
    (uniquify-strip-common-suffix t))
#+END_SRC
* vc
#+BEGIN_SRC emacs-lisp
  (use-package vc
    :custom
    (vc-find-revision-no-save t)
    (vc-follow-symlinks t))
#+END_SRC
* which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config
      (which-key-mode +1))
  #+END_SRC
* whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c t w" . whitespace-mode))
#+END_SRC
* window
#+BEGIN_SRC emacs-lisp
  (use-package window
    :custom
    (even-window-sizes 'height-only)
    (switch-to-buffer-in-dedicated-window 'pop)
    (window-combination-resize t)
    (window-sides-vertical nil)
    :hook ((help-mode . visual-line-mode)
           (custom-mode . visual-line-mode)))
#+END_SRC
* xref
#+BEGIN_SRC emacs-lisp
  (use-package xref
    :custom
    (xref-show-definitions-function #'xref--show-defs-minibuffer))
#+END_SRC
* xt-mouse
#+BEGIN_SRC emacs-lisp
  (use-package xt-mouse
    :unless window-system
    :bind (("<mouse-4>" . scroll-down-line)
           ("<mouse-5>" . scroll-up-line))
    :config
    (xterm-mouse-mode +1))
#+END_SRC
* yasnippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :hook ((prog-mode org-mode) . yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+END_SRC
* ...
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode :ensure t)
  (use-package go-mode :ensure t)
  (use-package rust-mode :ensure t)
  (use-package yaml-mode :ensure t)
#+END_SRC
