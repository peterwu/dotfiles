# -*- coding: utf-8 -*-
#+STARTUP: overview

My Emacs Init Settings

* Package Management 
  This section documents what packages that have been installed and configured.
** which-key
#+BeGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+EnD_SRC
** theme
#+BeGIN_SRC emacs-lisp
  (use-package modus-operandi-theme
    :config
    (load-theme 'modus-operandi t))
#+EnD_SRC
** ace-window
#+BeGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
    ([remap other-window] . ace-window)
    :config
    (set-face-attribute 'aw-leading-char-face nil
			:height 3.0
			:box t))
#+EnD_SRC
** evil and related packages
Simulate a Vim modal editing experience
#+BeGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (fset 'evil-visual-update-x-selection 'ignore)
    ;; (setq x-select-enable-clipboard nil)
    :config
    (evil-mode 1)
    (setq evil-mode-line-format '(after . mode-line-front-space)))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-mc
    :config
    (global-evil-mc-mode 1))

  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)
    ;; bind evil-jump-out-args
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))

  (use-package evil-lion
    :config
    (evil-lion-mode))
#+EnD_SRC
** magit for Git
#+BeGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
  
    ;; :config
    ;; (global-set-key (kbd "C-x g") 'magit-status))

  (use-package evil-magit
    :after evil magit
    :config
    (setq evil-magit-state 'normal))
#+EnD_SRC
** sudo-edit
#+BeGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+EnD_SRC
** rainbow
#+BeGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)
#+EnD_SRC
#+BeGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+EnD_SRC
** org mode
*** stock org-mode
#+BeGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-hide-emphasis-markers t)
    (setq org-fontify-whole-heading-line t)
    (setq org-support-shift-select t)
    (setq org-odt-convert-process 'unoconv)
    (setq org-odt-preferred-output-format "docx")
    (setq org-agenda-files (list "~/Documents/Org"))
    (setq org-capture-templates
	  '(("t" "Todo" entry (file+headline "~/Documents/Org/gtd.org" "Tasks")
	     "* TODO %?\n  %i\n  %a")
	    ("n" "Notes" entry (file+headline "~/Documents/Org/notes.org" "Notes")
	     "* Notes %?\n  %i\n  %a")
	    ("j" "Journal" entry (file+olp+datetree "~/Documents/Org/journal.org")
	     "* %?\nEntered on %U\n  %i\n  %a")))
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c b" . org-switchb)))
    ;; :config
    ;; (custom-set-faces
    ;;  '(org-level-1 ((t (:inherit outline-1 :height 1.0))))
    ;;  '(org-level-2 ((t (:inherit outline-2 :height 1.0))))
    ;;  '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
    ;;  '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
    ;;  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))))
#+EnD_SRC
*** org-superstar
#+BeGIN_SRC emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
    ;; (setq org-superstar-headline-bullets-list '("✸" "✿" "✤" "✜" "◆" "▶")
	  org-superstar-prettify-item-bullets t
	  org-superstar-leading-bullet ?\s))
#+EnD_SRC
** company for auto completion
#+BeGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    (global-company-mode t))
#+EnD_SRC
** search
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
	:bind ("M-s" . avy-goto-char))
    #+END_SRC
*** Ivy
 #+bEGIN_SRC emacs-lisp
   (use-package ivy
     :init (ivy-mode 1)
     :bind (("C-c C-r" . ivy-resume)
	    ("<f6>" . ivy-resume))
     :config
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t))
 #+eND_SRC
*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:bind ("C-s" . swiper))
    #+END_SRC
*** Counsel
 #+bEGIN_SRC emacs-lisp
   (use-package counsel
     :bind
     (("C-x C-f" . counsel-find-file)
      ("<f1> u" . counsel-unicode-char)))
 #+eND_SRC
** treemacs
#+BeGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :bind
    (([f9] . treemacs)
     ("M-0" . treemacs-select-window)))
#+EnD_SRC
*** Evil support
#+BeGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+EnD_SRC
*** Use pretty icons
#+BeGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
#+EnD_SRC
** yasnippets
 #+bEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode 1))
 #+eND_SRC
** lsp
#+BeGIN_SRC emacs-lisp
  ;; (use-package lsp-mode
  ;;   :hook ((c-mode c++-mode objc-mode go-mode rust-mode) . lsp)
  ;;   :commands lsp)

  ;; optionally
  ;; (use-package lsp-ui :commands lsp-ui-mode)
  ;; (use-package company-lsp :commands company-lsp)
  ;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+EnD_SRC
** various modes for programming languages and file types
#+BeGIN_SRC emacs-lisp
  (use-package cmake-mode)
  (use-package go-mode)
  (use-package rust-mode)
#+EnD_SRC
** misc.
#+BEGIN_SRC emacs-lisp
  
#+END_SRC
* Personal Settings
** Variables
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t
	initial-scratch-message nil)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
	display-time-format "%R"
	display-time-default-load-average nil)
  (setq visible-bell t
	visible-cursor nil)
  (setq default-input-method "pyim")
  (when (eq system-type 'windows-nt)
    (setq inhibit-compacting-font-caches t)) 
  (setq frame-title-format
	  '(buffer-file-name "%f"
	    (dired-directory dired-directory "%b")))
#+END_SRC
** Functions
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  ;; enable some modes
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (blink-cursor-mode t)
  (save-place-mode t)

  ;; disable some modes
  (display-battery-mode 0)
  (display-time-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)

  ;; (dolist (hook '(text-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode 1))))
  ;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook))
  ;;   (add-hook hook (lambda () (flyspell-mode -1))))

  ;; enable ligature support
  ;; https://github.com/microsoft/cascadia-code/issues/153
  ;; https://github.com/robbert-vdh/dotfiles/blob/master/user/emacs/.config/doom/config.org#ligatures
  ;; https://github.com/seagle0128/.emacs.d/issues/245
  (use-package composite
    :ensure nil
    :init
    (defvar composition-ligature-table (make-char-table nil))
    :hook
    (((prog-mode conf-mode nxml-mode markdown-mode help-mode)
      . (lambda () (setq-local composition-function-table composition-ligature-table))))
    :config
    ;; support ligatures, some toned down to prevent hang
    (when (version<= "27.0" emacs-version)
      (let ((alist
	     '((33 . ".\\(?:\\(==\\|[!=]\\)[!=]?\\)")
	       (35 . ".\\(?:\\(###?\\|_(\\|[(:=?[_{]\\)[#(:=?[_{]?\\)")
	       (36 . ".\\(?:\\(>\\)>?\\)")
	       (37 . ".\\(?:\\(%\\)%?\\)")
	       (38 . ".\\(?:\\(&\\)&?\\)")
	       (42 . ".\\(?:\\(\\*\\*\\|[*>]\\)[*>]?\\)")
	       ;; (42 . ".\\(?:\\(\\*\\*\\|[*/>]\\).?\\)")
	       (43 . ".\\(?:\\([>]\\)>?\\)")
	       ;; (43 . ".\\(?:\\(\\+\\+\\|[+>]\\).?\\)")
	       (45 . ".\\(?:\\(-[->]\\|<<\\|>>\\|[-<>|~]\\)[-<>|~]?\\)")
	       ;; (46 . ".\\(?:\\(\\.[.<]\\|[-.=]\\)[-.<=]?\\)")
	       (46 . ".\\(?:\\(\\.<\\|[-=]\\)[-<=]?\\)")
	       (47 . ".\\(?:\\(//\\|==\\|[=>]\\)[/=>]?\\)")
	       ;; (47 . ".\\(?:\\(//\\|==\\|[*/=>]\\).?\\)")
	       (48 . ".\\(?:\\(x[a-fA-F0-9]\\).?\\)")
	       (58 . ".\\(?:\\(::\\|[:<=>]\\)[:<=>]?\\)")
	       (59 . ".\\(?:\\(;\\);?\\)")
	       (60 . ".\\(?:\\(!--\\|\\$>\\|\\*>\\|\\+>\\|-[-<>|]\\|/>\\|<[-<=]\\|=[<>|]\\|==>?\\||>\\||||?\\|~[>~]\\|[$*+/:<=>|~-]\\)[$*+/:<=>|~-]?\\)")
	       (61 . ".\\(?:\\(!=\\|/=\\|:=\\|<<\\|=[=>]\\|>>\\|[=>]\\)[=<>]?\\)")
	       (62 . ".\\(?:\\(->\\|=>\\|>[-=>]\\|[-:=>]\\)[-:=>]?\\)")
	       (63 . ".\\(?:\\([.:=?]\\)[.:=?]?\\)")
	       (91 . ".\\(?:\\(|\\)[]|]?\\)")
	       ;; (92 . ".\\(?:\\([\\n]\\)[\\]?\\)")
	       (94 . ".\\(?:\\(=\\)=?\\)")
	       (95 . ".\\(?:\\(|_\\|[_]\\)_?\\)")
	       (119 . ".\\(?:\\(ww\\)w?\\)")
	       (123 . ".\\(?:\\(|\\)[|}]?\\)")
	       (124 . ".\\(?:\\(->\\|=>\\||[-=>]\\||||*>\\|[]=>|}-]\\).?\\)")
	       (126 . ".\\(?:\\(~>\\|[-=>@~]\\)[-=>@~]?\\)"))))
	(dolist (char-regexp alist)
	  (set-char-table-range composition-ligature-table (car char-regexp)
				`([,(cdr char-regexp) 0 font-shape-gstring]))))
      (set-char-table-parent composition-ligature-table composition-function-table)))
#+END_SRC
** Faces
#+BEGIN_SRC emacs-lisp
  ;; default face
  (set-face-attribute 'default nil
		      :family "Iosevka Fusion"
		      :height 130)

  (add-hook 'display-line-numbers-mode-hook
	    (lambda ()
	      (set-face-attribute 'line-number nil
				  :weight 'normal)
	      (set-face-attribute 'line-number-current-line nil
				  :foreground (face-attribute 'cursor :background)
				  :weight 'bold
				  :slant 'normal)))

#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-~") 'eshell)
  (global-set-key (kbd "C-x C-b") 'ibuffer)

  ;; (add-hook 'after-change-major-mode-hook
  ;; 	  (lambda ()
  ;; 	    (local-set-key [mouse-3] (mouse-menu-bar-map))))

  ;; toggles
  ;; (defhydra my/hydra-toggles (global-map "C-x t" :hint nil)
  ;;   "toggle"
  ;;   ("M" toggle-menu-bar-mode-from-frame "menubar")
  ;;   ("T" toggle-tool-bar-mode-from-frame "toolbar")
  ;;   ("n" global-display-line-numbers-mode "line numbers")
  ;;   ("b" display-battery-mode "battery")
  ;;   ("t" display-time-mode "time"))
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :init

    (setq telephone-line-lhs
	  '((evil   . (telephone-line-evil-tag-segment))
	    (accent . (telephone-line-vc-segment
		       telephone-line-erc-modified-channels-segment
		       telephone-line-process-segment))
	    (nil    . (telephone-line-buffer-segment))))

    (setq telephone-line-rhs
	  '((nil    . (telephone-line-misc-info-segment))
	    (accent . (telephone-line-major-mode-segment))
	    (evil   . (telephone-line-airline-position-segment))))

    (setq telephone-line-height 24
	  telephone-line-evil-use-short-tag nil)

    (setq telephone-line-primary-left-separator 'telephone-line-flat
	  telephone-line-secondary-left-separator 'telephone-line-nil
	  telephone-line-primary-right-separator 'telephone-line-flat
	  telephone-line-secondary-right-separator 'telephone-line-nil)

    ;; (face-spec-set
    ;;  'telephone-line-evil-normal
    ;;  '((t :background "#6E46A4"))
    ;;  'face-override-spec)

    :config
    (telephone-line-mode t))
#+END_SRC
** EShell prompt
#+BEGIN_SRC emacs-lisp
  ;; (setq eshell-prompt-function 'ixl/eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+END_SRC
