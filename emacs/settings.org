# -*- coding: utf-8 -*-
#+STARTUP: overview

My Emacs Init Settings

* System Customization
** Keep customizations made through the M-x customize function into its own file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file)
#+END_SRC
* Package Management 
  This section documents what packages that have been installed and configured.
** Add melpa repo
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC
** Personal scripts
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "elisp" user-emacs-directory))
#+END_SRC
** Install *use-package* if not
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC
** Keep installed packages up to date automatically
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :init
    (setq auto-package-update-last-update-day-filename (expand-file-name "cache/last-package-update-day" user-emacs-directory))
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC 
** Install which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+END_SRC
** Theme 
#+BEGIN_SRC emacs-lisp
  (load-theme 'tango t)

  (defconst theme-color-black "#2E3436")
  (defconst theme-color-red "#CC0000")
  (defconst theme-color-green "#4E9A06")
  (defconst theme-color-yellow "#C4A000")
  (defconst theme-color-blue "#3465A4")
  (defconst theme-color-magenta "#75507B")
  (defconst theme-color-cyan "#06989A")
  (defconst theme-color-white "#D3D7CF")
#+END_SRC
** Minions
#+BEGIN_SRC emacs-lisp
  (use-package minions
    :config (minions-mode 1))
#+END_SRC
** Ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
    ([remap other-window] . ace-window)
    :config
    (set-face-attribute 'aw-leading-char-face nil
			:height 3.0
			:box t))
#+END_SRC
** Evil and related packages
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t)
    (setq evil-mode-line-format '(after . mode-line-front-space))
    (let* ((evil-state-foreground-color theme-color-white)
	   (evil-emacs-state-background-color theme-color-blue)
	   (evil-motion-state-background-color theme-color-cyan)
	   (evil-insert-state-background-color theme-color-green)
	   (evil-visual-state-background-color theme-color-magenta)
	   (evil-operator-state-background-color theme-color-yellow)
	   (evil-replace-state-background-color theme-color-red))
      (require 's)
      (setq evil-normal-state-tag
	    (s-center 5 (propertize (s-trim evil-normal-state-tag)
				    'font-lock-face (list :weight 'bold))))
      (setq evil-insert-state-tag
	    (s-center 5 (propertize (s-trim evil-insert-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-insert-state-background-color))))
      (setq evil-visual-state-tag
	    (s-center 5 (propertize (s-trim evil-visual-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-visual-state-background-color))))
      (setq evil-operator-state-tag
	    (s-center 5 (propertize (s-trim evil-operator-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-operator-state-background-color))))
      (setq evil-replace-state-tag
	    (s-center 5 (propertize (s-trim evil-replace-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-replace-state-background-color))))
      (setq evil-emacs-state-tag
	    (s-center 5 (propertize (s-trim evil-emacs-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-emacs-state-background-color))))
      (setq evil-motion-state-tag
	    (s-center 5 (propertize (s-trim evil-motion-state-tag)
				    'font-lock-face (list :weight 'bold
							  :foreground evil-state-foreground-color
							  :background evil-motion-state-background-color)))))) 

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))

  (use-package evil-mc
    :config
    (global-evil-mc-mode 1))

  (use-package evil-numbers
    :config
    (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))

  (use-package evil-args
    :config
    ;; bind evil-args text objects
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)

    ;; bind evil-forward/backward-args
    (define-key evil-normal-state-map "L" 'evil-forward-arg)
    (define-key evil-normal-state-map "H" 'evil-backward-arg)
    (define-key evil-motion-state-map "L" 'evil-forward-arg)
    (define-key evil-motion-state-map "H" 'evil-backward-arg)
    ;; bind evil-jump-out-args
    (define-key evil-normal-state-map "K" 'evil-jump-out-args))

  (require 'evil-unimpaired)
  (evil-unimpaired-mode)
#+END_SRC
** Magit for Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status))

  (use-package evil-magit
    :after evil magit
    :config
    (setq evil-magit-state 'normal))
#+END_SRC
** Sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
** Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-fontify-whole-heading-line t)
    (setq org-support-shift-select t)
    (setq org-agenda-files (list "~/Documents/agendas"))
    :config
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c b") 'org-switchb))
#+END_SRC
*** Org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
*** org-templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
=======
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-cache-file (expand-file-name "cache/projectile.cache" user-emacs-directory)
	  projectile-known-projects-file (expand-file-name "cache/projectile-bookmarks.eld" user-emacs-directory))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (setq projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))
#+END_SRC
** Company for auto completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    (global-company-mode t))
#+END_SRC
** Search
*** Avy
    #+BEGIN_SRC emacs-lisp
      (use-package avy
	:bind ("M-s" . avy-goto-char))
    #+END_SRC
*** Ivy
 #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :init (ivy-mode 1)
     :bind (("C-c C-r" . ivy-resume)
	    ("<f6>" . ivy-resume))
     :config
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t))
 #+END_SRC
*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:bind ("C-s" . swiper))
    #+END_SRC
*** Counsel
 #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :bind
     (("C-x C-f" . counsel-find-file)
      ("<f1> u" . counsel-unicode-char)))
 #+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :bind
    (([f8] . treemacs)
     ("M-0" . treemacs-select-window))
    :config
    (setq treemacs-persist-file
	  (expand-file-name "cache/treemacs-persist" user-emacs-directory)))
#+END_SRC
*** Evil support
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-evil
    :after treemacs evil)
#+END_SRC
*** Projectile integration
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
    :after treemacs projectile)
#+END_SRC
*** Use pretty icons
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :disabled
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
#+END_SRC
** Yasnippets
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode 1))
 #+END_SRC
** Various file types
*** YAML files
 #+BEGIN_SRC emacs-lisp
   (use-package yaml-mode)
 #+END_SRC
*** Read ePub files
 #+BEGIN_SRC emacs-lisp
   (use-package nov 
     :mode ("\\.epub\\'" . nov-mode)
     :init
     (setq nov-save-place-file (expand-file-name "cache/nov-places" user-emacs-directory))
     :config
     (add-hook 'nov-mode-hook (lambda ()
				(face-remap-add-relative 'default :height 1.2)
				(display-line-numbers-mode -1))))
 #+END_SRC
*** Edit Vuejs files
 #+BEGIN_SRC emacs-lisp
   (use-package vue-mode
     :mode "\\.vue\\'")
 #+END_SRC
*** gRPC/Proto
 #+BEGIN_SRC emacs-lisp
   (use-package protobuf-mode)
 #+END_SRC
*** Json
 #+BEGIN_SRC emacs-lisp
   (use-package json-mode)
 #+END_SRC
*** Markdown
 #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :init (setq markdown-command "multimarkdown"))
 #+END_SRC
*** Vimrc
#+BEGIN_SRC emacs-lisp
  (use-package vimrc-mode)
#+END_SRC
* Personal Settings
** Variables  
#+BEGIN_SRC emacs-lisp
  (set-language-environment "utf-8")
  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 1
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t
	display-time-format "[%R]"
	display-time-default-load-average nil)
  (setq visible-bell t)
  (when (eq system-type 'windows-nt)
    (setq inhibit-compacting-font-caches t)) 
  (setq recentf-save-file (expand-file-name "cache/recentf" user-emacs-directory))
  (setq bookmark-default-file (expand-file-name "cache/bookmarks" user-emacs-directory))
  (setq tramp-persistency-file-name (expand-file-name
				     "cache/tramp" user-emacs-directory))
#+END_SRC
** Functions 
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (display-battery-mode t)
  (display-time-mode t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Faces
#+BEGIN_SRC emacs-lisp
  ;; default face
  (set-face-attribute 'default nil
		      :family "Iosevka"
		      :foundry "outline"
		      :slant 'normal
		      :weight 'normal
		      :height 120
		      :width 'normal)

    ;; highlight the current line number
    (defun ixl/highlight-current-line-number ()
      "This function highlights the current line number with the cursor colour"
      (set-face-attribute 'line-number-current-line nil
				  :foreground (face-attribute 'cursor :background)
				  :weight 'bold
				  :underline t))
    (add-hook 'display-line-numbers-mode-hook 'ixl/highlight-current-line-number)
#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
  (global-set-key [f12] 'eshell)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key [mouse-3] 'mouse-popup-menubar-stuff)
#+END_SRC
** Mode line
#+BEGIN_SRC emacs-lisp
  (require 'ixl-display-weather)
  (ixl-display-weather-info)
#+END_SRC
** EShell prompt
#+BEGIN_SRC emacs-lisp
  (defun ixl/pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((p-lst (split-string pwd "/")))
      (if (> (length p-lst) 2)
	  (concat
	   (mapconcat (lambda (elm) (if (zerop (length elm)) ""
				      (substring elm 0 1)))
		      (butlast p-lst 2)
		      "/")
	   "/"
	   (mapconcat (lambda (elm) elm)
		      (last p-lst 2)
		      "/"))
	pwd)))  ;; Otherwise, we just return the PWD

  (defun ixl/pwd-replace-home (pwd)
    "Replace home in PWD with tilde (~) character."
    (interactive)
    (let* ((home (expand-file-name (getenv "HOME")))
	   (home-len (length home)))
      (if (and
	   (>= (length pwd) home-len)
	   (equal home (substring pwd 0 home-len)))
	  (concat "~" (substring pwd home-len))
	pwd)))

  (defun ixl/eshell-prompt ()
    (require 's)
    (concat
     (propertize "↪ " 'face
		 (if (= eshell-last-command-status 1)
		     `(:foreground ,theme-color-red)
		   `(:foreground ,theme-color-green)))
     (propertize (ixl/pwd-shorten-dirs
		  (ixl/pwd-replace-home (eshell/pwd))) 'face `(:foreground ,theme-color-blue))
     (when (locate-dominating-file (eshell/pwd) ".git")
       (let* ((git-status (shell-command-to-string "git status --porcelain"))
	      (git-branch (s-chomp (shell-command-to-string "git rev-parse --abbrev-ref HEAD"))))
	 (concat " " (propertize git-branch 'face (list :foreground
							(if (string-empty-p git-status)
							    (concat theme-color-green)
							  (concat theme-color-red)))))))
     "\n" 
     (if (= (user-uid) 0)
	 (propertize "Λ" 'face `(:foreground ,theme-color-red))
       "λ")
     " "))
  (setq eshell-prompt-function 'ixl/eshell-prompt)
  (setq eshell-highlight-prompt nil)
#+END_SRC
