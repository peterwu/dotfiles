#+STARTUP: overview

My Emacs Init Settings

* System Customization
** Keep customizations made through the M-x customize function into its own file.
#+BEGIN_SRC emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file)
#+END_SRC
* Package Management 
  This section documents what packages that have been installed and configured.
** add melpa repo
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+END_SRC
** install *use-package* if not
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+END_SRC
** Keep installed packages up to date automatically
#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :init
  (setq auto-package-update-last-update-day-filename (expand-file-name "cache/last-package-update-day" user-emacs-directory))
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+END_SRC 
** Install which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (which-key-mode))
#+END_SRC
** doom line theme 
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-major-mode-color-icon t)
    (load-theme 'whiteboard t))
#+END_SRC
** Evil and its related packages
Simulate a Vim modal editing experience
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode t))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode t))

  (use-package evil-surround
    :config  
    (global-evil-surround-mode t))

  (use-package evil-goggles
    :config  
    (setq evil-goggles-pulse t)
    (evil-goggles-mode))

  (use-package evil-matchit
    :config  
    (global-evil-matchit-mode t))

  (use-package evil-quickscope
    :config
    (global-evil-quickscope-mode t))
#+END_SRC
** Magit for Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+END_SRC
** Avy
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :bind ("M-s" . avy-goto-char))
   #+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :init (ivy-mode 1)
    :bind (("C-c C-r" . ivy-resume)
	   ("<f6>" . ivy-resume))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))
#+END_SRC
** swiper
   #+BEGIN_SRC emacs-lisp
     (use-package swiper
       :bind ("C-s" . swiper))
   #+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-x" . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("C-h l" . counsel-find-library)
     )) 
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (smex-initialize)
    (setq smex-save-file (expand-file-name "cache/smex-items" user-emacs-directory))
    :bind
    (("M-x" . smex)
    ("M-X" . smex-major-mode-commands)
    ("C-c C-c M-x" . execute-extended-command)))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :bind ("s-e" . sudo-edit))
#+END_SRC
** raindow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :hook prog-mode)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC
** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq recentf-save-file (expand-file-name "cache/recentf" user-emacs-directory))
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 8)
			    (projects . 3)
			    (agenda . 3)
			    (bookmarks . 3)
			    (registers . 3)))
    (add-hook 'dashboard-mode-hook (lambda ()
			    (display-line-numbers-mode -1)))
    (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name))))
#+END_SRC
=======
** Read PDF files 
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+END_SRC
** Edit YAML files
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC
** Read ePub files
#+BEGIN_SRC emacs-lisp
(use-package nov 
  :mode ("\\.epub\\'" . nov-mode)
  :init
  (setq nov-save-place-file (expand-file-name "cache/nov-places" user-emacs-directory))
  :config
  (add-hook 'nov-mode-hook (lambda ()
			     (face-remap-add-relative 'default :height 1.2)
			     (display-line-numbers-mode -1))))
#+END_SRC
** Edit Vuejs files
#+BEGIN_SRC emacs-lisp
(use-package vue-mode
  :mode "\\.vue\\'")
#+END_SRC
** Org mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :init
    (setq org-support-shift-select t)
    (setq org-agenda-files (list "~/Documents/agendas"))
    :config
    (global-set-key (kbd "C-c l") 'org-store-link)
    (global-set-key (kbd "C-c a") 'org-agenda)
    (global-set-key (kbd "C-c c") 'org-capture)
    (global-set-key (kbd "C-c b") 'org-switchb))
#+END_SRC
*** Org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
*** org-templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
=======
** Project Management
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-cache-file (expand-file-name "cache/projectile.cache" user-emacs-directory)
	  projectile-known-projects-file (expand-file-name "cache/projectile-bookmarks.eld" user-emacs-directory))
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (setq projectile-completion-system 'ido))
#+END_SRC
** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
	    treemacs-deferred-git-apply-delay   0.5
	    treemacs-display-in-side-window     t
	    treemacs-file-event-delay           5000
	    treemacs-file-follow-delay          0.2
	    treemacs-follow-after-init          t
	    treemacs-follow-recenter-distance   0.1
	    treemacs-git-command-pipe           ""
	    treemacs-goto-tag-strategy          'refetch-index
	    treemacs-indentation                2
	    treemacs-indentation-string         " "
	    treemacs-is-never-other-window      nil
	    treemacs-max-git-entries            5000
	    treemacs-no-png-images              nil
	    treemacs-no-delete-other-windows    t
	    treemacs-project-follow-cleanup     nil
	    treemacs-persist-file               (expand-file-name "cache/treemacs-persist" user-emacs-directory)
	    treemacs-recenter-after-file-follow nil
	    treemacs-recenter-after-tag-follow  nil
	    treemacs-show-cursor                nil
	    treemacs-show-hidden-files          t
	    treemacs-silent-filewatch           nil
	    treemacs-silent-refresh             nil
	    treemacs-sorting                    'alphabetic-desc
	    treemacs-space-between-root-nodes   t
	    treemacs-tag-follow-cleanup         t
	    treemacs-tag-follow-delay           1.5
	    treemacs-width                      35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;; (treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
		   (not (null (executable-find "python3"))))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ([f8]        . treemacs)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC
*** Projectile integration
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile)
#+END_SRC
*** Use pretty icons
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
    :disabled 
    :after treemacs dired
    :config (treemacs-icons-dired-mode))
#+END_SRC
** Gnus for Emails
#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :defer t
    :init
    (setq read-mail-command 'gnus)
    (setq user-mail-address "peterwu@hotmail.com"
	  user-full-name "Peter Wu")
    ;; (setq mm-text-html-render 'gnus-w3m)
    (setq gnus-select-method
	  '(nnimap "hotmail"
		   (nnimap-address "imap-mail.outlook.com")
		   (nnimap-server-port 993)
		   (nnimap-stream ssl)))
    (setq smtpmail-smtp-server "smtp-mail.outlook.com"
	  smtpmail-smtp-service 587))
#+END_SRC
** Company for auto completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0
	  company-minimum-prefix-length 3)
    (global-company-mode t))
#+END_SRC
** yasnippets
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :config
     (use-package yasnippet-snippets)
     (yas-global-mode 1))
 #+END_SRC
* Personal Settings
** Variables  
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
	inhibit-startup-echo-area-message t)
  (setq backup-inhibited t
	make-backup-files nil
	auto-save-default nil
	auto-save-list-file-prefix nil)
  (setq scroll-step 1
	scroll-margin 2
	scroll-conservatively 10000
	auto-window-vscroll nil)
  (setq vc-follow-symlinks nil)
  (setq delete-by-moving-to-trash t)
  (setq default-input-method "chinese-py")
  (setq display-line-numbers-type 'relative)
  (setq display-time-24hr-format t)
  (setq tramp-persistency-file-name (expand-file-name
				     "cache/tramp" user-emacs-directory))
#+END_SRC
** Functions 
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Modes
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode t)
  (column-number-mode t)
  (global-hl-line-mode t)
  (electric-pair-mode t)
  (show-paren-mode t)
  (size-indication-mode t)
  (global-display-line-numbers-mode t)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
** Faces
#+BEGIN_SRC emacs-lisp
  ;; default face
  (set-face-attribute 'default nil
		      :family "Fira Code Retina"
		      :foundry "outline"
		      :slant 'normal
		      :weight 'normal
		      :height 120
		      :width 'normal)

  ;; highlight the current line number
  ;; (add-hook 'text-mode-hook (lambda ()
  ;; 	  (set-face-attribute 'line-number-current-line nil
  ;; 			      :foreground (face-attribute 'cursor :background)
  ;; 			      :weight 'bold)))
#+END_SRC
** Key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key [f1] 'eshell)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
